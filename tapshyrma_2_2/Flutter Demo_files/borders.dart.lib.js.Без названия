// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/borders.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/foundation/collections.dart'], (function load__packages__flutter__src__painting__borders_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__object$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__foundation__collections$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  var borders$ = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $length = dartx.length;
  var $any = dartx.any;
  var $fold = dartx.fold;
  var $last = dartx.last;
  var $first = dartx.first;
  var $_set = dartx._set;
  var $addAll = dartx.addAll;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $reversed = dartx.reversed;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    DiagnosticsPropertyOfColor: () => (T.DiagnosticsPropertyOfColor = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Color)))(),
    EnumPropertyOfBorderStyle: () => (T.EnumPropertyOfBorderStyle = dart.constFn(diagnostics.EnumProperty$(borders$.BorderStyle)))(),
    JSArrayOfShapeBorder: () => (T.JSArrayOfShapeBorder = dart.constFn(_interceptors.JSArray$(borders$.ShapeBorder)))(),
    OutlinedBorderN: () => (T.OutlinedBorderN = dart.constFn(dart.nullable(borders$.OutlinedBorder)))(),
    ShapeBorderTobool: () => (T.ShapeBorderTobool = dart.constFn(dart.fnType(core.bool, [borders$.ShapeBorder])))(),
    EdgeInsetsGeometryAndShapeBorderToEdgeInsetsGeometry: () => (T.EdgeInsetsGeometryAndShapeBorderToEdgeInsetsGeometry = dart.constFn(dart.fnType(edge_insets.EdgeInsetsGeometry, [edge_insets.EdgeInsetsGeometry, borders$.ShapeBorder])))(),
    ListOfShapeBorder: () => (T.ListOfShapeBorder = dart.constFn(core.List$(borders$.ShapeBorder)))(),
    ShapeBorderToShapeBorder: () => (T.ShapeBorderToShapeBorder = dart.constFn(dart.fnType(borders$.ShapeBorder, [borders$.ShapeBorder])))(),
    ShapeBorderN: () => (T.ShapeBorderN = dart.constFn(dart.nullable(borders$.ShapeBorder)))(),
    JSArrayOfShapeBorderN: () => (T.JSArrayOfShapeBorderN = dart.constFn(_interceptors.JSArray$(T.ShapeBorderN())))(),
    ShapeBorderToString: () => (T.ShapeBorderToString = dart.constFn(dart.fnType(core.String, [borders$.ShapeBorder])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: borders$.BorderStyle.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: borders$.BorderStyle.prototype,
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      });
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2], borders$.BorderStyle);
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: borders$.BorderSide.prototype,
        [strokeAlign$]: -1,
        [style$]: C[1] || CT.C1,
        [width$]: 0,
        [color$]: C[3] || CT.C3
      });
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "package:flutter/src/painting/borders.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/borders.dart"
  ];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  borders$.BorderStyle = class BorderStyle extends core._Enum {
    [_enumToString]() {
      return "BorderStyle." + this[_name];
    }
  };
  (borders$.BorderStyle.new = function(index, name) {
    borders$.BorderStyle.__proto__.new.call(this, index, name);
    ;
  }).prototype = borders$.BorderStyle.prototype;
  dart.addTypeTests(borders$.BorderStyle);
  dart.addTypeCaches(borders$.BorderStyle);
  dart.setMethodSignature(borders$.BorderStyle, () => ({
    __proto__: dart.getMethods(borders$.BorderStyle.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(borders$.BorderStyle, I[0]);
  dart.setStaticFieldSignature(borders$.BorderStyle, () => ['values', 'none', 'solid']);
  dart.defineLazy(borders$.BorderStyle, {
    /*borders$.BorderStyle.values*/get values() {
      return C[0] || CT.C0;
    },
    /*borders$.BorderStyle.none*/get none() {
      return C[1] || CT.C1;
    },
    /*borders$.BorderStyle.solid*/get solid() {
      return C[2] || CT.C2;
    }
  }, false);
  var color$ = dart.privateName(borders$, "BorderSide.color");
  var width$ = dart.privateName(borders$, "BorderSide.width");
  var style$ = dart.privateName(borders$, "BorderSide.style");
  var strokeAlign$ = dart.privateName(borders$, "BorderSide.strokeAlign");
  var Color_value = dart.privateName(ui, "Color.value");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  borders$.BorderSide = class BorderSide extends Object_Diagnosticable$36 {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get strokeAlign() {
      return this[strokeAlign$];
    }
    set strokeAlign(value) {
      super.strokeAlign = value;
    }
    static ['_#new#tearOff'](opts) {
      let color = opts && 'color' in opts ? opts.color : C[3] || CT.C3;
      let width = opts && 'width' in opts ? opts.width : 1;
      let style = opts && 'style' in opts ? opts.style : C[2] || CT.C2;
      let strokeAlign = opts && 'strokeAlign' in opts ? opts.strokeAlign : -1;
      return new borders$.BorderSide.new({color: color, width: width, style: style, strokeAlign: strokeAlign});
    }
    static merge(a, b) {
      if (!(a !== null)) dart.assertFailed(null, I[1], 87, 12, "a != null");
      if (!(b !== null)) dart.assertFailed(null, I[1], 88, 12, "b != null");
      if (!borders$.BorderSide.canMerge(a, b)) dart.assertFailed(null, I[1], 89, 12, "canMerge(a, b)");
      let aIsNone = a.style === borders$.BorderStyle.none && a.width === 0.0;
      let bIsNone = b.style === borders$.BorderStyle.none && b.width === 0.0;
      if (aIsNone && bIsNone) {
        return borders$.BorderSide.none;
      }
      if (aIsNone) {
        return b;
      }
      if (bIsNone) {
        return a;
      }
      if (!a.color._equals(b.color)) dart.assertFailed(null, I[1], 101, 12, "a.color == b.color");
      if (!(a.style === b.style)) dart.assertFailed(null, I[1], 102, 12, "a.style == b.style");
      return new borders$.BorderSide.new({color: a.color, width: a.width + b.width, strokeAlign: math.max(core.double, a.strokeAlign, b.strokeAlign), style: a.style});
    }
    copyWith(opts) {
      let t2, t2$, t2$0, t2$1;
      let color = opts && 'color' in opts ? opts.color : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let style = opts && 'style' in opts ? opts.style : null;
      let strokeAlign = opts && 'strokeAlign' in opts ? opts.strokeAlign : null;
      return new borders$.BorderSide.new({color: (t2 = color, t2 == null ? this.color : t2), width: (t2$ = width, t2$ == null ? this.width : t2$), style: (t2$0 = style, t2$0 == null ? this.style : t2$0), strokeAlign: (t2$1 = strokeAlign, t2$1 == null ? this.strokeAlign : t2$1)});
    }
    scale(t) {
      if (!(t !== null)) dart.assertFailed(null, I[1], 205, 12, "t != null");
      return new borders$.BorderSide.new({color: this.color, width: math.max(core.double, 0.0, this.width * t), style: t <= 0.0 ? borders$.BorderStyle.none : this.style});
    }
    toPaint() {
      let t2, t2$;
      switch (this.style) {
        case C[2] || CT.C2:
          {
            t2 = ui.Paint.new();
            return (() => {
              t2.color = this.color;
              t2.strokeWidth = this.width;
              t2.style = ui.PaintingStyle.stroke;
              return t2;
            })();
          }
        case C[1] || CT.C1:
          {
            t2$ = ui.Paint.new();
            return (() => {
              t2$.color = C[4] || CT.C4;
              t2$.strokeWidth = 0.0;
              t2$.style = ui.PaintingStyle.stroke;
              return t2$;
            })();
          }
      }
    }
    static canMerge(a, b) {
      if (!(a !== null)) dart.assertFailed(null, I[1], 242, 12, "a != null");
      if (!(b !== null)) dart.assertFailed(null, I[1], 243, 12, "b != null");
      if (a.style === borders$.BorderStyle.none && a.width === 0.0 || b.style === borders$.BorderStyle.none && b.width === 0.0) {
        return true;
      }
      return a.style === b.style && a.color._equals(b.color);
    }
    static lerp(a, b, t) {
      if (!(a !== null)) dart.assertFailed(null, I[1], 258, 12, "a != null");
      if (!(b !== null)) dart.assertFailed(null, I[1], 259, 12, "b != null");
      if (!(t !== null)) dart.assertFailed(null, I[1], 260, 12, "t != null");
      if (t === 0.0) {
        return a;
      }
      if (t === 1.0) {
        return b;
      }
      let width = dart.nullCheck(ui.lerpDouble(a.width, b.width, t));
      if (width < 0.0) {
        return borders$.BorderSide.none;
      }
      if (a.style === b.style && a.strokeAlign === b.strokeAlign) {
        return new borders$.BorderSide.new({color: dart.nullCheck(ui.Color.lerp(a.color, b.color, t)), width: width, style: a.style, strokeAlign: a.strokeAlign});
      }
      let colorA = null;
      let colorB = null;
      switch (a.style) {
        case C[2] || CT.C2:
          {
            colorA = a.color;
            break;
          }
        case C[1] || CT.C1:
          {
            colorA = a.color.withAlpha(0);
            break;
          }
      }
      switch (b.style) {
        case C[2] || CT.C2:
          {
            colorB = b.color;
            break;
          }
        case C[1] || CT.C1:
          {
            colorB = b.color.withAlpha(0);
            break;
          }
      }
      if (a.strokeAlign !== b.strokeAlign) {
        return new borders$.BorderSide.new({color: dart.nullCheck(ui.Color.lerp(colorA, colorB, t)), width: width, strokeAlign: dart.nullCheck(ui.lerpDouble(a.strokeAlign, b.strokeAlign, t))});
      }
      return new borders$.BorderSide.new({color: dart.nullCheck(ui.Color.lerp(colorA, colorB, t)), width: width, strokeAlign: a.strokeAlign});
    }
    get strokeInset() {
      return this.width * (1 - (1 + this.strokeAlign) / 2);
    }
    get strokeOutset() {
      return this.width * (1 + this.strokeAlign) / 2;
    }
    get strokeOffset() {
      return this.width * this.strokeAlign;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return borders$.BorderSide.is(other) && other.color._equals(this.color) && other.width === this.width && other.style === this.style && other.strokeAlign === this.strokeAlign;
    }
    get hashCode() {
      return core.Object.hash(this.color, this.width, this.style, this.strokeAlign);
    }
    toStringShort() {
      return "BorderSide";
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.DiagnosticsPropertyOfColor()).new("color", this.color, {defaultValue: C[3] || CT.C3}));
      properties.add(new diagnostics.DoubleProperty.new("width", this.width, {defaultValue: 1.0}));
      properties.add(new diagnostics.DoubleProperty.new("strokeAlign", this.strokeAlign, {defaultValue: -1}));
      properties.add(new (T.EnumPropertyOfBorderStyle()).new("style", this.style, {defaultValue: borders$.BorderStyle.solid}));
    }
  };
  (borders$.BorderSide.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : C[3] || CT.C3;
    let width = opts && 'width' in opts ? opts.width : 1;
    let style = opts && 'style' in opts ? opts.style : C[2] || CT.C2;
    let strokeAlign = opts && 'strokeAlign' in opts ? opts.strokeAlign : -1;
    this[color$] = color;
    this[width$] = width;
    this[style$] = style;
    this[strokeAlign$] = strokeAlign;
    if (!(color !== null)) dart.assertFailed(null, I[1], 69, 15, "color != null");
    if (!(width !== null)) dart.assertFailed(null, I[1], 70, 15, "width != null");
    if (!(width >= 0.0)) dart.assertFailed(null, I[1], 71, 15, "width >= 0.0");
    if (!(style !== null)) dart.assertFailed(null, I[1], 72, 15, "style != null");
    if (!(strokeAlign !== null)) dart.assertFailed(null, I[1], 73, 15, "strokeAlign != null");
    ;
  }).prototype = borders$.BorderSide.prototype;
  dart.addTypeTests(borders$.BorderSide);
  dart.addTypeCaches(borders$.BorderSide);
  dart.setMethodSignature(borders$.BorderSide, () => ({
    __proto__: dart.getMethods(borders$.BorderSide.__proto__),
    copyWith: dart.fnType(borders$.BorderSide, [], {color: dart.nullable(ui.Color), strokeAlign: dart.nullable(core.double), style: dart.nullable(borders$.BorderStyle), width: dart.nullable(core.double)}, {}),
    scale: dart.fnType(borders$.BorderSide, [core.double]),
    toPaint: dart.fnType(ui.Paint, [])
  }));
  dart.setStaticMethodSignature(borders$.BorderSide, () => ['merge', 'canMerge', 'lerp']);
  dart.setGetterSignature(borders$.BorderSide, () => ({
    __proto__: dart.getGetters(borders$.BorderSide.__proto__),
    strokeInset: core.double,
    strokeOutset: core.double,
    strokeOffset: core.double
  }));
  dart.setLibraryUri(borders$.BorderSide, I[0]);
  dart.setFieldSignature(borders$.BorderSide, () => ({
    __proto__: dart.getFields(borders$.BorderSide.__proto__),
    color: dart.finalFieldType(ui.Color),
    width: dart.finalFieldType(core.double),
    style: dart.finalFieldType(borders$.BorderStyle),
    strokeAlign: dart.finalFieldType(core.double)
  }));
  dart.setStaticFieldSignature(borders$.BorderSide, () => ['none', 'strokeAlignInside', 'strokeAlignCenter', 'strokeAlignOutside']);
  dart.defineExtensionMethods(borders$.BorderSide, ['_equals']);
  dart.defineExtensionAccessors(borders$.BorderSide, ['hashCode']);
  dart.defineLazy(borders$.BorderSide, {
    /*borders$.BorderSide.none*/get none() {
      return C[5] || CT.C5;
    },
    /*borders$.BorderSide.strokeAlignInside*/get strokeAlignInside() {
      return -1;
    },
    /*borders$.BorderSide.strokeAlignCenter*/get strokeAlignCenter() {
      return 0;
    },
    /*borders$.BorderSide.strokeAlignOutside*/get strokeAlignOutside() {
      return 1;
    }
  }, false);
  borders$.ShapeBorder = class ShapeBorder extends core.Object {
    add(other, opts) {
      let reversed = opts && 'reversed' in opts ? opts.reversed : false;
      return null;
    }
    ['+'](other) {
      let t2, t2$;
      t2$ = (t2 = this.add(other), t2 == null ? other.add(this, {reversed: true}) : t2);
      return t2$ == null ? new borders$._CompoundBorder.new(T.JSArrayOfShapeBorder().of([other, this])) : t2$;
    }
    lerpFrom(a, t) {
      if (a == null) {
        return this.scale(t);
      }
      return null;
    }
    lerpTo(b, t) {
      if (b == null) {
        return this.scale(1.0 - t);
      }
      return null;
    }
    static lerp(a, b, t) {
      let t2;
      if (!(t !== null)) dart.assertFailed(null, I[1], 520, 12, "t != null");
      let result = null;
      if (b != null) {
        result = b.lerpFrom(a, t);
      }
      if (result == null && a != null) {
        result = a.lerpTo(b, t);
      }
      t2 = result;
      return t2 == null ? t < 0.5 ? a : b : t2;
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!!this.preferPaintInterior) dart.assertFailed(dart.str(this[$runtimeType]) + ".preferPaintInterior returns true but " + dart.str(this[$runtimeType]) + ".paintInterior is not implemented.", I[1], 620, 12, "!preferPaintInterior");
      if (!false) dart.assertFailed(dart.str(this[$runtimeType]) + ".preferPaintInterior returns false, so it is an error to call its paintInterior method.", I[1], 621, 12, "false");
    }
    get preferPaintInterior() {
      return false;
    }
    toString() {
      return object.objectRuntimeType(this, "ShapeBorder") + "()";
    }
  };
  (borders$.ShapeBorder.new = function() {
    ;
  }).prototype = borders$.ShapeBorder.prototype;
  dart.addTypeTests(borders$.ShapeBorder);
  dart.addTypeCaches(borders$.ShapeBorder);
  dart.setMethodSignature(borders$.ShapeBorder, () => ({
    __proto__: dart.getMethods(borders$.ShapeBorder.__proto__),
    add: dart.fnType(dart.nullable(borders$.ShapeBorder), [borders$.ShapeBorder], {reversed: core.bool}, {}),
    '+': dart.fnType(borders$.ShapeBorder, [borders$.ShapeBorder]),
    lerpFrom: dart.fnType(dart.nullable(borders$.ShapeBorder), [dart.nullable(borders$.ShapeBorder), core.double]),
    lerpTo: dart.fnType(dart.nullable(borders$.ShapeBorder), [dart.nullable(borders$.ShapeBorder), core.double]),
    paintInterior: dart.fnType(dart.void, [ui.Canvas, ui.Rect, ui.Paint], {textDirection: dart.nullable(ui.TextDirection)}, {})
  }));
  dart.setStaticMethodSignature(borders$.ShapeBorder, () => ['lerp']);
  dart.setGetterSignature(borders$.ShapeBorder, () => ({
    __proto__: dart.getGetters(borders$.ShapeBorder.__proto__),
    preferPaintInterior: core.bool
  }));
  dart.setLibraryUri(borders$.ShapeBorder, I[0]);
  dart.defineExtensionMethods(borders$.ShapeBorder, ['toString']);
  var side$ = dart.privateName(borders$, "OutlinedBorder.side");
  borders$.OutlinedBorder = class OutlinedBorder extends borders$.ShapeBorder {
    get side() {
      return this[side$];
    }
    set side(value) {
      super.side = value;
    }
    get dimensions() {
      return new edge_insets.EdgeInsets.all(math.max(core.double, this.side.strokeInset, 0.0));
    }
    lerpFrom(a, t) {
      if (a == null) {
        return this.scale(t);
      }
      return null;
    }
    lerpTo(b, t) {
      if (b == null) {
        return this.scale(1.0 - t);
      }
      return null;
    }
    static lerp(a, b, t) {
      let t2;
      if (!(t !== null)) dart.assertFailed(null, I[1], 710, 12, "t != null");
      let result = null;
      if (b != null) {
        result = b.lerpFrom(a, t);
      }
      if (result == null && a != null) {
        result = a.lerpTo(b, t);
      }
      t2 = T.OutlinedBorderN().as(result);
      return t2 == null ? t < 0.5 ? a : b : t2;
    }
  };
  (borders$.OutlinedBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[5] || CT.C5;
    this[side$] = side;
    if (!(side !== null)) dart.assertFailed(null, I[1], 667, 66, "side != null");
    borders$.OutlinedBorder.__proto__.new.call(this);
    ;
  }).prototype = borders$.OutlinedBorder.prototype;
  dart.addTypeTests(borders$.OutlinedBorder);
  dart.addTypeCaches(borders$.OutlinedBorder);
  dart.setStaticMethodSignature(borders$.OutlinedBorder, () => ['lerp']);
  dart.setGetterSignature(borders$.OutlinedBorder, () => ({
    __proto__: dart.getGetters(borders$.OutlinedBorder.__proto__),
    dimensions: edge_insets.EdgeInsetsGeometry
  }));
  dart.setLibraryUri(borders$.OutlinedBorder, I[0]);
  dart.setFieldSignature(borders$.OutlinedBorder, () => ({
    __proto__: dart.getFields(borders$.OutlinedBorder.__proto__),
    side: dart.finalFieldType(borders$.BorderSide)
  }));
  borders$._CompoundBorder = class _CompoundBorder extends borders$.ShapeBorder {
    static ['_#new#tearOff'](borders) {
      return new borders$._CompoundBorder.new(borders);
    }
    get dimensions() {
      return this.borders[$fold](edge_insets.EdgeInsetsGeometry, edge_insets.EdgeInsets.zero, dart.fn((previousValue, border) => previousValue.add(border.dimensions), T.EdgeInsetsGeometryAndShapeBorderToEdgeInsetsGeometry()));
    }
    add(other, opts) {
      let t2;
      let reversed = opts && 'reversed' in opts ? opts.reversed : false;
      if (!borders$._CompoundBorder.is(other)) {
        let ours = reversed ? this.borders[$last] : this.borders[$first];
        let merged = (t2 = ours.add(other, {reversed: reversed}), t2 == null ? other.add(ours, {reversed: !reversed}) : t2);
        if (merged != null) {
          let result = (() => {
            let t2 = T.ListOfShapeBorder().of(this.borders);
            return t2;
          })();
          result[$_set](reversed ? result[$length] - 1 : 0, merged);
          return new borders$._CompoundBorder.new(result);
        }
      }
      let mergedBorders = (() => {
        let t3 = T.JSArrayOfShapeBorder().of([]);
        if (reversed) t3[$addAll](this.borders);
        if (borders$._CompoundBorder.is(other))
          t3[$addAll](other.borders);
        else
          t3.push(other);
        if (!reversed) t3[$addAll](this.borders);
        return t3;
      })();
      return new borders$._CompoundBorder.new(mergedBorders);
    }
    scale(t) {
      return new borders$._CompoundBorder.new(this.borders[$map](borders$.ShapeBorder, dart.fn(border => border.scale(t), T.ShapeBorderToShapeBorder()))[$toList]());
    }
    lerpFrom(a, t) {
      return borders$._CompoundBorder.lerp(a, this, t);
    }
    lerpTo(b, t) {
      return borders$._CompoundBorder.lerp(this, b, t);
    }
    static lerp(a, b, t) {
      let t4;
      if (!(t !== null)) dart.assertFailed(null, I[1], 791, 12, "t != null");
      if (!(borders$._CompoundBorder.is(a) || borders$._CompoundBorder.is(b))) dart.assertFailed(null, I[1], 792, 12, "a is _CompoundBorder || b is _CompoundBorder");
      let aList = borders$._CompoundBorder.is(a) ? a.borders : T.JSArrayOfShapeBorderN().of([a]);
      let bList = borders$._CompoundBorder.is(b) ? b.borders : T.JSArrayOfShapeBorderN().of([b]);
      let results = T.JSArrayOfShapeBorder().of([]);
      let length = math.max(core.int, aList[$length], bList[$length]);
      for (let index = 0; index < length; index = index + 1) {
        let localA = index < aList[$length] ? aList[$_get](index) : null;
        let localB = index < bList[$length] ? bList[$_get](index) : null;
        if (localA != null && localB != null) {
          let localResult = (t4 = localA.lerpTo(localB, t), t4 == null ? localB.lerpFrom(localA, t) : t4);
          if (localResult != null) {
            results[$add](localResult);
            continue;
          }
        }
        if (localB != null) {
          results[$add](localB.scale(t));
        }
        if (localA != null) {
          results[$add](localA.scale(1.0 - t));
        }
      }
      return new borders$._CompoundBorder.new(results);
    }
    getInnerPath(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      for (let index = 0; index < this.borders[$length] - 1; index = index + 1) {
        rect = this.borders[$_get](index).dimensions.resolve(textDirection).deflateRect(rect);
      }
      return this.borders[$last].getInnerPath(rect, {textDirection: textDirection});
    }
    getOuterPath(rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      return this.borders[$first].getOuterPath(rect, {textDirection: textDirection});
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      this.borders[$first].paintInterior(canvas, rect, paint, {textDirection: textDirection});
    }
    get preferPaintInterior() {
      return true;
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      for (let border of this.borders) {
        border.paint(canvas, rect, {textDirection: textDirection});
        rect = border.dimensions.resolve(textDirection).deflateRect(rect);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return borders$._CompoundBorder.is(other) && collections.listEquals(borders$.ShapeBorder, other.borders, this.borders);
    }
    get hashCode() {
      return core.Object.hashAll(this.borders);
    }
    toString() {
      return this.borders[$reversed][$map](core.String, dart.fn(border => border.toString(), T.ShapeBorderToString()))[$join](" + ");
    }
  };
  (borders$._CompoundBorder.new = function(borders) {
    this.borders = borders;
    if (!(borders !== null)) dart.assertFailed(null, I[1], 727, 14, "borders != null");
    if (!(borders[$length] >= 2)) dart.assertFailed(null, I[1], 728, 14, "borders.length >= 2");
    if (!!borders[$any](dart.fn(border => borders$._CompoundBorder.is(border), T.ShapeBorderTobool()))) dart.assertFailed(null, I[1], 729, 14, "!borders.any((ShapeBorder border) => border is _CompoundBorder)");
    borders$._CompoundBorder.__proto__.new.call(this);
    ;
  }).prototype = borders$._CompoundBorder.prototype;
  dart.addTypeTests(borders$._CompoundBorder);
  dart.addTypeCaches(borders$._CompoundBorder);
  dart.setMethodSignature(borders$._CompoundBorder, () => ({
    __proto__: dart.getMethods(borders$._CompoundBorder.__proto__),
    add: dart.fnType(borders$.ShapeBorder, [borders$.ShapeBorder], {reversed: core.bool}, {}),
    scale: dart.fnType(borders$.ShapeBorder, [core.double]),
    getInnerPath: dart.fnType(ui.Path, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(ui.Path, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {})
  }));
  dart.setStaticMethodSignature(borders$._CompoundBorder, () => ['lerp']);
  dart.setGetterSignature(borders$._CompoundBorder, () => ({
    __proto__: dart.getGetters(borders$._CompoundBorder.__proto__),
    dimensions: edge_insets.EdgeInsetsGeometry
  }));
  dart.setLibraryUri(borders$._CompoundBorder, I[0]);
  dart.setFieldSignature(borders$._CompoundBorder, () => ({
    __proto__: dart.getFields(borders$._CompoundBorder.__proto__),
    borders: dart.finalFieldType(core.List$(borders$.ShapeBorder))
  }));
  dart.defineExtensionMethods(borders$._CompoundBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(borders$._CompoundBorder, ['hashCode']);
  borders$.paintBorder = function paintBorder(canvas, rect, opts) {
    let t4;
    let top = opts && 'top' in opts ? opts.top : C[5] || CT.C5;
    let right = opts && 'right' in opts ? opts.right : C[5] || CT.C5;
    let bottom = opts && 'bottom' in opts ? opts.bottom : C[5] || CT.C5;
    let left = opts && 'left' in opts ? opts.left : C[5] || CT.C5;
    if (!(canvas !== null)) dart.assertFailed(null, I[1], 900, 10, "canvas != null");
    if (!(rect !== null)) dart.assertFailed(null, I[1], 901, 10, "rect != null");
    if (!(top !== null)) dart.assertFailed(null, I[1], 902, 10, "top != null");
    if (!(right !== null)) dart.assertFailed(null, I[1], 903, 10, "right != null");
    if (!(bottom !== null)) dart.assertFailed(null, I[1], 904, 10, "bottom != null");
    if (!(left !== null)) dart.assertFailed(null, I[1], 905, 10, "left != null");
    let paint = (t4 = ui.Paint.new(), (() => {
      t4.strokeWidth = 0.0;
      return t4;
    })());
    let path = ui.Path.new();
    switch (top.style) {
      case C[2] || CT.C2:
        {
          paint.color = top.color;
          path.reset();
          path.moveTo(rect.left, rect.top);
          path.lineTo(rect.right, rect.top);
          if (top.width === 0.0) {
            paint.style = ui.PaintingStyle.stroke;
          } else {
            paint.style = ui.PaintingStyle.fill;
            path.lineTo(rect.right - right.width, rect.top + top.width);
            path.lineTo(rect.left + left.width, rect.top + top.width);
          }
          canvas.drawPath(path, paint);
          break;
        }
      case C[1] || CT.C1:
        {
          break;
        }
    }
    switch (right.style) {
      case C[2] || CT.C2:
        {
          paint.color = right.color;
          path.reset();
          path.moveTo(rect.right, rect.top);
          path.lineTo(rect.right, rect.bottom);
          if (right.width === 0.0) {
            paint.style = ui.PaintingStyle.stroke;
          } else {
            paint.style = ui.PaintingStyle.fill;
            path.lineTo(rect.right - right.width, rect.bottom - bottom.width);
            path.lineTo(rect.right - right.width, rect.top + top.width);
          }
          canvas.drawPath(path, paint);
          break;
        }
      case C[1] || CT.C1:
        {
          break;
        }
    }
    switch (bottom.style) {
      case C[2] || CT.C2:
        {
          paint.color = bottom.color;
          path.reset();
          path.moveTo(rect.right, rect.bottom);
          path.lineTo(rect.left, rect.bottom);
          if (bottom.width === 0.0) {
            paint.style = ui.PaintingStyle.stroke;
          } else {
            paint.style = ui.PaintingStyle.fill;
            path.lineTo(rect.left + left.width, rect.bottom - bottom.width);
            path.lineTo(rect.right - right.width, rect.bottom - bottom.width);
          }
          canvas.drawPath(path, paint);
          break;
        }
      case C[1] || CT.C1:
        {
          break;
        }
    }
    switch (left.style) {
      case C[2] || CT.C2:
        {
          paint.color = left.color;
          path.reset();
          path.moveTo(rect.left, rect.bottom);
          path.lineTo(rect.left, rect.top);
          if (left.width === 0.0) {
            paint.style = ui.PaintingStyle.stroke;
          } else {
            paint.style = ui.PaintingStyle.fill;
            path.lineTo(rect.left + left.width, rect.top + top.width);
            path.lineTo(rect.left + left.width, rect.bottom - bottom.width);
          }
          canvas.drawPath(path, paint);
          break;
        }
      case C[1] || CT.C1:
        {
          break;
        }
    }
  };
  dart.trackLibraries("packages/flutter/src/painting/borders.dart", {
    "package:flutter/src/painting/borders.dart": borders$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["borders.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/borders.dart.lib.js"}');
  // Exports:
  return {
    src__painting__borders: borders$
  };
}));

//# sourceMappingURL=borders.dart.lib.js.map
