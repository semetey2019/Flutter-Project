// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/painting/circle_border.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/foundation/math.dart', 'packages/flutter/src/foundation/object.dart'], (function load__packages__flutter__src__painting__circle_border_dart(dart_sdk, packages__flutter__src__painting__borders$46dart, packages__flutter__src__foundation__math$46dart, packages__flutter__src__foundation__object$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const math = packages__flutter__src__foundation__math$46dart.src__foundation__math;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  var circle_border = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_strokeAlign]: -1,
        [BorderSide_style]: C[1] || CT.C1,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[2] || CT.C2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_Enum__name]: "solid",
        [_Enum_index]: 1
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/painting/circle_border.dart",
    "package:flutter/src/painting/circle_border.dart"
  ];
  var eccentricity$ = dart.privateName(circle_border, "CircleBorder.eccentricity");
  var BorderSide_strokeAlign = dart.privateName(borders, "BorderSide.strokeAlign");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var _adjustRect = dart.privateName(circle_border, "_adjustRect");
  circle_border.CircleBorder = class CircleBorder extends borders.OutlinedBorder {
    get eccentricity() {
      return this[eccentricity$];
    }
    set eccentricity(value) {
      super.eccentricity = value;
    }
    static ['_#new#tearOff'](opts) {
      let side = opts && 'side' in opts ? opts.side : null;
      let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : 0;
      return new circle_border.CircleBorder.new({side: side, eccentricity: eccentricity});
    }
    scale(t) {
      return new circle_border.CircleBorder.new({side: this.side.scale(t), eccentricity: this.eccentricity});
    }
    lerpFrom(a, t) {
      if (circle_border.CircleBorder.is(a)) {
        return new circle_border.CircleBorder.new({side: borders.BorderSide.lerp(a.side, this.side, t), eccentricity: math.clampDouble(dart.nullCheck(ui.lerpDouble(a.eccentricity, this.eccentricity, t)), 0.0, 1.0)});
      }
      return super.lerpFrom(a, t);
    }
    lerpTo(b, t) {
      if (circle_border.CircleBorder.is(b)) {
        return new circle_border.CircleBorder.new({side: borders.BorderSide.lerp(this.side, b.side, t), eccentricity: math.clampDouble(dart.nullCheck(ui.lerpDouble(this.eccentricity, b.eccentricity, t)), 0.0, 1.0)});
      }
      return super.lerpTo(b, t);
    }
    getInnerPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addOval(this[_adjustRect](rect).deflate(this.side.strokeInset));
        return t0;
      })();
    }
    getOuterPath(rect, opts) {
      let t0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      t0 = ui.Path.new();
      return (() => {
        t0.addOval(this[_adjustRect](rect));
        return t0;
      })();
    }
    paintInterior(canvas, rect, paint, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (this.eccentricity === 0.0) {
        canvas.drawCircle(rect.center, rect.shortestSide / 2.0, paint);
      } else {
        canvas.drawOval(this[_adjustRect](rect), paint);
      }
    }
    get preferPaintInterior() {
      return true;
    }
    copyWith(opts) {
      let t0, t0$;
      let side = opts && 'side' in opts ? opts.side : null;
      let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : null;
      return new circle_border.CircleBorder.new({side: (t0 = side, t0 == null ? this.side : t0), eccentricity: (t0$ = eccentricity, t0$ == null ? this.eccentricity : t0$)});
    }
    paint(canvas, rect, opts) {
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      switch (this.side.style) {
        case C[1] || CT.C1:
          {
            break;
          }
        case C[3] || CT.C3:
          {
            if (this.eccentricity === 0.0) {
              canvas.drawCircle(rect.center, (rect.shortestSide + this.side.strokeOffset) / 2, this.side.toPaint());
            } else {
              let borderRect = this[_adjustRect](rect);
              canvas.drawOval(borderRect.inflate(this.side.strokeOffset / 2), this.side.toPaint());
            }
          }
      }
    }
    [_adjustRect](rect) {
      if (this.eccentricity === 0.0 || rect.width === rect.height) {
        return new ui.Rect.fromCircle({center: rect.center, radius: rect.shortestSide / 2.0});
      }
      if (rect.width < rect.height) {
        let delta = (1.0 - this.eccentricity) * (rect.height - rect.width) / 2.0;
        return new ui.Rect.fromLTRB(rect.left, rect.top + delta, rect.right, rect.bottom - delta);
      } else {
        let delta = (1.0 - this.eccentricity) * (rect.width - rect.height) / 2.0;
        return new ui.Rect.fromLTRB(rect.left + delta, rect.top, rect.right - delta, rect.bottom);
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return circle_border.CircleBorder.is(other) && other.side._equals(this.side) && other.eccentricity === this.eccentricity;
    }
    get hashCode() {
      return core.Object.hash(this.side, this.eccentricity);
    }
    toString() {
      if (this.eccentricity !== 0.0) {
        return object.objectRuntimeType(this, "CircleBorder") + "(" + dart.str(this.side) + ", eccentricity: " + dart.str(this.eccentricity) + ")";
      }
      return object.objectRuntimeType(this, "CircleBorder") + "(" + dart.str(this.side) + ")";
    }
  };
  (circle_border.CircleBorder.new = function(opts) {
    let side = opts && 'side' in opts ? opts.side : C[0] || CT.C0;
    let eccentricity = opts && 'eccentricity' in opts ? opts.eccentricity : 0;
    this[eccentricity$] = eccentricity;
    if (!(side !== null)) dart.assertFailed(null, I[0], 36, 16, "side != null");
    if (!(eccentricity !== null)) dart.assertFailed(null, I[0], 37, 16, "eccentricity != null");
    if (!(eccentricity >= 0.0)) dart.assertFailed("The eccentricity argument " + dart.str(eccentricity) + " is not greater than or equal to zero.", I[0], 38, 16, "eccentricity >= 0.0");
    if (!(eccentricity <= 1.0)) dart.assertFailed("The eccentricity argument " + dart.str(eccentricity) + " is not less than or equal to one.", I[0], 39, 16, "eccentricity <= 1.0");
    circle_border.CircleBorder.__proto__.new.call(this, {side: side});
    ;
  }).prototype = circle_border.CircleBorder.prototype;
  dart.addTypeTests(circle_border.CircleBorder);
  dart.addTypeCaches(circle_border.CircleBorder);
  dart.setMethodSignature(circle_border.CircleBorder, () => ({
    __proto__: dart.getMethods(circle_border.CircleBorder.__proto__),
    scale: dart.fnType(borders.ShapeBorder, [core.double]),
    getInnerPath: dart.fnType(ui.Path, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    getOuterPath: dart.fnType(ui.Path, [ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    copyWith: dart.fnType(circle_border.CircleBorder, [], {eccentricity: dart.nullable(core.double), side: dart.nullable(borders.BorderSide)}, {}),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Rect], {textDirection: dart.nullable(ui.TextDirection)}, {}),
    [_adjustRect]: dart.fnType(ui.Rect, [ui.Rect])
  }));
  dart.setLibraryUri(circle_border.CircleBorder, I[1]);
  dart.setFieldSignature(circle_border.CircleBorder, () => ({
    __proto__: dart.getFields(circle_border.CircleBorder.__proto__),
    eccentricity: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(circle_border.CircleBorder, ['_equals', 'toString']);
  dart.defineExtensionAccessors(circle_border.CircleBorder, ['hashCode']);
  dart.trackLibraries("packages/flutter/src/painting/circle_border.dart", {
    "package:flutter/src/painting/circle_border.dart": circle_border
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["circle_border.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/painting/circle_border.dart.lib.js"}');
  // Exports:
  return {
    src__painting__circle_border: circle_border
  };
}));

//# sourceMappingURL=circle_border.dart.lib.js.map
