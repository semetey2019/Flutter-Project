// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/foundation/memory_allocations.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter__src__foundation__memory_allocations_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  var memory_allocations = Object.create(dart.library);
  var $add = dartx.add;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $removeWhere = dartx.removeWhere;
  var $isEmpty = dartx.isEmpty;
  var $firstWhere = dartx.firstWhere;
  var $isNotEmpty = dartx.isNotEmpty;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    MapOfString$Object: () => (T.MapOfString$Object = dart.constFn(core.Map$(core.String, core.Object)))(),
    LinkedMapOfObject$MapOfString$Object: () => (T.LinkedMapOfObject$MapOfString$Object = dart.constFn(_js_helper.LinkedMap$(core.Object, T.MapOfString$Object())))(),
    ObjectEventTovoid: () => (T.ObjectEventTovoid = dart.constFn(dart.fnType(dart.void, [memory_allocations.ObjectEvent])))(),
    ObjectEventToNvoid: () => (T.ObjectEventToNvoid = dart.constFn(dart.nullable(T.ObjectEventTovoid())))(),
    JSArrayOfObjectEventToNvoid: () => (T.JSArrayOfObjectEventToNvoid = dart.constFn(_interceptors.JSArray$(T.ObjectEventToNvoid())))(),
    FnTobool: () => (T.FnTobool = dart.constFn(dart.fnType(core.bool, [T.ObjectEventToNvoid()])))(),
    DiagnosticsPropertyOfObject: () => (T.DiagnosticsPropertyOfObject = dart.constFn(diagnostics.DiagnosticsProperty$(core.Object)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    ListOfDiagnosticsNode: () => (T.ListOfDiagnosticsNode = dart.constFn(core.List$(diagnostics.DiagnosticsNode)))(),
    VoidToListOfDiagnosticsNode: () => (T.VoidToListOfDiagnosticsNode = dart.constFn(dart.fnType(T.ListOfDiagnosticsNode(), [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:flutter/src/foundation/memory_allocations.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/foundation/memory_allocations.dart"
  ];
  memory_allocations._FieldNames = class _FieldNames extends core.Object {
    static ['_#new#tearOff']() {
      return new memory_allocations._FieldNames.new();
    }
  };
  (memory_allocations._FieldNames.new = function() {
    ;
  }).prototype = memory_allocations._FieldNames.prototype;
  dart.addTypeTests(memory_allocations._FieldNames);
  dart.addTypeCaches(memory_allocations._FieldNames);
  dart.setLibraryUri(memory_allocations._FieldNames, I[0]);
  dart.setStaticFieldSignature(memory_allocations._FieldNames, () => ['eventType', 'libraryName', 'className']);
  dart.defineLazy(memory_allocations._FieldNames, {
    /*memory_allocations._FieldNames.eventType*/get eventType() {
      return "eventType";
    },
    /*memory_allocations._FieldNames.libraryName*/get libraryName() {
      return "libraryName";
    },
    /*memory_allocations._FieldNames.className*/get className() {
      return "className";
    }
  }, false);
  var object$ = dart.privateName(memory_allocations, "ObjectEvent.object");
  memory_allocations.ObjectEvent = class ObjectEvent extends core.Object {
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
  };
  (memory_allocations.ObjectEvent.new = function(opts) {
    let object = opts && 'object' in opts ? opts.object : null;
    this[object$] = object;
    ;
  }).prototype = memory_allocations.ObjectEvent.prototype;
  dart.addTypeTests(memory_allocations.ObjectEvent);
  dart.addTypeCaches(memory_allocations.ObjectEvent);
  dart.setLibraryUri(memory_allocations.ObjectEvent, I[0]);
  dart.setFieldSignature(memory_allocations.ObjectEvent, () => ({
    __proto__: dart.getFields(memory_allocations.ObjectEvent.__proto__),
    object: dart.finalFieldType(core.Object)
  }));
  var library$ = dart.privateName(memory_allocations, "ObjectCreated.library");
  var className$ = dart.privateName(memory_allocations, "ObjectCreated.className");
  memory_allocations.ObjectCreated = class ObjectCreated extends memory_allocations.ObjectEvent {
    get library() {
      return this[library$];
    }
    set library(value) {
      super.library = value;
    }
    get className() {
      return this[className$];
    }
    set className(value) {
      super.className = value;
    }
    static ['_#new#tearOff'](opts) {
      let library = opts && 'library' in opts ? opts.library : null;
      let className = opts && 'className' in opts ? opts.className : null;
      let object = opts && 'object' in opts ? opts.object : null;
      return new memory_allocations.ObjectCreated.new({library: library, className: className, object: object});
    }
    toMap() {
      return new (T.LinkedMapOfObject$MapOfString$Object()).from([this.object, new (T.IdentityMapOfString$Object()).from(["libraryName", this.library, "className", this.className, "eventType", "created"])]);
    }
  };
  (memory_allocations.ObjectCreated.new = function(opts) {
    let library = opts && 'library' in opts ? opts.library : null;
    let className = opts && 'className' in opts ? opts.className : null;
    let object = opts && 'object' in opts ? opts.object : null;
    this[library$] = library;
    this[className$] = className;
    memory_allocations.ObjectCreated.__proto__.new.call(this, {object: object});
    ;
  }).prototype = memory_allocations.ObjectCreated.prototype;
  dart.addTypeTests(memory_allocations.ObjectCreated);
  dart.addTypeCaches(memory_allocations.ObjectCreated);
  dart.setMethodSignature(memory_allocations.ObjectCreated, () => ({
    __proto__: dart.getMethods(memory_allocations.ObjectCreated.__proto__),
    toMap: dart.fnType(core.Map$(core.Object, core.Map$(core.String, core.Object)), [])
  }));
  dart.setLibraryUri(memory_allocations.ObjectCreated, I[0]);
  dart.setFieldSignature(memory_allocations.ObjectCreated, () => ({
    __proto__: dart.getFields(memory_allocations.ObjectCreated.__proto__),
    library: dart.finalFieldType(core.String),
    className: dart.finalFieldType(core.String)
  }));
  memory_allocations.ObjectDisposed = class ObjectDisposed extends memory_allocations.ObjectEvent {
    static ['_#new#tearOff'](opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      return new memory_allocations.ObjectDisposed.new({object: object});
    }
    toMap() {
      return new (T.LinkedMapOfObject$MapOfString$Object()).from([this.object, new (T.IdentityMapOfString$Object()).from(["eventType", "disposed"])]);
    }
  };
  (memory_allocations.ObjectDisposed.new = function(opts) {
    let object = opts && 'object' in opts ? opts.object : null;
    memory_allocations.ObjectDisposed.__proto__.new.call(this, {object: object});
    ;
  }).prototype = memory_allocations.ObjectDisposed.prototype;
  dart.addTypeTests(memory_allocations.ObjectDisposed);
  dart.addTypeCaches(memory_allocations.ObjectDisposed);
  dart.setMethodSignature(memory_allocations.ObjectDisposed, () => ({
    __proto__: dart.getMethods(memory_allocations.ObjectDisposed.__proto__),
    toMap: dart.fnType(core.Map$(core.Object, core.Map$(core.String, core.Object)), [])
  }));
  dart.setLibraryUri(memory_allocations.ObjectDisposed, I[0]);
  var _listeners = dart.privateName(memory_allocations, "_listeners");
  var _activeDispatchLoops = dart.privateName(memory_allocations, "_activeDispatchLoops");
  var _listenersContainNulls = dart.privateName(memory_allocations, "_listenersContainNulls");
  var _subscribeToSdkObjects = dart.privateName(memory_allocations, "_subscribeToSdkObjects");
  var _checkListenersForEmptiness = dart.privateName(memory_allocations, "_checkListenersForEmptiness");
  var _tryDefragmentListeners = dart.privateName(memory_allocations, "_tryDefragmentListeners");
  var _unSubscribeFromSdkObjects = dart.privateName(memory_allocations, "_unSubscribeFromSdkObjects");
  var _imageOnCreate = dart.privateName(memory_allocations, "_imageOnCreate");
  var _imageOnDispose = dart.privateName(memory_allocations, "_imageOnDispose");
  var _pictureOnCreate = dart.privateName(memory_allocations, "_pictureOnCreate");
  var _pictureOnDispose = dart.privateName(memory_allocations, "_pictureOnDispose");
  memory_allocations.MemoryAllocations = class MemoryAllocations extends core.Object {
    static ['_#_#tearOff']() {
      return new memory_allocations.MemoryAllocations.__();
    }
    addListener(listener) {
      ;
      if (this[_listeners] == null) {
        this[_listeners] = T.JSArrayOfObjectEventToNvoid().of([]);
        this[_subscribeToSdkObjects]();
      }
      dart.nullCheck(this[_listeners])[$add](listener);
    }
    removeListener(listener) {
      ;
      let listeners = this[_listeners];
      if (listeners == null) {
        return;
      }
      if (this[_activeDispatchLoops] > 0) {
        for (let i = 0; i < listeners[$length]; i = i + 1) {
          if (dart.equals(listeners[$_get](i), listener)) {
            listeners[$_set](i, null);
            this[_listenersContainNulls] = true;
          }
        }
      } else {
        listeners[$removeWhere](dart.fn(l => dart.equals(l, listener), T.FnTobool()));
        this[_checkListenersForEmptiness]();
      }
    }
    [_tryDefragmentListeners]() {
      let t0;
      if (this[_activeDispatchLoops] > 0 || !this[_listenersContainNulls]) {
        return;
      }
      t0 = this[_listeners];
      t0 == null ? null : t0[$removeWhere](dart.fn(e => e == null, T.FnTobool()));
      this[_listenersContainNulls] = false;
      this[_checkListenersForEmptiness]();
    }
    [_checkListenersForEmptiness]() {
      let t0, t0$;
      if (dart.test((t0$ = (t0 = this[_listeners], t0 == null ? null : t0[$isEmpty]), t0$ == null ? false : t0$))) {
        this[_listeners] = null;
        this[_unSubscribeFromSdkObjects]();
      }
    }
    get hasListeners() {
      let t0, t0$, t0$0;
      ;
      if (this[_listenersContainNulls]) {
        return (t0 = this[_listeners], t0 == null ? null : t0[$firstWhere](dart.fn(l => l != null, T.FnTobool()))) != null;
      }
      t0$0 = (t0$ = this[_listeners], t0$ == null ? null : t0$[$isNotEmpty]);
      return t0$0 == null ? false : t0$0;
    }
    dispatchObjectEvent(event) {
      let t0;
      ;
      let listeners = this[_listeners];
      if (listeners == null || listeners[$isEmpty]) {
        return;
      }
      this[_activeDispatchLoops] = this[_activeDispatchLoops] + 1;
      let end = listeners[$length];
      for (let i = 0; i < end; i = i + 1) {
        try {
          t0 = listeners[$_get](i);
          t0 == null ? null : t0(event);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (core.Object.is(exception)) {
            let type = event.object[$runtimeType].toString();
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: stack, library: "foundation library", context: new assertions.ErrorDescription.new("MemoryAllocations while " + "dispatching notifications for " + type), informationCollector: dart.fn(() => T.JSArrayOfDiagnosticsNode().of([new (T.DiagnosticsPropertyOfObject()).new("The " + type + " sending notification was", event.object, {style: diagnostics.DiagnosticsTreeStyle.errorProperty})]), T.VoidToListOfDiagnosticsNode())}));
          } else
            throw e;
        }
      }
      this[_activeDispatchLoops] = this[_activeDispatchLoops] - 1;
      this[_tryDefragmentListeners]();
    }
    dispatchObjectCreated(opts) {
      let library = opts && 'library' in opts ? opts.library : null;
      let className = opts && 'className' in opts ? opts.className : null;
      let object = opts && 'object' in opts ? opts.object : null;
      if (!this.hasListeners) {
        return;
      }
      this.dispatchObjectEvent(new memory_allocations.ObjectCreated.new({library: library, className: className, object: object}));
    }
    dispatchObjectDisposed(opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      if (!this.hasListeners) {
        return;
      }
      this.dispatchObjectEvent(new memory_allocations.ObjectDisposed.new({object: object}));
    }
    [_subscribeToSdkObjects]() {
      if (!(ui.Image.onCreate == null)) dart.assertFailed(null, I[1], 290, 12, "ui.Image.onCreate == null");
      if (!(ui.Image.onDispose == null)) dart.assertFailed(null, I[1], 291, 12, "ui.Image.onDispose == null");
      if (!(ui.Picture.onCreate == null)) dart.assertFailed(null, I[1], 292, 12, "ui.Picture.onCreate == null");
      if (!(ui.Picture.onDispose == null)) dart.assertFailed(null, I[1], 293, 12, "ui.Picture.onDispose == null");
      ui.Image.onCreate = dart.bind(this, _imageOnCreate);
      ui.Image.onDispose = dart.bind(this, _imageOnDispose);
      ui.Picture.onCreate = dart.bind(this, _pictureOnCreate);
      ui.Picture.onDispose = dart.bind(this, _pictureOnDispose);
    }
    [_unSubscribeFromSdkObjects]() {
      if (!dart.equals(ui.Image.onCreate, dart.bind(this, _imageOnCreate))) dart.assertFailed(null, I[1], 301, 12, "ui.Image.onCreate == _imageOnCreate");
      if (!dart.equals(ui.Image.onDispose, dart.bind(this, _imageOnDispose))) dart.assertFailed(null, I[1], 302, 12, "ui.Image.onDispose == _imageOnDispose");
      if (!dart.equals(ui.Picture.onCreate, dart.bind(this, _pictureOnCreate))) dart.assertFailed(null, I[1], 303, 12, "ui.Picture.onCreate == _pictureOnCreate");
      if (!dart.equals(ui.Picture.onDispose, dart.bind(this, _pictureOnDispose))) dart.assertFailed(null, I[1], 304, 12, "ui.Picture.onDispose == _pictureOnDispose");
      ui.Image.onCreate = null;
      ui.Image.onDispose = null;
      ui.Picture.onCreate = null;
      ui.Picture.onDispose = null;
    }
    [_imageOnCreate](image) {
      this.dispatchObjectEvent(new memory_allocations.ObjectCreated.new({library: "dart:ui", className: dart.str(dart.wrapType(ui.Image)), object: image}));
    }
    [_pictureOnCreate](picture) {
      this.dispatchObjectEvent(new memory_allocations.ObjectCreated.new({library: "dart:ui", className: dart.str(dart.wrapType(ui.Picture)), object: picture}));
    }
    [_imageOnDispose](image) {
      this.dispatchObjectEvent(new memory_allocations.ObjectDisposed.new({object: image}));
    }
    [_pictureOnDispose](picture) {
      this.dispatchObjectEvent(new memory_allocations.ObjectDisposed.new({object: picture}));
    }
  };
  (memory_allocations.MemoryAllocations.__ = function() {
    this[_listeners] = null;
    this[_activeDispatchLoops] = 0;
    this[_listenersContainNulls] = false;
    ;
  }).prototype = memory_allocations.MemoryAllocations.prototype;
  dart.addTypeTests(memory_allocations.MemoryAllocations);
  dart.addTypeCaches(memory_allocations.MemoryAllocations);
  dart.setMethodSignature(memory_allocations.MemoryAllocations, () => ({
    __proto__: dart.getMethods(memory_allocations.MemoryAllocations.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [memory_allocations.ObjectEvent])]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [memory_allocations.ObjectEvent])]),
    [_tryDefragmentListeners]: dart.fnType(dart.void, []),
    [_checkListenersForEmptiness]: dart.fnType(dart.void, []),
    dispatchObjectEvent: dart.fnType(dart.void, [memory_allocations.ObjectEvent]),
    dispatchObjectCreated: dart.fnType(dart.void, [], {}, {className: core.String, library: core.String, object: core.Object}),
    dispatchObjectDisposed: dart.fnType(dart.void, [], {}, {object: core.Object}),
    [_subscribeToSdkObjects]: dart.fnType(dart.void, []),
    [_unSubscribeFromSdkObjects]: dart.fnType(dart.void, []),
    [_imageOnCreate]: dart.fnType(dart.void, [ui.Image]),
    [_pictureOnCreate]: dart.fnType(dart.void, [ui.Picture]),
    [_imageOnDispose]: dart.fnType(dart.void, [ui.Image]),
    [_pictureOnDispose]: dart.fnType(dart.void, [ui.Picture])
  }));
  dart.setGetterSignature(memory_allocations.MemoryAllocations, () => ({
    __proto__: dart.getGetters(memory_allocations.MemoryAllocations.__proto__),
    hasListeners: core.bool
  }));
  dart.setLibraryUri(memory_allocations.MemoryAllocations, I[0]);
  dart.setFieldSignature(memory_allocations.MemoryAllocations, () => ({
    __proto__: dart.getFields(memory_allocations.MemoryAllocations.__proto__),
    [_listeners]: dart.fieldType(dart.nullable(core.List$(dart.nullable(dart.fnType(dart.void, [memory_allocations.ObjectEvent]))))),
    [_activeDispatchLoops]: dart.fieldType(core.int),
    [_listenersContainNulls]: dart.fieldType(core.bool)
  }));
  dart.setStaticFieldSignature(memory_allocations.MemoryAllocations, () => ['instance']);
  dart.defineLazy(memory_allocations.MemoryAllocations, {
    /*memory_allocations.MemoryAllocations.instance*/get instance() {
      return new memory_allocations.MemoryAllocations.__();
    }
  }, false);
  dart.defineLazy(memory_allocations, {
    /*memory_allocations._kMemoryAllocations*/get _kMemoryAllocations() {
      return false;
    },
    /*memory_allocations.kFlutterMemoryAllocationsEnabled*/get kFlutterMemoryAllocationsEnabled() {
      return true;
    },
    /*memory_allocations._dartUiLibrary*/get _dartUiLibrary() {
      return "dart:ui";
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/foundation/memory_allocations.dart", {
    "package:flutter/src/foundation/memory_allocations.dart": memory_allocations
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["memory_allocations.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/foundation/memory_allocations.dart.lib.js"}');
  // Exports:
  return {
    src__foundation__memory_allocations: memory_allocations
  };
}));

//# sourceMappingURL=memory_allocations.dart.lib.js.map
