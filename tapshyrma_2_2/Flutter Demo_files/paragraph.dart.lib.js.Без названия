// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/rendering/paragraph.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/rendering/box.dart', 'packages/flutter/src/semantics/semantics.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/services/text_editing.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/gestures/hit_test.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/scheduler/binding.dart', 'packages/flutter/src/foundation/key.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/gestures/multitap.dart', 'packages/flutter/src/gestures/long_press.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/selection.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/services/text_boundary.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/services/text_layout_metrics.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/characters/src/extensions.dart', 'packages/flutter/src/foundation/_platform_web.dart', 'packages/flutter/src/services/text_editing_delta.dart', 'packages/flutter/src/foundation/math.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/rendering/viewport_offset.dart'], (function load__packages__flutter__src__rendering__paragraph_dart(dart_sdk, packages__flutter__src__rendering__box$46dart, packages__flutter__src__semantics__semantics$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__services__text_editing$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__gestures__hit_test$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__scheduler__binding$46dart, packages__flutter__src__foundation__key$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__gestures__multitap$46dart, packages__flutter__src__gestures__long_press$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__selection$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__services__text_boundary$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__services__text_layout_metrics$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__characters__src__extensions$46dart, packages__flutter__src__foundation___platform_web$46dart, packages__flutter__src__services__text_editing_delta$46dart, packages__flutter__src__foundation__math$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__rendering__viewport_offset$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box = packages__flutter__src__rendering__box$46dart.src__rendering__box;
  const semantics = packages__flutter__src__semantics__semantics$46dart.src__semantics__semantics;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const placeholder_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__placeholder_span;
  const inline_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__inline_span;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const strut_style = packages__flutter__src__painting__placeholder_span$46dart.src__painting__strut_style;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const text_editing = packages__flutter__src__services__text_editing$46dart.src__services__text_editing;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const debug = packages__flutter__src__rendering__layer$46dart.src__rendering__debug;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const binding = packages__flutter__src__scheduler__binding$46dart.src__scheduler__binding;
  const key$ = packages__flutter__src__foundation__key$46dart.src__foundation__key;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const multitap = packages__flutter__src__gestures__multitap$46dart.src__gestures__multitap;
  const long_press = packages__flutter__src__gestures__long_press$46dart.src__gestures__long_press;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const selection = packages__flutter__src__rendering__selection$46dart.src__rendering__selection;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const text_boundary = packages__flutter__src__services__text_boundary$46dart.src__services__text_boundary;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const text_layout_metrics = packages__flutter__src__services__text_layout_metrics$46dart.src__services__text_layout_metrics;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const extensions = packages__characters__src__extensions$46dart.src__extensions;
  const platform = packages__flutter__src__foundation___platform_web$46dart.src__foundation__platform;
  const text_input = packages__flutter__src__services__text_editing_delta$46dart.src__services__text_input;
  const math$ = packages__flutter__src__foundation__math$46dart.src__foundation__math;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const colors = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  var paragraph$ = Object.create(dart.library);
  var editable = Object.create(dart.library);
  var $join = dartx.join;
  var $add = dartx.add;
  var $forEach = dartx.forEach;
  var $indexOf = dartx.indexOf;
  var $any = dartx.any;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $abs = dartx.abs;
  var $isNotEmpty = dartx.isNotEmpty;
  var $elementAt = dartx.elementAt;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $skip = dartx.skip;
  var $floorToDouble = dartx.floorToDouble;
  var $ceilToDouble = dartx.ceilToDouble;
  var $runtimeType = dartx.runtimeType;
  var $keys = dartx.keys;
  var $remove = dartx.remove;
  var $substring = dartx.substring;
  var $isNaN = dartx.isNaN;
  var $clamp = dartx.clamp;
  var $_equals = dartx._equals;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $times = dartx['*'];
  var $last = dartx.last;
  var $fold = dartx.fold;
  var $codeUnitAt = dartx.codeUnitAt;
  var $isFinite = dartx.isFinite;
  var $round = dartx.round;
  var $iterator = dartx.iterator;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    JSArrayOfTextSelection: () => (T.JSArrayOfTextSelection = dart.constFn(_interceptors.JSArray$(text_editing.TextSelection)))(),
    JSArrayOf_SelectableFragment: () => (T.JSArrayOf_SelectableFragment = dart.constFn(_interceptors.JSArray$(paragraph$._SelectableFragment)))(),
    _SelectableFragmentTovoid: () => (T._SelectableFragmentTovoid = dart.constFn(dart.fnType(dart.void, [paragraph$._SelectableFragment])))(),
    JSArrayOfPlaceholderSpan: () => (T.JSArrayOfPlaceholderSpan = dart.constFn(_interceptors.JSArray$(placeholder_span.PlaceholderSpan)))(),
    InlineSpanTobool: () => (T.InlineSpanTobool = dart.constFn(dart.fnType(core.bool, [inline_span.InlineSpan])))(),
    _SelectableFragmentTobool: () => (T._SelectableFragmentTobool = dart.constFn(dart.fnType(core.bool, [paragraph$._SelectableFragment])))(),
    ListOfPlaceholderDimensions: () => (T.ListOfPlaceholderDimensions = dart.constFn(core.List$(text_painter.PlaceholderDimensions)))(),
    HitTestEntryOfHitTestTarget: () => (T.HitTestEntryOfHitTestTarget = dart.constFn(hit_test.HitTestEntry$(hit_test.HitTestTarget)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    BoxHitTestResultAndOffsetTobool: () => (T.BoxHitTestResultAndOffsetTobool = dart.constFn(dart.fnType(core.bool, [box.BoxHitTestResult, ui.Offset])))(),
    DurationTovoid: () => (T.DurationTovoid = dart.constFn(dart.fnType(dart.void, [core.Duration])))(),
    JSArrayOfPlaceholderDimensions: () => (T.JSArrayOfPlaceholderDimensions = dart.constFn(_interceptors.JSArray$(text_painter.PlaceholderDimensions)))(),
    JSArrayOfColor: () => (T.JSArrayOfColor = dart.constFn(_interceptors.JSArray$(ui.Color)))(),
    PaintingContextAndOffsetTovoid: () => (T.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object.PaintingContext, ui.Offset])))(),
    InlineSpanSemanticsInformationTobool: () => (T.InlineSpanSemanticsInformationTobool = dart.constFn(dart.fnType(core.bool, [inline_span.InlineSpanSemanticsInformation])))(),
    JSArrayOfStringAttribute: () => (T.JSArrayOfStringAttribute = dart.constFn(_interceptors.JSArray$(ui.StringAttribute)))(),
    JSArrayOfSemanticsNode: () => (T.JSArrayOfSemanticsNode = dart.constFn(_interceptors.JSArray$(semantics.SemanticsNode)))(),
    LinkedMapOfKey$SemanticsNode: () => (T.LinkedMapOfKey$SemanticsNode = dart.constFn(_js_helper.LinkedMap$(key$.Key, semantics.SemanticsNode)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    EnumPropertyOfTextAlign: () => (T.EnumPropertyOfTextAlign = dart.constFn(diagnostics.EnumProperty$(ui.TextAlign)))(),
    EnumPropertyOfTextDirection: () => (T.EnumPropertyOfTextDirection = dart.constFn(diagnostics.EnumProperty$(ui.TextDirection)))(),
    EnumPropertyOfTextOverflow: () => (T.EnumPropertyOfTextOverflow = dart.constFn(diagnostics.EnumProperty$(text_painter.TextOverflow)))(),
    DiagnosticsPropertyOfLocale: () => (T.DiagnosticsPropertyOfLocale = dart.constFn(diagnostics.DiagnosticsProperty$(ui.Locale)))(),
    MapEntryOfTextPosition$SelectionResult: () => (T.MapEntryOfTextPosition$SelectionResult = dart.constFn(core.MapEntry$(ui.TextPosition, selection.SelectionResult)))(),
    MapEntryOfOffset$TextPosition: () => (T.MapEntryOfOffset$TextPosition = dart.constFn(core.MapEntry$(ui.Offset, ui.TextPosition)))(),
    IdentityMapOfint$MapEntryOfOffset$TextPosition: () => (T.IdentityMapOfint$MapEntryOfOffset$TextPosition = dart.constFn(_js_helper.IdentityMap$(core.int, T.MapEntryOfOffset$TextPosition())))(),
    ValueNotifierOfbool: () => (T.ValueNotifierOfbool = dart.constFn(change_notifier.ValueNotifier$(core.bool)))(),
    LayerHandleOfClipRectLayer: () => (T.LayerHandleOfClipRectLayer = dart.constFn(layer.LayerHandle$(layer.ClipRectLayer)))(),
    JSArrayOfRenderEditablePainter: () => (T.JSArrayOfRenderEditablePainter = dart.constFn(_interceptors.JSArray$(editable.RenderEditablePainter)))(),
    TextBoxToRect: () => (T.TextBoxToRect = dart.constFn(dart.fnType(ui.Rect, [ui.TextBox])))(),
    JSArrayOfTextBox: () => (T.JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))(),
    JSArrayOfTextSelectionPoint: () => (T.JSArrayOfTextSelectionPoint = dart.constFn(_interceptors.JSArray$(editable.TextSelectionPoint)))(),
    RectN: () => (T.RectN = dart.constFn(dart.nullable(ui.Rect)))(),
    RectNAndTextBoxToRect: () => (T.RectNAndTextBoxToRect = dart.constFn(dart.fnType(ui.Rect, [T.RectN(), ui.TextBox])))(),
    MapEntryOfint$Offset: () => (T.MapEntryOfint$Offset = dart.constFn(core.MapEntry$(core.int, ui.Offset)))(),
    DiagnosticsPropertyOfValueNotifierOfbool: () => (T.DiagnosticsPropertyOfValueNotifierOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(T.ValueNotifierOfbool())))(),
    DiagnosticsPropertyOfbool: () => (T.DiagnosticsPropertyOfbool = dart.constFn(diagnostics.DiagnosticsProperty$(core.bool)))(),
    DiagnosticsPropertyOfTextSelection: () => (T.DiagnosticsPropertyOfTextSelection = dart.constFn(diagnostics.DiagnosticsProperty$(text_editing.TextSelection)))(),
    DiagnosticsPropertyOfViewportOffset: () => (T.DiagnosticsPropertyOfViewportOffset = dart.constFn(diagnostics.DiagnosticsProperty$(viewport_offset.ViewportOffset)))(),
    RenderEditableN: () => (T.RenderEditableN = dart.constFn(dart.nullable(editable.RenderEditable)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_Enum__name]: "start",
        [_Enum_index]: 4
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text_painter.TextOverflow.prototype,
        [_Enum__name]: "clip",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: text_painter.TextWidthBasis.prototype,
        [_Enum__name]: "parent",
        [_Enum_index]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_Enum__name]: "identical",
        [_Enum_index]: 0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_Enum__name]: "metadata",
        [_Enum_index]: 1
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_Enum__name]: "paint",
        [_Enum_index]: 2
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: basic_types.RenderComparison.prototype,
        [_Enum__name]: "layout",
        [_Enum_index]: 3
      });
    },
    get C7() {
      return C[7] = dart.constList([], text_editing.TextSelection);
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_Enum__name]: "baseline",
        [_Enum_index]: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_Enum__name]: "aboveBaseline",
        [_Enum_index]: 1
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_Enum__name]: "belowBaseline",
        [_Enum_index]: 2
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_Enum__name]: "top",
        [_Enum_index]: 3
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_Enum__name]: "middle",
        [_Enum_index]: 5
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_Enum__name]: "bottom",
        [_Enum_index]: 4
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: binding.SchedulerPhase.prototype,
        [_Enum__name]: "idle",
        [_Enum_index]: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: binding.SchedulerPhase.prototype,
        [_Enum__name]: "postFrameCallbacks",
        [_Enum_index]: 4
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: binding.SchedulerPhase.prototype,
        [_Enum__name]: "transientCallbacks",
        [_Enum_index]: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: binding.SchedulerPhase.prototype,
        [_Enum__name]: "midFrameMicrotasks",
        [_Enum_index]: 2
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: binding.SchedulerPhase.prototype,
        [_Enum__name]: "persistentCallbacks",
        [_Enum_index]: 3
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: text_painter.TextOverflow.prototype,
        [_Enum__name]: "visible",
        [_Enum_index]: 3
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: text_painter.TextOverflow.prototype,
        [_Enum__name]: "ellipsis",
        [_Enum_index]: 2
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_Enum__name]: "rtl",
        [_Enum_index]: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_Enum__name]: "ltr",
        [_Enum_index]: 1
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 16777215
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: text_painter.TextOverflow.prototype,
        [_Enum__name]: "fade",
        [_Enum_index]: 1
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_Enum__name]: "tight",
        [_Enum_index]: 0
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_Enum__name]: "tight",
        [_Enum_index]: 0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: selection.SelectionStatus.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 2
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: selection.SelectionGeometry.prototype,
        [SelectionGeometry_hasContent]: true,
        [SelectionGeometry_status]: C[29] || CT.C29,
        [SelectionGeometry_endSelectionPoint]: null,
        [SelectionGeometry_startSelectionPoint]: null
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: selection.SelectionEventType.prototype,
        [_Enum__name]: "startEdgeUpdate",
        [_Enum_index]: 0
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: selection.SelectionEventType.prototype,
        [_Enum__name]: "endEdgeUpdate",
        [_Enum_index]: 1
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: selection.SelectionEventType.prototype,
        [_Enum__name]: "clear",
        [_Enum_index]: 2
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: selection.SelectionEventType.prototype,
        [_Enum__name]: "selectAll",
        [_Enum_index]: 3
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: selection.SelectionEventType.prototype,
        [_Enum__name]: "selectWord",
        [_Enum_index]: 4
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: selection.SelectionEventType.prototype,
        [_Enum__name]: "granularlyExtendSelection",
        [_Enum_index]: 5
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: selection.SelectionEventType.prototype,
        [_Enum__name]: "directionallyExtendSelection",
        [_Enum_index]: 6
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: selection.SelectionExtendDirection.prototype,
        [_Enum__name]: "previousLine",
        [_Enum_index]: 0
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: selection.SelectionExtendDirection.prototype,
        [_Enum__name]: "backward",
        [_Enum_index]: 3
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: selection.SelectionExtendDirection.prototype,
        [_Enum__name]: "nextLine",
        [_Enum_index]: 1
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: selection.SelectionExtendDirection.prototype,
        [_Enum__name]: "forward",
        [_Enum_index]: 2
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: selection.TextGranularity.prototype,
        [_Enum__name]: "character",
        [_Enum_index]: 0
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: selection.TextGranularity.prototype,
        [_Enum__name]: "word",
        [_Enum_index]: 1
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: selection.TextGranularity.prototype,
        [_Enum__name]: "line",
        [_Enum_index]: 2
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: selection.TextGranularity.prototype,
        [_Enum__name]: "document",
        [_Enum_index]: 3
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 5,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 4,
        [EdgeInsets_left]: 4
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: ui.Clip.prototype,
        [_Enum__name]: "hardEdge",
        [_Enum_index]: 1
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_Enum__name]: "horizontal",
        [_Enum_index]: 0
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_Enum__name]: "vertical",
        [_Enum_index]: 1
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_Enum__name]: "upstream",
        [_Enum_index]: 0
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_Enum__name]: "downstream",
        [_Enum_index]: 1
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "iOS",
        [_Enum_index]: 2
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "android",
        [_Enum_index]: 0
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "fuchsia",
        [_Enum_index]: 1
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "macOS",
        [_Enum_index]: 4
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "linux",
        [_Enum_index]: 3
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: platform.TargetPlatform.prototype,
        [_Enum__name]: "windows",
        [_Enum_index]: 5
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: ui.Clip.prototype,
        [_Enum__name]: "none",
        [_Enum_index]: 0
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: ui.Clip.prototype,
        [_Enum__name]: "antiAlias",
        [_Enum_index]: 2
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: ui.Clip.prototype,
        [_Enum__name]: "antiAliasWithSaveLayer",
        [_Enum_index]: 3
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 1,
        [EdgeInsets_right]: 0.5,
        [EdgeInsets_top]: 1,
        [EdgeInsets_left]: 0.5
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: ui.Radius.prototype,
        [Radius_y]: 1,
        [Radius_x]: 1
      });
    }
  }, false);
  var C = Array(63).fill(void 0);
  var I = [
    "package:flutter/src/rendering/paragraph.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/rendering/paragraph.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/rendering/editable.dart",
    "package:flutter/src/rendering/editable.dart"
  ];
  var scale = dart.privateName(paragraph$, "TextParentData.scale");
  paragraph$.TextParentData = class TextParentData extends box.ContainerBoxParentData$(box.RenderBox) {
    get scale() {
      return this[scale];
    }
    set scale(value) {
      this[scale] = value;
    }
    toString() {
      let values = (() => {
        let t0 = T.JSArrayOfString().of(["offset=" + dart.str(this.offset)]);
        if (this.scale != null) t0.push("scale=" + dart.str(this.scale));
        t0.push(super.toString());
        return t0;
      })();
      return values[$join]("; ");
    }
    static ['_#new#tearOff']() {
      return new paragraph$.TextParentData.new();
    }
  };
  (paragraph$.TextParentData.new = function() {
    this[scale] = null;
    paragraph$.TextParentData.__proto__.new.call(this);
    ;
  }).prototype = paragraph$.TextParentData.prototype;
  dart.addTypeTests(paragraph$.TextParentData);
  dart.addTypeCaches(paragraph$.TextParentData);
  dart.setLibraryUri(paragraph$.TextParentData, I[0]);
  dart.setFieldSignature(paragraph$.TextParentData, () => ({
    __proto__: dart.getFields(paragraph$.TextParentData.__proto__),
    scale: dart.fieldType(dart.nullable(core.double))
  }));
  dart.defineExtensionMethods(paragraph$.TextParentData, ['toString']);
  var index$ = dart.privateName(paragraph$, "PlaceholderSpanIndexSemanticsTag.index");
  paragraph$.PlaceholderSpanIndexSemanticsTag = class PlaceholderSpanIndexSemanticsTag extends semantics.SemanticsTag {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    static ['_#new#tearOff'](index) {
      return new paragraph$.PlaceholderSpanIndexSemanticsTag.new(index);
    }
    _equals(other) {
      if (other == null) return false;
      return paragraph$.PlaceholderSpanIndexSemanticsTag.is(other) && other.index === this.index;
    }
    get hashCode() {
      return core.Object.hash(dart.wrapType(paragraph$.PlaceholderSpanIndexSemanticsTag), this.index);
    }
  };
  (paragraph$.PlaceholderSpanIndexSemanticsTag.new = function(index) {
    this[index$] = index;
    paragraph$.PlaceholderSpanIndexSemanticsTag.__proto__.new.call(this, "PlaceholderSpanIndexSemanticsTag(" + dart.str(index) + ")");
    ;
  }).prototype = paragraph$.PlaceholderSpanIndexSemanticsTag.prototype;
  dart.addTypeTests(paragraph$.PlaceholderSpanIndexSemanticsTag);
  dart.addTypeCaches(paragraph$.PlaceholderSpanIndexSemanticsTag);
  dart.setLibraryUri(paragraph$.PlaceholderSpanIndexSemanticsTag, I[0]);
  dart.setFieldSignature(paragraph$.PlaceholderSpanIndexSemanticsTag, () => ({
    __proto__: dart.getFields(paragraph$.PlaceholderSpanIndexSemanticsTag.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(paragraph$.PlaceholderSpanIndexSemanticsTag, ['_equals']);
  dart.defineExtensionAccessors(paragraph$.PlaceholderSpanIndexSemanticsTag, ['hashCode']);
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var _cachedAttributedLabel = dart.privateName(paragraph$, "_cachedAttributedLabel");
  var _cachedCombinedSemanticsInfos = dart.privateName(paragraph$, "_cachedCombinedSemanticsInfos");
  var _lastSelectableFragments = dart.privateName(paragraph$, "_lastSelectableFragments");
  var _registrar = dart.privateName(paragraph$, "_registrar");
  var __RenderParagraph__placeholderSpans = dart.privateName(paragraph$, "_#RenderParagraph#_placeholderSpans");
  var _needsClipping = dart.privateName(paragraph$, "_needsClipping");
  var _overflowShader = dart.privateName(paragraph$, "_overflowShader");
  var _systemFontsChangeScheduled = dart.privateName(paragraph$, "_systemFontsChangeScheduled");
  var _placeholderDimensions = dart.privateName(paragraph$, "_placeholderDimensions");
  var _semanticsInfo = dart.privateName(paragraph$, "_semanticsInfo");
  var _cachedChildNodes = dart.privateName(paragraph$, "_cachedChildNodes");
  var _softWrap = dart.privateName(paragraph$, "_softWrap");
  var _overflow = dart.privateName(paragraph$, "_overflow");
  var _selectionColor = dart.privateName(paragraph$, "_selectionColor");
  var _textPainter = dart.privateName(paragraph$, "_textPainter");
  var _extractPlaceholderSpans = dart.privateName(paragraph$, "_extractPlaceholderSpans");
  var _removeSelectionRegistrarSubscription = dart.privateName(paragraph$, "_removeSelectionRegistrarSubscription");
  var _disposeSelectableFragments = dart.privateName(paragraph$, "_disposeSelectableFragments");
  var _updateSelectionRegistrarSubscription = dart.privateName(paragraph$, "_updateSelectionRegistrarSubscription");
  var _textSelectionStart = dart.privateName(paragraph$, "_textSelectionStart");
  var _textSelectionEnd = dart.privateName(paragraph$, "_textSelectionEnd");
  var _getSelectableFragments = dart.privateName(paragraph$, "_getSelectableFragments");
  var _placeholderSpans = dart.privateName(paragraph$, "_placeholderSpans");
  var _getOffsetForPosition = dart.privateName(paragraph$, "_getOffsetForPosition");
  var _computeLineMetrics = dart.privateName(paragraph$, "_computeLineMetrics");
  var _canComputeIntrinsics = dart.privateName(paragraph$, "_canComputeIntrinsics");
  var _computeChildrenWidthWithMinIntrinsics = dart.privateName(paragraph$, "_computeChildrenWidthWithMinIntrinsics");
  var _layoutText = dart.privateName(paragraph$, "_layoutText");
  var _computeChildrenWidthWithMaxIntrinsics = dart.privateName(paragraph$, "_computeChildrenWidthWithMaxIntrinsics");
  var _computeChildrenHeightWithMinIntrinsics = dart.privateName(paragraph$, "_computeChildrenHeightWithMinIntrinsics");
  var _computeIntrinsicHeight = dart.privateName(paragraph$, "_computeIntrinsicHeight");
  var _layoutTextWithConstraints = dart.privateName(paragraph$, "_layoutTextWithConstraints");
  var _layoutChildren = dart.privateName(paragraph$, "_layoutChildren");
  var _setParentData = dart.privateName(paragraph$, "_setParentData");
  var _canComputeDryLayout = dart.privateName(paragraph$, "_canComputeDryLayout");
  var Color_value = dart.privateName(ui, "Color.value");
  var _getLineAtOffset = dart.privateName(paragraph$, "_getLineAtOffset");
  var _getTextPositionVertical = dart.privateName(paragraph$, "_getTextPositionVertical");
  var _getTextPositionAbove = dart.privateName(paragraph$, "_getTextPositionAbove");
  var _getTextPositionBelow = dart.privateName(paragraph$, "_getTextPositionBelow");
  var _createShowOnScreenFor = dart.privateName(paragraph$, "_createShowOnScreenFor");
  const RenderBox_ContainerRenderObjectMixin$36 = class RenderBox_ContainerRenderObjectMixin extends box.RenderBox {};
  (RenderBox_ContainerRenderObjectMixin$36.new = function() {
    object.ContainerRenderObjectMixin$(box.RenderBox, paragraph$.TextParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36, object.ContainerRenderObjectMixin$(box.RenderBox, paragraph$.TextParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36 = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36 {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, paragraph$.TextParentData));
  const RenderBox_RelayoutWhenSystemFontsChangeMixin$36 = class RenderBox_RelayoutWhenSystemFontsChangeMixin extends RenderBox_RenderBoxContainerDefaultsMixin$36 {};
  (RenderBox_RelayoutWhenSystemFontsChangeMixin$36.new = function() {
    RenderBox_RelayoutWhenSystemFontsChangeMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RelayoutWhenSystemFontsChangeMixin$36.prototype;
  dart.applyMixin(RenderBox_RelayoutWhenSystemFontsChangeMixin$36, object.RelayoutWhenSystemFontsChangeMixin);
  paragraph$.RenderParagraph = class RenderParagraph extends RenderBox_RelayoutWhenSystemFontsChangeMixin$36 {
    static ['_#new#tearOff'](text, opts) {
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[0] || CT.C0;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
      let overflow = opts && 'overflow' in opts ? opts.overflow : C[1] || CT.C1;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[2] || CT.C2;
      let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
      let children = opts && 'children' in opts ? opts.children : null;
      let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
      let registrar = opts && 'registrar' in opts ? opts.registrar : null;
      return new paragraph$.RenderParagraph.new(text, {textAlign: textAlign, textDirection: textDirection, softWrap: softWrap, overflow: overflow, textScaleFactor: textScaleFactor, maxLines: maxLines, locale: locale, strutStyle: strutStyle, textWidthBasis: textWidthBasis, textHeightBehavior: textHeightBehavior, children: children, selectionColor: selectionColor, registrar: registrar});
    }
    setupParentData(child) {
      box.RenderBox.as(child);
      if (!paragraph$.TextParentData.is(child.parentData)) {
        child.parentData = new paragraph$.TextParentData.new();
      }
    }
    get text() {
      return dart.nullCheck(this[_textPainter].text);
    }
    set text(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 136, 12, "value != null");
      switch (dart.nullCheck(this[_textPainter].text).compareTo(value)) {
        case C[3] || CT.C3:
        case C[4] || CT.C4:
          {
            return;
          }
        case C[5] || CT.C5:
          {
            this[_textPainter].text = value;
            this[_cachedAttributedLabel] = null;
            this[_cachedCombinedSemanticsInfos] = null;
            this[_extractPlaceholderSpans](value);
            this.markNeedsPaint();
            this.markNeedsSemanticsUpdate();
            break;
          }
        case C[6] || CT.C6:
          {
            this[_textPainter].text = value;
            this[_overflowShader] = null;
            this[_cachedAttributedLabel] = null;
            this[_cachedCombinedSemanticsInfos] = null;
            this[_extractPlaceholderSpans](value);
            this.markNeedsLayout();
            this[_removeSelectionRegistrarSubscription]();
            this[_disposeSelectableFragments]();
            this[_updateSelectionRegistrarSubscription]();
            break;
          }
      }
    }
    get selections() {
      if (this[_lastSelectableFragments] == null) {
        return C[7] || CT.C7;
      }
      let results = T.JSArrayOfTextSelection().of([]);
      for (let fragment of dart.nullCheck(this[_lastSelectableFragments])) {
        if (fragment[_textSelectionStart] != null && fragment[_textSelectionEnd] != null && dart.nullCheck(fragment[_textSelectionStart]).offset !== dart.nullCheck(fragment[_textSelectionEnd]).offset) {
          results[$add](new text_editing.TextSelection.new({baseOffset: dart.nullCheck(fragment[_textSelectionStart]).offset, extentOffset: dart.nullCheck(fragment[_textSelectionEnd]).offset}));
        }
      }
      return results;
    }
    get registrar() {
      return this[_registrar];
    }
    set registrar(value) {
      if (dart.equals(value, this[_registrar])) {
        return;
      }
      this[_removeSelectionRegistrarSubscription]();
      this[_disposeSelectableFragments]();
      this[_registrar] = value;
      this[_updateSelectionRegistrarSubscription]();
    }
    [_updateSelectionRegistrarSubscription]() {
      if (this[_registrar] == null) {
        return;
      }
      this[_lastSelectableFragments] == null ? this[_lastSelectableFragments] = this[_getSelectableFragments]() : null;
      dart.nullCheck(this[_lastSelectableFragments])[$forEach](dart.bind(dart.nullCheck(this[_registrar]), 'add'));
    }
    [_removeSelectionRegistrarSubscription]() {
      if (this[_registrar] == null || this[_lastSelectableFragments] == null) {
        return;
      }
      dart.nullCheck(this[_lastSelectableFragments])[$forEach](dart.bind(dart.nullCheck(this[_registrar]), 'remove'));
    }
    [_getSelectableFragments]() {
      let plainText = this.text.toPlainText({includeSemanticsLabels: false});
      let result = T.JSArrayOf_SelectableFragment().of([]);
      let start = 0;
      while (start < plainText.length) {
        let end = plainText[$indexOf](paragraph$.RenderParagraph._placeholderCharacter, start);
        if (start !== end) {
          if (end === -1) {
            end = plainText.length;
          }
          result[$add](new paragraph$._SelectableFragment.new({paragraph: this, range: new ui.TextRange.new({start: start, end: end}), fullText: plainText}));
          start = end;
        }
        start = start + 1;
      }
      return result;
    }
    [_disposeSelectableFragments]() {
      if (this[_lastSelectableFragments] == null) {
        return;
      }
      for (let fragment of dart.nullCheck(this[_lastSelectableFragments])) {
        fragment.dispose();
      }
      this[_lastSelectableFragments] = null;
    }
    markNeedsLayout() {
      let t1;
      t1 = this[_lastSelectableFragments];
      t1 == null ? null : t1[$forEach](dart.fn(element => element.didChangeParagraphLayout(), T._SelectableFragmentTovoid()));
      super.markNeedsLayout();
    }
    dispose() {
      this[_removeSelectionRegistrarSubscription]();
      this[_lastSelectableFragments] = null;
      this[_textPainter].dispose();
      super.dispose();
    }
    get [_placeholderSpans]() {
      let t1;
      t1 = this[__RenderParagraph__placeholderSpans];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_placeholderSpans")) : t1;
    }
    set [_placeholderSpans](_placeholderSpans$35param) {
      this[__RenderParagraph__placeholderSpans] = _placeholderSpans$35param;
    }
    [_extractPlaceholderSpans](span) {
      this[_placeholderSpans] = T.JSArrayOfPlaceholderSpan().of([]);
      span.visitChildren(dart.fn(span => {
        if (placeholder_span.PlaceholderSpan.is(span)) {
          this[_placeholderSpans][$add](span);
        }
        return true;
      }, T.InlineSpanTobool()));
    }
    get textAlign() {
      return this[_textPainter].textAlign;
    }
    set textAlign(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 279, 12, "value != null");
      if (this[_textPainter].textAlign === value) {
        return;
      }
      this[_textPainter].textAlign = value;
      this.markNeedsPaint();
    }
    get textDirection() {
      return dart.nullCheck(this[_textPainter].textDirection);
    }
    set textDirection(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 302, 12, "value != null");
      if (this[_textPainter].textDirection === value) {
        return;
      }
      this[_textPainter].textDirection = value;
      this.markNeedsLayout();
    }
    get softWrap() {
      return this[_softWrap];
    }
    set softWrap(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 320, 12, "value != null");
      if (this[_softWrap] === value) {
        return;
      }
      this[_softWrap] = value;
      this.markNeedsLayout();
    }
    get overflow() {
      return this[_overflow];
    }
    set overflow(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 332, 12, "value != null");
      if (this[_overflow] === value) {
        return;
      }
      this[_overflow] = value;
      this[_textPainter].ellipsis = value === text_painter.TextOverflow.ellipsis ? "…" : null;
      this.markNeedsLayout();
    }
    get textScaleFactor() {
      return this[_textPainter].textScaleFactor;
    }
    set textScaleFactor(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 347, 12, "value != null");
      if (this[_textPainter].textScaleFactor === value) {
        return;
      }
      this[_textPainter].textScaleFactor = value;
      this[_overflowShader] = null;
      this.markNeedsLayout();
    }
    get maxLines() {
      return this[_textPainter].maxLines;
    }
    set maxLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, I[1], 363, 12, "value == null || value > 0");
      if (this[_textPainter].maxLines == value) {
        return;
      }
      this[_textPainter].maxLines = value;
      this[_overflowShader] = null;
      this.markNeedsLayout();
    }
    get locale() {
      return this[_textPainter].locale;
    }
    set locale(value) {
      if (dart.equals(this[_textPainter].locale, value)) {
        return;
      }
      this[_textPainter].locale = value;
      this[_overflowShader] = null;
      this.markNeedsLayout();
    }
    get strutStyle() {
      return this[_textPainter].strutStyle;
    }
    set strutStyle(value) {
      if (dart.equals(this[_textPainter].strutStyle, value)) {
        return;
      }
      this[_textPainter].strutStyle = value;
      this[_overflowShader] = null;
      this.markNeedsLayout();
    }
    get textWidthBasis() {
      return this[_textPainter].textWidthBasis;
    }
    set textWidthBasis(value) {
      if (!(value !== null)) dart.assertFailed(null, I[1], 405, 12, "value != null");
      if (this[_textPainter].textWidthBasis === value) {
        return;
      }
      this[_textPainter].textWidthBasis = value;
      this[_overflowShader] = null;
      this.markNeedsLayout();
    }
    get textHeightBehavior() {
      return this[_textPainter].textHeightBehavior;
    }
    set textHeightBehavior(value) {
      if (dart.equals(this[_textPainter].textHeightBehavior, value)) {
        return;
      }
      this[_textPainter].textHeightBehavior = value;
      this[_overflowShader] = null;
      this.markNeedsLayout();
    }
    get selectionColor() {
      return this[_selectionColor];
    }
    set selectionColor(value) {
      let t1, t1$;
      if (dart.equals(this[_selectionColor], value)) {
        return;
      }
      this[_selectionColor] = value;
      if (dart.test((t1$ = (t1 = this[_lastSelectableFragments], t1 == null ? null : t1[$any](dart.fn(fragment => fragment.value.hasSelection, T._SelectableFragmentTobool()))), t1$ == null ? false : t1$))) {
        this.markNeedsPaint();
      }
    }
    [_getOffsetForPosition](position) {
      let t1;
      return this.getOffsetForCaret(position, ui.Rect.zero)['+'](new ui.Offset.new(0.0, (t1 = this.getFullHeightForCaret(position), t1 == null ? 0.0 : t1)));
    }
    [_computeLineMetrics]() {
      return this[_textPainter].computeLineMetrics();
    }
    computeMinIntrinsicWidth(height) {
      if (!this[_canComputeIntrinsics]()) {
        return 0.0;
      }
      this[_computeChildrenWidthWithMinIntrinsics](height);
      this[_layoutText]();
      return this[_textPainter].minIntrinsicWidth;
    }
    computeMaxIntrinsicWidth(height) {
      if (!this[_canComputeIntrinsics]()) {
        return 0.0;
      }
      this[_computeChildrenWidthWithMaxIntrinsics](height);
      this[_layoutText]();
      return this[_textPainter].maxIntrinsicWidth;
    }
    [_computeIntrinsicHeight](width) {
      if (!this[_canComputeIntrinsics]()) {
        return 0.0;
      }
      this[_computeChildrenHeightWithMinIntrinsics](width);
      this[_layoutText]({minWidth: width, maxWidth: width});
      return this[_textPainter].height;
    }
    computeMinIntrinsicHeight(width) {
      return this[_computeIntrinsicHeight](width);
    }
    computeMaxIntrinsicHeight(width) {
      return this[_computeIntrinsicHeight](width);
    }
    computeDistanceToActualBaseline(baseline) {
      if (!!this.debugNeedsLayout) dart.assertFailed(null, I[1], 489, 12, "!debugNeedsLayout");
      if (!(this.constraints !== null)) dart.assertFailed(null, I[1], 490, 12, "constraints != null");
      if (!this.constraints.debugAssertIsValid()) dart.assertFailed(null, I[1], 491, 12, "constraints.debugAssertIsValid()");
      this[_layoutTextWithConstraints](this.constraints);
      return this[_textPainter].computeDistanceToActualBaseline(ui.TextBaseline.alphabetic);
    }
    [_canComputeIntrinsics]() {
      for (let span of this[_placeholderSpans]) {
        switch (span.alignment) {
          case C[8] || CT.C8:
          case C[9] || CT.C9:
          case C[10] || CT.C10:
            {
              {
                if (!object.RenderObject.debugCheckingIntrinsics) dart.assertFailed("Intrinsics are not available for PlaceholderAlignment.baseline, " + "PlaceholderAlignment.aboveBaseline, or PlaceholderAlignment.belowBaseline.", I[1], 512, 13, "RenderObject.debugCheckingIntrinsics");
                return false;
              }
            }
          case C[11] || CT.C11:
          case C[12] || CT.C12:
          case C[13] || CT.C13:
            {
              {
                continue;
              }
            }
        }
      }
      return true;
    }
    [_computeChildrenWidthWithMaxIntrinsics](height) {
      let child = this.firstChild;
      let placeholderDimensions = T.ListOfPlaceholderDimensions().filled(this.childCount, text_painter.PlaceholderDimensions.empty);
      let childIndex = 0;
      while (child != null) {
        placeholderDimensions[$_set](childIndex, new text_painter.PlaceholderDimensions.new({size: new ui.Size.new(child.getMaxIntrinsicWidth(1 / 0), 0.0), alignment: this[_placeholderSpans][$_get](childIndex).alignment, baseline: this[_placeholderSpans][$_get](childIndex).baseline}));
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      this[_textPainter].setPlaceholderDimensions(placeholderDimensions);
    }
    [_computeChildrenWidthWithMinIntrinsics](height) {
      let child = this.firstChild;
      let placeholderDimensions = T.ListOfPlaceholderDimensions().filled(this.childCount, text_painter.PlaceholderDimensions.empty);
      let childIndex = 0;
      while (child != null) {
        placeholderDimensions[$_set](childIndex, new text_painter.PlaceholderDimensions.new({size: new ui.Size.new(child.getMinIntrinsicWidth(1 / 0), 0.0), alignment: this[_placeholderSpans][$_get](childIndex).alignment, baseline: this[_placeholderSpans][$_get](childIndex).baseline}));
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      this[_textPainter].setPlaceholderDimensions(placeholderDimensions);
    }
    [_computeChildrenHeightWithMinIntrinsics](width) {
      let child = this.firstChild;
      let placeholderDimensions = T.ListOfPlaceholderDimensions().filled(this.childCount, text_painter.PlaceholderDimensions.empty);
      let childIndex = 0;
      width = width / this.textScaleFactor;
      while (child != null) {
        let size = child.getDryLayout(new box.BoxConstraints.new({maxWidth: width}));
        placeholderDimensions[$_set](childIndex, new text_painter.PlaceholderDimensions.new({size: size, alignment: this[_placeholderSpans][$_get](childIndex).alignment, baseline: this[_placeholderSpans][$_get](childIndex).baseline}));
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      this[_textPainter].setPlaceholderDimensions(placeholderDimensions);
    }
    hitTestSelf(position) {
      return true;
    }
    hitTestChildren(result, opts) {
      let t1;
      let position = opts && 'position' in opts ? opts.position : null;
      let hitText = false;
      let textPosition = this[_textPainter].getPositionForOffset(position);
      let span = dart.nullCheck(this[_textPainter].text).getSpanForPosition(textPosition);
      if (span != null && hit_test.HitTestTarget.is(span)) {
        result.add(new (T.HitTestEntryOfHitTestTarget()).new(hit_test.HitTestTarget.as(span)));
        hitText = true;
      }
      let child = this.firstChild;
      let childIndex = 0;
      while (child != null && childIndex < dart.nullCheck(this[_textPainter].inlinePlaceholderBoxes)[$length]) {
        let textParentData = paragraph$.TextParentData.as(dart.nullCheck(child.parentData));
        let transform = (t1 = vector_math_64.Matrix4.translationValues(textParentData.offset.dx, textParentData.offset.dy, 0.0), (() => {
          t1.scale(textParentData.scale, textParentData.scale, textParentData.scale);
          return t1;
        })());
        let isHit = result.addWithPaintTransform({transform: transform, position: position, hitTest: dart.fn((result, transformed) => {
            if (!dart.fn(() => {
              let manualPosition = position['-'](textParentData.offset)['/'](dart.nullCheck(textParentData.scale));
              return (transformed.dx - manualPosition.dx)[$abs]() < 1e-10 && (transformed.dy - manualPosition.dy)[$abs]() < 1e-10;
            }, T.VoidTobool())()) dart.assertFailed(null, I[1], 616, 18, "() {\r\n            final Offset manualPosition = (position - textParentData.offset) / textParentData.scale!;\r\n            return (transformed.dx - manualPosition.dx).abs() < precisionErrorTolerance\r\n              && (transformed.dy - manualPosition.dy).abs() < precisionErrorTolerance;\r\n          }()");
            return dart.nullCheck(child).hitTest(result, {position: transformed});
          }, T.BoxHitTestResultAndOffsetTobool())});
        if (isHit) {
          return true;
        }
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      return hitText;
    }
    get debugHasOverflowShader() {
      return this[_overflowShader] != null;
    }
    [_layoutText](opts) {
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      let widthMatters = this.softWrap || this.overflow === text_painter.TextOverflow.ellipsis;
      this[_textPainter].layout({minWidth: minWidth, maxWidth: widthMatters ? maxWidth : 1 / 0});
    }
    systemFontsDidChange() {
      let phase = binding.SchedulerBinding.instance.schedulerPhase;
      switch (phase) {
        case C[14] || CT.C14:
        case C[15] || CT.C15:
          {
            if (this[_systemFontsChangeScheduled]) {
              return;
            }
            this[_systemFontsChangeScheduled] = true;
            binding.SchedulerBinding.instance.scheduleFrameCallback(dart.fn(timeStamp => {
              let t1;
              if (!this[_systemFontsChangeScheduled]) dart.assertFailed(null, I[1], 665, 18, "_systemFontsChangeScheduled");
              this[_systemFontsChangeScheduled] = false;
              if (!(this.attached || dart.test((t1 = this.debugDisposed, t1 == null ? true : t1)))) dart.assertFailed(dart.str(this) + " is detached during " + dart.str(phase) + " but not disposed.", I[1], 668, 13, "attached || (debugDisposed ?? true)");
              if (this.attached) {
                super.systemFontsDidChange();
                this[_textPainter].markNeedsLayout();
              }
            }, T.DurationTovoid()));
            break;
          }
        case C[16] || CT.C16:
        case C[17] || CT.C17:
        case C[18] || CT.C18:
          {
            super.systemFontsDidChange();
            this[_textPainter].markNeedsLayout();
            break;
          }
      }
    }
    [_layoutTextWithConstraints](constraints) {
      this[_textPainter].setPlaceholderDimensions(this[_placeholderDimensions]);
      this[_layoutText]({minWidth: constraints.minWidth, maxWidth: constraints.maxWidth});
    }
    [_layoutChildren](constraints, opts) {
      let dry = opts && 'dry' in opts ? opts.dry : false;
      if (this.childCount === 0) {
        return T.JSArrayOfPlaceholderDimensions().of([]);
      }
      let child = this.firstChild;
      let placeholderDimensions = T.ListOfPlaceholderDimensions().filled(this.childCount, text_painter.PlaceholderDimensions.empty);
      let childIndex = 0;
      let boxConstraints = new box.BoxConstraints.new({maxWidth: constraints.maxWidth});
      boxConstraints = boxConstraints['/'](this.textScaleFactor);
      while (child != null) {
        let baselineOffset = null;
        let childSize = null;
        if (!dry) {
          child.layout(boxConstraints, {parentUsesSize: true});
          childSize = child.size;
          switch (this[_placeholderSpans][$_get](childIndex).alignment) {
            case C[8] || CT.C8:
              {
                baselineOffset = child.getDistanceToBaseline(dart.nullCheck(this[_placeholderSpans][$_get](childIndex).baseline));
                break;
              }
            case C[9] || CT.C9:
            case C[10] || CT.C10:
            case C[13] || CT.C13:
            case C[12] || CT.C12:
            case C[11] || CT.C11:
              {
                baselineOffset = null;
                break;
              }
          }
        } else {
          if (!(this[_placeholderSpans][$_get](childIndex).alignment !== ui.PlaceholderAlignment.baseline)) dart.assertFailed(null, I[1], 740, 16, "_placeholderSpans[childIndex].alignment != ui.PlaceholderAlignment.baseline");
          childSize = child.getDryLayout(boxConstraints);
        }
        placeholderDimensions[$_set](childIndex, new text_painter.PlaceholderDimensions.new({size: childSize, alignment: this[_placeholderSpans][$_get](childIndex).alignment, baseline: this[_placeholderSpans][$_get](childIndex).baseline, baselineOffset: baselineOffset}));
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      return placeholderDimensions;
    }
    [_setParentData]() {
      let child = this.firstChild;
      let childIndex = 0;
      while (child != null && childIndex < dart.nullCheck(this[_textPainter].inlinePlaceholderBoxes)[$length]) {
        let textParentData = paragraph$.TextParentData.as(dart.nullCheck(child.parentData));
        textParentData.offset = new ui.Offset.new(dart.nullCheck(this[_textPainter].inlinePlaceholderBoxes)[$_get](childIndex).left, dart.nullCheck(this[_textPainter].inlinePlaceholderBoxes)[$_get](childIndex).top);
        textParentData.scale = dart.nullCheck(this[_textPainter].inlinePlaceholderScales)[$_get](childIndex);
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
    }
    [_canComputeDryLayout]() {
      for (let span of this[_placeholderSpans]) {
        switch (span.alignment) {
          case C[8] || CT.C8:
          case C[9] || CT.C9:
          case C[10] || CT.C10:
            {
              return false;
            }
          case C[11] || CT.C11:
          case C[12] || CT.C12:
          case C[13] || CT.C13:
            {
              continue;
            }
        }
      }
      return true;
    }
    computeDryLayout(constraints) {
      if (!this[_canComputeDryLayout]()) {
        if (!this.debugCannotComputeDryLayout({reason: "Dry layout not available for alignments that require baseline."})) dart.assertFailed(null, I[1], 794, 14, "debugCannotComputeDryLayout(\r\n        reason: 'Dry layout not available for alignments that require baseline.',\r\n      )");
        return ui.Size.zero;
      }
      this[_textPainter].setPlaceholderDimensions(this[_layoutChildren](constraints, {dry: true}));
      this[_layoutText]({minWidth: constraints.minWidth, maxWidth: constraints.maxWidth});
      return constraints.constrain(this[_textPainter].size);
    }
    performLayout() {
      let t1;
      let constraints = this.constraints;
      this[_placeholderDimensions] = this[_layoutChildren](constraints);
      this[_layoutTextWithConstraints](constraints);
      this[_setParentData]();
      let textSize = this[_textPainter].size;
      let textDidExceedMaxLines = this[_textPainter].didExceedMaxLines;
      this.size = constraints.constrain(textSize);
      let didOverflowHeight = this.size.height < textSize.height || textDidExceedMaxLines;
      let didOverflowWidth = this.size.width < textSize.width;
      let hasVisualOverflow = didOverflowWidth || didOverflowHeight;
      if (hasVisualOverflow) {
        switch (this[_overflow]) {
          case C[19] || CT.C19:
            {
              this[_needsClipping] = false;
              this[_overflowShader] = null;
              break;
            }
          case C[1] || CT.C1:
          case C[20] || CT.C20:
            {
              this[_needsClipping] = true;
              this[_overflowShader] = null;
              break;
            }
          case C[25] || CT.C25:
            {
              if (!(this.textDirection !== null)) dart.assertFailed(null, I[1], 840, 18, "textDirection != null");
              this[_needsClipping] = true;
              let fadeSizePainter = (t1 = new text_painter.TextPainter.new({text: new text_span.TextSpan.new({style: dart.nullCheck(this[_textPainter].text).style, text: "…"}), textDirection: this.textDirection, textScaleFactor: this.textScaleFactor, locale: this.locale}), (() => {
                t1.layout();
                return t1;
              })());
              if (didOverflowWidth) {
                let fadeEnd = null;
                let fadeStart = null;
                switch (this.textDirection) {
                  case C[21] || CT.C21:
                    {
                      fadeEnd = 0.0;
                      fadeStart = fadeSizePainter.width;
                      break;
                    }
                  case C[22] || CT.C22:
                    {
                      fadeEnd = this.size.width;
                      fadeStart = fadeEnd - fadeSizePainter.width;
                      break;
                    }
                }
                this[_overflowShader] = ui.Gradient.linear(new ui.Offset.new(fadeStart, 0.0), new ui.Offset.new(fadeEnd, 0.0), T.JSArrayOfColor().of([C[23] || CT.C23, C[24] || CT.C24]));
              } else {
                let fadeEnd = this.size.height;
                let fadeStart = fadeEnd - fadeSizePainter.height / 2.0;
                this[_overflowShader] = ui.Gradient.linear(new ui.Offset.new(0.0, fadeStart), new ui.Offset.new(0.0, fadeEnd), T.JSArrayOfColor().of([C[23] || CT.C23, C[24] || CT.C24]));
              }
              fadeSizePainter.dispose();
              break;
            }
        }
      } else {
        this[_needsClipping] = false;
        this[_overflowShader] = null;
      }
    }
    paint(context, offset) {
      let t1;
      this[_layoutTextWithConstraints](this.constraints);
      if (!dart.fn(() => {
        let t1;
        if (debug.debugRepaintTextRainbowEnabled) {
          let paint = (t1 = ui.Paint.new(), (() => {
            t1.color = debug.debugCurrentRepaintColor.toColor();
            return t1;
          })());
          context.canvas.drawRect(offset['&'](this.size), paint);
        }
        return true;
      }, T.VoidTobool())()) dart.assertFailed(null, I[1], 897, 12, "() {\r\n      if (debugRepaintTextRainbowEnabled) {\r\n        final Paint paint = Paint()\r\n          ..color = debugCurrentRepaintColor.toColor();\r\n        context.canvas.drawRect(offset & size, paint);\r\n      }\r\n      return true;\r\n    }()");
      if (this[_needsClipping]) {
        let bounds = offset['&'](this.size);
        if (this[_overflowShader] != null) {
          context.canvas.saveLayer(bounds, ui.Paint.new());
        } else {
          context.canvas.save();
        }
        context.canvas.clipRect(bounds);
      }
      this[_textPainter].paint(context.canvas, offset);
      let child = this.firstChild;
      let childIndex = 0;
      while (child != null && childIndex < dart.nullCheck(this[_textPainter].inlinePlaceholderBoxes)[$length]) {
        let textParentData = paragraph$.TextParentData.as(dart.nullCheck(child.parentData));
        let scale = dart.nullCheck(textParentData.scale);
        context.pushTransform(this.needsCompositing, offset['+'](textParentData.offset), vector_math_64.Matrix4.diagonal3Values(scale, scale, scale), dart.fn((context, offset) => {
          context.paintChild(dart.nullCheck(child), offset);
        }, T.PaintingContextAndOffsetTovoid()));
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      if (this[_needsClipping]) {
        if (this[_overflowShader] != null) {
          context.canvas.translate(offset.dx, offset.dy);
          let paint = (t1 = ui.Paint.new(), (() => {
            t1.blendMode = ui.BlendMode.modulate;
            t1.shader = this[_overflowShader];
            return t1;
          })());
          context.canvas.drawRect(ui.Offset.zero['&'](this.size), paint);
        }
        context.canvas.restore();
      }
      if (this[_lastSelectableFragments] != null) {
        for (let fragment of dart.nullCheck(this[_lastSelectableFragments])) {
          fragment.paint(context, offset);
        }
      }
      super.paint(context, offset);
    }
    getOffsetForCaret(position, caretPrototype) {
      if (!!this.debugNeedsLayout) dart.assertFailed(null, I[1], 965, 12, "!debugNeedsLayout");
      this[_layoutTextWithConstraints](this.constraints);
      return this[_textPainter].getOffsetForCaret(position, caretPrototype);
    }
    getFullHeightForCaret(position) {
      if (!!this.debugNeedsLayout) dart.assertFailed(null, I[1], 974, 12, "!debugNeedsLayout");
      this[_layoutTextWithConstraints](this.constraints);
      return this[_textPainter].getFullHeightForCaret(position, ui.Rect.zero);
    }
    getBoxesForSelection(selection, opts) {
      let boxHeightStyle = opts && 'boxHeightStyle' in opts ? opts.boxHeightStyle : C[26] || CT.C26;
      let boxWidthStyle = opts && 'boxWidthStyle' in opts ? opts.boxWidthStyle : C[27] || CT.C27;
      if (!!this.debugNeedsLayout) dart.assertFailed(null, I[1], 1001, 12, "!debugNeedsLayout");
      if (!(boxHeightStyle !== null)) dart.assertFailed(null, I[1], 1002, 12, "boxHeightStyle != null");
      if (!(boxWidthStyle !== null)) dart.assertFailed(null, I[1], 1003, 12, "boxWidthStyle != null");
      this[_layoutTextWithConstraints](this.constraints);
      return this[_textPainter].getBoxesForSelection(selection, {boxHeightStyle: boxHeightStyle, boxWidthStyle: boxWidthStyle});
    }
    getPositionForOffset(offset) {
      if (!!this.debugNeedsLayout) dart.assertFailed(null, I[1], 1016, 12, "!debugNeedsLayout");
      this[_layoutTextWithConstraints](this.constraints);
      return this[_textPainter].getPositionForOffset(offset);
    }
    getWordBoundary(position) {
      if (!!this.debugNeedsLayout) dart.assertFailed(null, I[1], 1031, 12, "!debugNeedsLayout");
      this[_layoutTextWithConstraints](this.constraints);
      return this[_textPainter].getWordBoundary(position);
    }
    [_getLineAtOffset](position) {
      return this[_textPainter].getLineBoundary(position);
    }
    [_getTextPositionAbove](position) {
      let preferredLineHeight = this[_textPainter].preferredLineHeight;
      let verticalOffset = -0.5 * preferredLineHeight;
      return this[_getTextPositionVertical](position, verticalOffset);
    }
    [_getTextPositionBelow](position) {
      let preferredLineHeight = this[_textPainter].preferredLineHeight;
      let verticalOffset = 1.5 * preferredLineHeight;
      return this[_getTextPositionVertical](position, verticalOffset);
    }
    [_getTextPositionVertical](position, verticalOffset) {
      let caretOffset = this[_textPainter].getOffsetForCaret(position, ui.Rect.zero);
      let caretOffsetTranslated = caretOffset.translate(0.0, verticalOffset);
      return this[_textPainter].getPositionForOffset(caretOffsetTranslated);
    }
    get textSize() {
      if (!!this.debugNeedsLayout) dart.assertFailed(null, I[1], 1068, 12, "!debugNeedsLayout");
      return this[_textPainter].size;
    }
    describeSemanticsConfiguration(config) {
      let t1;
      super.describeSemanticsConfiguration(config);
      this[_semanticsInfo] = this.text.getSemanticsInformation();
      if (dart.nullCheck(this[_semanticsInfo])[$any](dart.fn(info => info.recognizer != null, T.InlineSpanSemanticsInformationTobool()))) {
        config.explicitChildNodes = true;
        config.isSemanticBoundary = true;
      } else {
        if (this[_cachedAttributedLabel] == null) {
          let buffer = new core.StringBuffer.new();
          let offset = 0;
          let attributes = T.JSArrayOfStringAttribute().of([]);
          for (let info of dart.nullCheck(this[_semanticsInfo])) {
            let label = (t1 = info.semanticsLabel, t1 == null ? info.text : t1);
            for (let infoAttribute of info.stringAttributes) {
              let originalRange = infoAttribute.range;
              attributes[$add](infoAttribute.copy({range: new ui.TextRange.new({start: offset + originalRange.start, end: offset + originalRange.end})}));
            }
            buffer.write(label);
            offset = offset + label.length;
          }
          this[_cachedAttributedLabel] = new semantics.AttributedString.new(buffer.toString(), {attributes: attributes});
        }
        config.attributedLabel = dart.nullCheck(this[_cachedAttributedLabel]);
        config.textDirection = this.textDirection;
      }
    }
    assembleSemanticsNode(node, config, children) {
      let t2, t2$, t1, t4, t4$, t4$0;
      if (!(this[_semanticsInfo] != null && dart.nullCheck(this[_semanticsInfo])[$isNotEmpty])) dart.assertFailed(null, I[1], 1118, 12, "_semanticsInfo != null && _semanticsInfo!.isNotEmpty");
      let newChildren = T.JSArrayOfSemanticsNode().of([]);
      let currentDirection = this.textDirection;
      let currentRect = null;
      let ordinal = 0.0;
      let start = 0;
      let placeholderIndex = 0;
      let childIndex = 0;
      let child = this.firstChild;
      let newChildCache = new (T.LinkedMapOfKey$SemanticsNode()).new();
      this[_cachedCombinedSemanticsInfos] == null ? this[_cachedCombinedSemanticsInfos] = inline_span.combineSemanticsInfo(dart.nullCheck(this[_semanticsInfo])) : null;
      for (let info of dart.nullCheck(this[_cachedCombinedSemanticsInfos])) {
        let selection = new text_editing.TextSelection.new({baseOffset: start, extentOffset: start + info.text.length});
        start = start + info.text.length;
        if (info.isPlaceholder) {
          while (children[$length] > childIndex && children[$elementAt](childIndex).isTagged(new paragraph$.PlaceholderSpanIndexSemanticsTag.new(placeholderIndex))) {
            let childNode = children[$elementAt](childIndex);
            let parentData = paragraph$.TextParentData.as(dart.nullCheck(dart.nullCheck(child).parentData));
            if (!(parentData.scale != null || parentData.offset._equals(ui.Offset.zero))) dart.assertFailed(null, I[1], 1143, 18, "parentData.scale != null || parentData.offset == Offset.zero");
            if (parentData.scale != null) {
              childNode.rect = new ui.Rect.fromLTWH(childNode.rect.left, childNode.rect.top, childNode.rect.width * dart.nullCheck(parentData.scale), childNode.rect.height * dart.nullCheck(parentData.scale));
              newChildren[$add](childNode);
            }
            childIndex = childIndex + 1;
          }
          child = this.childAfter(dart.nullCheck(child));
          placeholderIndex = placeholderIndex + 1;
        } else {
          let initialDirection = currentDirection;
          let rects = this.getBoxesForSelection(selection);
          if (rects[$isEmpty]) {
            continue;
          }
          let rect = rects[$first].toRect();
          currentDirection = rects[$first].direction;
          for (let textBox of rects[$skip](1)) {
            rect = rect.expandToInclude(textBox.toRect());
            currentDirection = textBox.direction;
          }
          rect = new ui.Rect.fromLTWH(math.max(core.double, 0.0, rect.left), math.max(core.double, 0.0, rect.top), math.min(core.double, rect.width, this.constraints.maxWidth), math.min(core.double, rect.height, this.constraints.maxHeight));
          currentRect = new ui.Rect.fromLTRB(rect.left[$floorToDouble]() - 4.0, rect.top[$floorToDouble]() - 4.0, rect.right[$ceilToDouble]() + 4.0, rect.bottom[$ceilToDouble]() + 4.0);
          let configuration = (t1 = new semantics.SemanticsConfiguration.new(), (() => {
            t1.sortKey = new semantics.OrdinalSortKey.new((t2 = ordinal, ordinal = t2 + 1, t2));
            t1.textDirection = initialDirection;
            t1.attributedLabel = new semantics.AttributedString.new((t2$ = info.semanticsLabel, t2$ == null ? info.text : t2$), {attributes: info.stringAttributes});
            return t1;
          })());
          let recognizer = info.recognizer;
          if (recognizer != null) {
            if (tap.TapGestureRecognizer.is(recognizer)) {
              if (recognizer.onTap != null) {
                configuration.onTap = recognizer.onTap;
                configuration.isLink = true;
              }
            } else if (multitap.DoubleTapGestureRecognizer.is(recognizer)) {
              if (recognizer.onDoubleTap != null) {
                configuration.onTap = recognizer.onDoubleTap;
                configuration.isLink = true;
              }
            } else if (long_press.LongPressGestureRecognizer.is(recognizer)) {
              if (recognizer.onLongPress != null) {
                configuration.onLongPress = recognizer.onLongPress;
              }
            } else {
              if (!false) dart.assertFailed(dart.str(dart.runtimeType(recognizer)) + " is not supported.", I[1], 1207, 20, "false");
            }
          }
          if (node.parentPaintClipRect != null) {
            let paintRect = dart.nullCheck(node.parentPaintClipRect).intersect(currentRect);
            configuration.isHidden = paintRect.isEmpty && !currentRect.isEmpty;
          }
          let newChild = null;
          function newChild$35get() {
            let t2;
            t2 = newChild;
            return t2 == null ? dart.throw(new _internal.LateError.localNI("newChild")) : t2;
          }
          function newChild$35set(newChild$35param) {
            if (newChild == null)
              return newChild = newChild$35param;
            else
              dart.throw(new _internal.LateError.localAI("newChild"));
          }
          if (dart.test((t4$ = (t4 = this[_cachedChildNodes], t4 == null ? null : t4[$isNotEmpty]), t4$ == null ? false : t4$))) {
            newChild$35set(dart.nullCheck(dart.nullCheck(this[_cachedChildNodes])[$remove](dart.nullCheck(this[_cachedChildNodes])[$keys][$first])));
          } else {
            let key = new key$.UniqueKey.new();
            newChild$35set(new semantics.SemanticsNode.new({key: key, showOnScreen: this[_createShowOnScreenFor](key)}));
          }
          t4$0 = newChild$35get();
          (() => {
            t4$0.updateWith({config: configuration});
            t4$0.rect = currentRect;
            return t4$0;
          })();
          newChildCache[$_set](dart.nullCheck(newChild$35get().key), newChild$35get());
          newChildren[$add](newChild$35get());
        }
      }
      if (!(childIndex === children[$length])) dart.assertFailed(null, I[1], 1232, 12, "childIndex == children.length");
      if (!(child == null)) dart.assertFailed(null, I[1], 1233, 12, "child == null");
      this[_cachedChildNodes] = newChildCache;
      node.updateWith({config: config, childrenInInversePaintOrder: newChildren});
    }
    [_createShowOnScreenFor](key) {
      return dart.fn(() => {
        let node = dart.nullCheck(dart.nullCheck(this[_cachedChildNodes])[$_get](key));
        this.showOnScreen({descendant: this, rect: node.rect});
      }, T.VoidTovoid());
    }
    clearSemantics() {
      super.clearSemantics();
      this[_cachedChildNodes] = null;
    }
    debugDescribeChildren() {
      return T.JSArrayOfDiagnosticsNode().of([this.text.toDiagnosticsNode({name: "text", style: diagnostics.DiagnosticsTreeStyle.transition})]);
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new (T.EnumPropertyOfTextAlign()).new("textAlign", this.textAlign));
      properties.add(new (T.EnumPropertyOfTextDirection()).new("textDirection", this.textDirection));
      properties.add(new diagnostics.FlagProperty.new("softWrap", {value: this.softWrap, ifTrue: "wrapping at box width", ifFalse: "no wrapping except at line break characters", showName: true}));
      properties.add(new (T.EnumPropertyOfTextOverflow()).new("overflow", this.overflow));
      properties.add(new diagnostics.DoubleProperty.new("textScaleFactor", this.textScaleFactor, {defaultValue: 1.0}));
      properties.add(new (T.DiagnosticsPropertyOfLocale()).new("locale", this.locale, {defaultValue: null}));
      properties.add(new diagnostics.IntProperty.new("maxLines", this.maxLines, {ifNull: "unlimited"}));
    }
  };
  (paragraph$.RenderParagraph.new = function(text, opts) {
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[0] || CT.C0;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let softWrap = opts && 'softWrap' in opts ? opts.softWrap : true;
    let overflow = opts && 'overflow' in opts ? opts.overflow : C[1] || CT.C1;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[2] || CT.C2;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    let children = opts && 'children' in opts ? opts.children : null;
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let registrar = opts && 'registrar' in opts ? opts.registrar : null;
    this[_cachedAttributedLabel] = null;
    this[_cachedCombinedSemanticsInfos] = null;
    this[_lastSelectableFragments] = null;
    this[_registrar] = null;
    this[__RenderParagraph__placeholderSpans] = null;
    this[_needsClipping] = false;
    this[_overflowShader] = null;
    this[_systemFontsChangeScheduled] = false;
    this[_placeholderDimensions] = null;
    this[_semanticsInfo] = null;
    this[_cachedChildNodes] = null;
    if (!(text !== null)) dart.assertFailed(null, I[1], 92, 15, "text != null");
    if (!text.debugAssertIsValid()) dart.assertFailed(null, I[1], 93, 15, "text.debugAssertIsValid()");
    if (!(textAlign !== null)) dart.assertFailed(null, I[1], 94, 15, "textAlign != null");
    if (!(textDirection !== null)) dart.assertFailed(null, I[1], 95, 15, "textDirection != null");
    if (!(softWrap !== null)) dart.assertFailed(null, I[1], 96, 15, "softWrap != null");
    if (!(overflow !== null)) dart.assertFailed(null, I[1], 97, 15, "overflow != null");
    if (!(textScaleFactor !== null)) dart.assertFailed(null, I[1], 98, 15, "textScaleFactor != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[1], 99, 15, "maxLines == null || maxLines > 0");
    if (!(textWidthBasis !== null)) dart.assertFailed(null, I[1], 100, 15, "textWidthBasis != null");
    this[_softWrap] = softWrap;
    this[_overflow] = overflow;
    this[_selectionColor] = selectionColor;
    this[_textPainter] = new text_painter.TextPainter.new({text: text, textAlign: textAlign, textDirection: textDirection, textScaleFactor: textScaleFactor, maxLines: maxLines, ellipsis: overflow === text_painter.TextOverflow.ellipsis ? "…" : null, locale: locale, strutStyle: strutStyle, textWidthBasis: textWidthBasis, textHeightBehavior: textHeightBehavior});
    paragraph$.RenderParagraph.__proto__.new.call(this);
    this.addAll(children);
    this[_extractPlaceholderSpans](text);
    this.registrar = registrar;
  }).prototype = paragraph$.RenderParagraph.prototype;
  dart.addTypeTests(paragraph$.RenderParagraph);
  dart.addTypeCaches(paragraph$.RenderParagraph);
  dart.setMethodSignature(paragraph$.RenderParagraph, () => ({
    __proto__: dart.getMethods(paragraph$.RenderParagraph.__proto__),
    [_updateSelectionRegistrarSubscription]: dart.fnType(dart.void, []),
    [_removeSelectionRegistrarSubscription]: dart.fnType(dart.void, []),
    [_getSelectableFragments]: dart.fnType(core.List$(paragraph$._SelectableFragment), []),
    [_disposeSelectableFragments]: dart.fnType(dart.void, []),
    [_extractPlaceholderSpans]: dart.fnType(dart.void, [inline_span.InlineSpan]),
    [_getOffsetForPosition]: dart.fnType(ui.Offset, [ui.TextPosition]),
    [_computeLineMetrics]: dart.fnType(core.List$(ui.LineMetrics), []),
    [_computeIntrinsicHeight]: dart.fnType(core.double, [core.double]),
    computeDistanceToActualBaseline: dart.fnType(core.double, [ui.TextBaseline]),
    [_canComputeIntrinsics]: dart.fnType(core.bool, []),
    [_computeChildrenWidthWithMaxIntrinsics]: dart.fnType(dart.void, [core.double]),
    [_computeChildrenWidthWithMinIntrinsics]: dart.fnType(dart.void, [core.double]),
    [_computeChildrenHeightWithMinIntrinsics]: dart.fnType(dart.void, [core.double]),
    [_layoutText]: dart.fnType(dart.void, [], {maxWidth: core.double, minWidth: core.double}, {}),
    [_layoutTextWithConstraints]: dart.fnType(dart.void, [box.BoxConstraints]),
    [_layoutChildren]: dart.fnType(core.List$(text_painter.PlaceholderDimensions), [box.BoxConstraints], {dry: core.bool}, {}),
    [_setParentData]: dart.fnType(dart.void, []),
    [_canComputeDryLayout]: dart.fnType(core.bool, []),
    getOffsetForCaret: dart.fnType(ui.Offset, [ui.TextPosition, ui.Rect]),
    getFullHeightForCaret: dart.fnType(dart.nullable(core.double), [ui.TextPosition]),
    getBoxesForSelection: dart.fnType(core.List$(ui.TextBox), [text_editing.TextSelection], {boxHeightStyle: ui.BoxHeightStyle, boxWidthStyle: ui.BoxWidthStyle}, {}),
    getPositionForOffset: dart.fnType(ui.TextPosition, [ui.Offset]),
    getWordBoundary: dart.fnType(ui.TextRange, [ui.TextPosition]),
    [_getLineAtOffset]: dart.fnType(ui.TextRange, [ui.TextPosition]),
    [_getTextPositionAbove]: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    [_getTextPositionBelow]: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    [_getTextPositionVertical]: dart.fnType(ui.TextPosition, [ui.TextPosition, core.double]),
    [_createShowOnScreenFor]: dart.fnType(dart.nullable(dart.fnType(dart.void, [])), [key$.Key])
  }));
  dart.setGetterSignature(paragraph$.RenderParagraph, () => ({
    __proto__: dart.getGetters(paragraph$.RenderParagraph.__proto__),
    text: inline_span.InlineSpan,
    selections: core.List$(text_editing.TextSelection),
    registrar: dart.nullable(selection.SelectionRegistrar),
    [_placeholderSpans]: core.List$(placeholder_span.PlaceholderSpan),
    textAlign: ui.TextAlign,
    textDirection: ui.TextDirection,
    softWrap: core.bool,
    overflow: text_painter.TextOverflow,
    textScaleFactor: core.double,
    maxLines: dart.nullable(core.int),
    locale: dart.nullable(ui.Locale),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    textWidthBasis: text_painter.TextWidthBasis,
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    selectionColor: dart.nullable(ui.Color),
    debugHasOverflowShader: core.bool,
    textSize: ui.Size
  }));
  dart.setSetterSignature(paragraph$.RenderParagraph, () => ({
    __proto__: dart.getSetters(paragraph$.RenderParagraph.__proto__),
    text: inline_span.InlineSpan,
    registrar: dart.nullable(selection.SelectionRegistrar),
    [_placeholderSpans]: core.List$(placeholder_span.PlaceholderSpan),
    textAlign: ui.TextAlign,
    textDirection: ui.TextDirection,
    softWrap: core.bool,
    overflow: text_painter.TextOverflow,
    textScaleFactor: core.double,
    maxLines: dart.nullable(core.int),
    locale: dart.nullable(ui.Locale),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    textWidthBasis: text_painter.TextWidthBasis,
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    selectionColor: dart.nullable(ui.Color)
  }));
  dart.setLibraryUri(paragraph$.RenderParagraph, I[0]);
  dart.setFieldSignature(paragraph$.RenderParagraph, () => ({
    __proto__: dart.getFields(paragraph$.RenderParagraph.__proto__),
    [_textPainter]: dart.finalFieldType(text_painter.TextPainter),
    [_cachedAttributedLabel]: dart.fieldType(dart.nullable(semantics.AttributedString)),
    [_cachedCombinedSemanticsInfos]: dart.fieldType(dart.nullable(core.List$(inline_span.InlineSpanSemanticsInformation))),
    [_lastSelectableFragments]: dart.fieldType(dart.nullable(core.List$(paragraph$._SelectableFragment))),
    [_registrar]: dart.fieldType(dart.nullable(selection.SelectionRegistrar)),
    [__RenderParagraph__placeholderSpans]: dart.fieldType(dart.nullable(core.List$(placeholder_span.PlaceholderSpan))),
    [_softWrap]: dart.fieldType(core.bool),
    [_overflow]: dart.fieldType(text_painter.TextOverflow),
    [_selectionColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_needsClipping]: dart.fieldType(core.bool),
    [_overflowShader]: dart.fieldType(dart.nullable(ui.Shader)),
    [_systemFontsChangeScheduled]: dart.fieldType(core.bool),
    [_placeholderDimensions]: dart.fieldType(dart.nullable(core.List$(text_painter.PlaceholderDimensions))),
    [_semanticsInfo]: dart.fieldType(dart.nullable(core.List$(inline_span.InlineSpanSemanticsInformation))),
    [_cachedChildNodes]: dart.fieldType(dart.nullable(collection.LinkedHashMap$(key$.Key, semantics.SemanticsNode)))
  }));
  dart.setStaticFieldSignature(paragraph$.RenderParagraph, () => ['_placeholderCharacter']);
  dart.defineLazy(paragraph$.RenderParagraph, {
    /*paragraph$.RenderParagraph._placeholderCharacter*/get _placeholderCharacter() {
      return core.String.fromCharCode(65532);
    }
  }, false);
  var _startHandleLayerLink = dart.privateName(paragraph$, "_startHandleLayerLink");
  var _endHandleLayerLink = dart.privateName(paragraph$, "_endHandleLayerLink");
  var ___SelectableFragment__selectionGeometry = dart.privateName(paragraph$, "_#_SelectableFragment#_selectionGeometry");
  var _cachedRect = dart.privateName(paragraph$, "_cachedRect");
  var _selectionGeometry = dart.privateName(paragraph$, "_selectionGeometry");
  var _getSelectionGeometry = dart.privateName(paragraph$, "_getSelectionGeometry");
  var _updateSelectionGeometry = dart.privateName(paragraph$, "_updateSelectionGeometry");
  var SelectionGeometry_hasContent = dart.privateName(selection, "SelectionGeometry.hasContent");
  var SelectionGeometry_status = dart.privateName(selection, "SelectionGeometry.status");
  var SelectionGeometry_endSelectionPoint = dart.privateName(selection, "SelectionGeometry.endSelectionPoint");
  var SelectionGeometry_startSelectionPoint = dart.privateName(selection, "SelectionGeometry.startSelectionPoint");
  var _updateSelectionEdge = dart.privateName(paragraph$, "_updateSelectionEdge");
  var _handleClearSelection = dart.privateName(paragraph$, "_handleClearSelection");
  var _handleSelectAll = dart.privateName(paragraph$, "_handleSelectAll");
  var _handleSelectWord = dart.privateName(paragraph$, "_handleSelectWord");
  var _handleGranularlyExtendSelection = dart.privateName(paragraph$, "_handleGranularlyExtendSelection");
  var _handleDirectionallyExtendSelection = dart.privateName(paragraph$, "_handleDirectionallyExtendSelection");
  var _didChangeSelection = dart.privateName(paragraph$, "_didChangeSelection");
  var _setSelectionPosition = dart.privateName(paragraph$, "_setSelectionPosition");
  var _rect = dart.privateName(paragraph$, "_rect");
  var _clampTextPosition = dart.privateName(paragraph$, "_clampTextPosition");
  var _positionIsWithinCurrentSelection = dart.privateName(paragraph$, "_positionIsWithinCurrentSelection");
  var _handleVerticalMovement = dart.privateName(paragraph$, "_handleVerticalMovement");
  var _getNextPosition = dart.privateName(paragraph$, "_getNextPosition");
  const Object_Selectable$36 = class Object_Selectable extends core.Object {};
  (Object_Selectable$36.new = function() {
  }).prototype = Object_Selectable$36.prototype;
  dart.applyMixin(Object_Selectable$36, selection.Selectable);
  const Object_ChangeNotifier$36 = class Object_ChangeNotifier extends Object_Selectable$36 {};
  (Object_ChangeNotifier$36.new = function() {
    change_notifier.ChangeNotifier.new.call(this);
  }).prototype = Object_ChangeNotifier$36.prototype;
  dart.applyMixin(Object_ChangeNotifier$36, change_notifier.ChangeNotifier);
  paragraph$._SelectableFragment = class _SelectableFragment extends Object_ChangeNotifier$36 {
    static ['_#new#tearOff'](opts) {
      let paragraph = opts && 'paragraph' in opts ? opts.paragraph : null;
      let fullText = opts && 'fullText' in opts ? opts.fullText : null;
      let range = opts && 'range' in opts ? opts.range : null;
      return new paragraph$._SelectableFragment.new({paragraph: paragraph, fullText: fullText, range: range});
    }
    get value() {
      return this[_selectionGeometry];
    }
    get [_selectionGeometry]() {
      let t4;
      t4 = this[___SelectableFragment__selectionGeometry];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("_selectionGeometry")) : t4;
    }
    set [_selectionGeometry](_selectionGeometry$35param) {
      this[___SelectableFragment__selectionGeometry] = _selectionGeometry$35param;
    }
    [_updateSelectionGeometry]() {
      let newValue = this[_getSelectionGeometry]();
      if (this[_selectionGeometry]._equals(newValue)) {
        return;
      }
      this[_selectionGeometry] = newValue;
      this.notifyListeners();
    }
    [_getSelectionGeometry]() {
      let t4;
      if (this[_textSelectionStart] == null || this[_textSelectionEnd] == null) {
        return C[28] || CT.C28;
      }
      let selectionStart = dart.nullCheck(this[_textSelectionStart]).offset;
      let selectionEnd = dart.nullCheck(this[_textSelectionEnd]).offset;
      let isReversed = selectionStart > selectionEnd;
      let startOffsetInParagraphCoordinates = this.paragraph[_getOffsetForPosition](new ui.TextPosition.new({offset: selectionStart}));
      let endOffsetInParagraphCoordinates = selectionStart === selectionEnd ? startOffsetInParagraphCoordinates : this.paragraph[_getOffsetForPosition](new ui.TextPosition.new({offset: selectionEnd}));
      let flipHandles = isReversed !== (ui.TextDirection.rtl === this.paragraph.textDirection);
      let paragraphToFragmentTransform = (t4 = this.getTransformToParagraph(), (() => {
        t4.invert();
        return t4;
      })());
      return new selection.SelectionGeometry.new({startSelectionPoint: new selection.SelectionPoint.new({localPosition: matrix_utils.MatrixUtils.transformPoint(paragraphToFragmentTransform, startOffsetInParagraphCoordinates), lineHeight: this.paragraph[_textPainter].preferredLineHeight, handleType: flipHandles ? selection.TextSelectionHandleType.right : selection.TextSelectionHandleType.left}), endSelectionPoint: new selection.SelectionPoint.new({localPosition: matrix_utils.MatrixUtils.transformPoint(paragraphToFragmentTransform, endOffsetInParagraphCoordinates), lineHeight: this.paragraph[_textPainter].preferredLineHeight, handleType: flipHandles ? selection.TextSelectionHandleType.left : selection.TextSelectionHandleType.right}), status: dart.nullCheck(this[_textSelectionStart]).offset === dart.nullCheck(this[_textSelectionEnd]).offset ? selection.SelectionStatus.collapsed : selection.SelectionStatus.uncollapsed, hasContent: true});
    }
    dispatchSelectionEvent(event) {
      let result = null;
      function result$35get() {
        let t5;
        t5 = result;
        return t5 == null ? dart.throw(new _internal.LateError.localNI("result")) : t5;
      }
      function result$35set(result$35param) {
        if (result == null)
          return result = result$35param;
        else
          dart.throw(new _internal.LateError.localAI("result"));
      }
      let existingSelectionStart = this[_textSelectionStart];
      let existingSelectionEnd = this[_textSelectionEnd];
      switch (event.type) {
        case C[30] || CT.C30:
        case C[31] || CT.C31:
          {
            let edgeUpdate = selection.SelectionEdgeUpdateEvent.as(event);
            result$35set(this[_updateSelectionEdge](edgeUpdate.globalPosition, {isEnd: edgeUpdate.type === selection.SelectionEventType.endEdgeUpdate}));
            break;
          }
        case C[32] || CT.C32:
          {
            result$35set(this[_handleClearSelection]());
            break;
          }
        case C[33] || CT.C33:
          {
            result$35set(this[_handleSelectAll]());
            break;
          }
        case C[34] || CT.C34:
          {
            let selectWord = selection.SelectWordSelectionEvent.as(event);
            result$35set(this[_handleSelectWord](selectWord.globalPosition));
            break;
          }
        case C[35] || CT.C35:
          {
            let granularlyExtendSelection = selection.GranularlyExtendSelectionEvent.as(event);
            result$35set(this[_handleGranularlyExtendSelection](granularlyExtendSelection.forward, granularlyExtendSelection.isEnd, granularlyExtendSelection.granularity));
            break;
          }
        case C[36] || CT.C36:
          {
            let directionallyExtendSelection = selection.DirectionallyExtendSelectionEvent.as(event);
            result$35set(this[_handleDirectionallyExtendSelection](directionallyExtendSelection.dx, directionallyExtendSelection.isEnd, directionallyExtendSelection.direction));
            break;
          }
      }
      if (!dart.equals(existingSelectionStart, this[_textSelectionStart]) || !dart.equals(existingSelectionEnd, this[_textSelectionEnd])) {
        this[_didChangeSelection]();
      }
      return result$35get();
    }
    getSelectedContent() {
      if (this[_textSelectionStart] == null || this[_textSelectionEnd] == null) {
        return null;
      }
      let start = math.min(core.int, dart.nullCheck(this[_textSelectionStart]).offset, dart.nullCheck(this[_textSelectionEnd]).offset);
      let end = math.max(core.int, dart.nullCheck(this[_textSelectionStart]).offset, dart.nullCheck(this[_textSelectionEnd]).offset);
      return new selection.SelectedContent.new({plainText: this.fullText[$substring](start, end)});
    }
    [_didChangeSelection]() {
      this.paragraph.markNeedsPaint();
      this[_updateSelectionGeometry]();
    }
    [_updateSelectionEdge](globalPosition, opts) {
      let isEnd = opts && 'isEnd' in opts ? opts.isEnd : null;
      this[_setSelectionPosition](null, {isEnd: isEnd});
      let transform = this.paragraph.getTransformTo(null);
      transform.invert();
      let localPosition = matrix_utils.MatrixUtils.transformPoint(transform, globalPosition);
      if (this[_rect].isEmpty) {
        return selection.SelectionUtils.getResultBasedOnRect(this[_rect], localPosition);
      }
      let adjustedOffset = selection.SelectionUtils.adjustDragOffset(this[_rect], localPosition, {direction: this.paragraph.textDirection});
      let position = this[_clampTextPosition](this.paragraph.getPositionForOffset(adjustedOffset));
      this[_setSelectionPosition](position, {isEnd: isEnd});
      if (position.offset === this.range.end) {
        return selection.SelectionResult.next;
      }
      if (position.offset === this.range.start) {
        return selection.SelectionResult.previous;
      }
      return selection.SelectionUtils.getResultBasedOnRect(this[_rect], localPosition);
    }
    [_clampTextPosition](position) {
      if (position.offset > this.range.end || position.offset === this.range.end && position.affinity === ui.TextAffinity.downstream) {
        return new ui.TextPosition.new({offset: this.range.end, affinity: ui.TextAffinity.upstream});
      }
      if (position.offset < this.range.start) {
        return new ui.TextPosition.new({offset: this.range.start});
      }
      return position;
    }
    [_setSelectionPosition](position, opts) {
      let isEnd = opts && 'isEnd' in opts ? opts.isEnd : null;
      if (isEnd) {
        this[_textSelectionEnd] = position;
      } else {
        this[_textSelectionStart] = position;
      }
    }
    [_handleClearSelection]() {
      this[_textSelectionStart] = null;
      this[_textSelectionEnd] = null;
      return selection.SelectionResult.none;
    }
    [_handleSelectAll]() {
      this[_textSelectionStart] = new ui.TextPosition.new({offset: this.range.start});
      this[_textSelectionEnd] = new ui.TextPosition.new({offset: this.range.end, affinity: ui.TextAffinity.upstream});
      return selection.SelectionResult.none;
    }
    [_handleSelectWord](globalPosition) {
      let position = this.paragraph.getPositionForOffset(this.paragraph.globalToLocal(globalPosition));
      if (this[_positionIsWithinCurrentSelection](position)) {
        return selection.SelectionResult.end;
      }
      let word = this.paragraph.getWordBoundary(position);
      if (!word.isNormalized) dart.assertFailed(null, I[1], 1498, 12, "word.isNormalized");
      if (!(word.start >= this.range.start && word.end <= this.range.end)) dart.assertFailed(null, I[1], 1501, 12, "word.start >= range.start && word.end <= range.end");
      let start = null;
      function start$35get() {
        let t8;
        t8 = start;
        return t8 == null ? dart.throw(new _internal.LateError.localNI("start")) : t8;
      }
      function start$35set(start$35param) {
        return start = start$35param;
      }
      let end = null;
      function end$35get() {
        let t11;
        t11 = end;
        return t11 == null ? dart.throw(new _internal.LateError.localNI("end")) : t11;
      }
      function end$35set(end$35param) {
        return end = end$35param;
      }
      if (position.offset >= word.end) {
        start$35set(end$35set(new ui.TextPosition.new({offset: position.offset})));
      } else {
        start$35set(new ui.TextPosition.new({offset: word.start}));
        end$35set(new ui.TextPosition.new({offset: word.end, affinity: ui.TextAffinity.upstream}));
      }
      this[_textSelectionStart] = start$35get();
      this[_textSelectionEnd] = end$35get();
      return selection.SelectionResult.end;
    }
    [_handleDirectionallyExtendSelection](horizontalBaseline, isExtent, movement) {
      let transform = this.paragraph.getTransformTo(null);
      if (transform.invert() === 0.0) {
        switch (movement) {
          case C[37] || CT.C37:
          case C[38] || CT.C38:
            {
              return selection.SelectionResult.previous;
            }
          case C[39] || CT.C39:
          case C[40] || CT.C40:
            {
              return selection.SelectionResult.next;
            }
        }
      }
      let baselineInParagraphCoordinates = matrix_utils.MatrixUtils.transformPoint(transform, new ui.Offset.new(horizontalBaseline, 0.0)).dx;
      if (!!baselineInParagraphCoordinates[$isNaN]) dart.assertFailed(null, I[1], 1528, 12, "!baselineInParagraphCoordinates.isNaN");
      let newPosition = null;
      let result = null;
      switch (movement) {
        case C[37] || CT.C37:
        case C[39] || CT.C39:
          {
            if (!(this[_textSelectionEnd] != null && this[_textSelectionStart] != null)) dart.assertFailed(null, I[1], 1534, 16, "_textSelectionEnd != null && _textSelectionStart != null");
            let targetedEdge = isExtent ? dart.nullCheck(this[_textSelectionEnd]) : dart.nullCheck(this[_textSelectionStart]);
            let moveResult = this[_handleVerticalMovement](targetedEdge, {horizontalBaselineInParagraphCoordinates: baselineInParagraphCoordinates, below: movement === selection.SelectionExtendDirection.nextLine});
            newPosition = moveResult.key;
            result = moveResult.value;
            break;
          }
        case C[40] || CT.C40:
        case C[38] || CT.C38:
          {
            this[_textSelectionEnd] == null ? this[_textSelectionEnd] = movement === selection.SelectionExtendDirection.forward ? new ui.TextPosition.new({offset: this.range.start}) : new ui.TextPosition.new({offset: this.range.end, affinity: ui.TextAffinity.upstream}) : null;
            this[_textSelectionStart] == null ? this[_textSelectionStart] = this[_textSelectionEnd] : null;
            let targetedEdge = isExtent ? dart.nullCheck(this[_textSelectionEnd]) : dart.nullCheck(this[_textSelectionStart]);
            let edgeOffsetInParagraphCoordinates = this.paragraph[_getOffsetForPosition](targetedEdge);
            let baselineOffsetInParagraphCoordinates = new ui.Offset.new(baselineInParagraphCoordinates, edgeOffsetInParagraphCoordinates.dy - this.paragraph[_textPainter].preferredLineHeight / 2);
            newPosition = this.paragraph.getPositionForOffset(baselineOffsetInParagraphCoordinates);
            result = selection.SelectionResult.end;
            break;
          }
      }
      if (isExtent) {
        this[_textSelectionEnd] = newPosition;
      } else {
        this[_textSelectionStart] = newPosition;
      }
      return result;
    }
    [_handleGranularlyExtendSelection](forward, isExtent, granularity) {
      this[_textSelectionEnd] == null ? this[_textSelectionEnd] = forward ? new ui.TextPosition.new({offset: this.range.start}) : new ui.TextPosition.new({offset: this.range.end, affinity: ui.TextAffinity.upstream}) : null;
      this[_textSelectionStart] == null ? this[_textSelectionStart] = this[_textSelectionEnd] : null;
      let targetedEdge = isExtent ? dart.nullCheck(this[_textSelectionEnd]) : dart.nullCheck(this[_textSelectionStart]);
      if (forward && targetedEdge.offset === this.range.end) {
        return selection.SelectionResult.next;
      }
      if (!forward && targetedEdge.offset === this.range.start) {
        return selection.SelectionResult.previous;
      }
      let result = null;
      let newPosition = null;
      switch (granularity) {
        case C[41] || CT.C41:
          {
            let text = this.range.textInside(this.fullText);
            newPosition = this[_getNextPosition](new text_boundary.CharacterBoundary.new(text), targetedEdge, forward);
            result = selection.SelectionResult.end;
            break;
          }
        case C[42] || CT.C42:
          {
            let text = this.range.textInside(this.fullText);
            newPosition = this[_getNextPosition](new text_boundary.WhitespaceBoundary.new(text)['+'](new text_boundary.WordBoundary.new(this)), targetedEdge, forward);
            result = selection.SelectionResult.end;
            break;
          }
        case C[43] || CT.C43:
          {
            newPosition = this[_getNextPosition](new text_boundary.LineBreak.new(this), targetedEdge, forward);
            result = selection.SelectionResult.end;
            break;
          }
        case C[44] || CT.C44:
          {
            let text = this.range.textInside(this.fullText);
            newPosition = this[_getNextPosition](new text_boundary.DocumentBoundary.new(text), targetedEdge, forward);
            if (forward && newPosition.offset === this.range.end) {
              result = selection.SelectionResult.next;
            } else if (!forward && newPosition.offset === this.range.start) {
              result = selection.SelectionResult.previous;
            } else {
              result = selection.SelectionResult.end;
            }
            break;
          }
      }
      if (isExtent) {
        this[_textSelectionEnd] = newPosition;
      } else {
        this[_textSelectionStart] = newPosition;
      }
      return result;
    }
    [_getNextPosition](boundary, position, forward) {
      if (forward) {
        return this[_clampTextPosition](text_boundary.PushTextPosition.forward['+'](boundary).getTrailingTextBoundaryAt(position));
      }
      return this[_clampTextPosition](text_boundary.PushTextPosition.backward['+'](boundary).getLeadingTextBoundaryAt(position));
    }
    [_handleVerticalMovement](position, opts) {
      let horizontalBaselineInParagraphCoordinates = opts && 'horizontalBaselineInParagraphCoordinates' in opts ? opts.horizontalBaselineInParagraphCoordinates : null;
      let below = opts && 'below' in opts ? opts.below : null;
      let lines = this.paragraph[_computeLineMetrics]();
      let offset = this.paragraph.getOffsetForCaret(position, ui.Rect.zero);
      let currentLine = lines[$length] - 1;
      for (let lineMetrics of lines) {
        if (lineMetrics.baseline > offset.dy) {
          currentLine = lineMetrics.lineNumber;
          break;
        }
      }
      let newPosition = null;
      if (below && currentLine === lines[$length] - 1) {
        newPosition = new ui.TextPosition.new({offset: this.range.end, affinity: ui.TextAffinity.upstream});
      } else if (!below && currentLine === 0) {
        newPosition = new ui.TextPosition.new({offset: this.range.start});
      } else {
        let newLine = below ? currentLine + 1 : currentLine - 1;
        newPosition = this[_clampTextPosition](this.paragraph.getPositionForOffset(new ui.Offset.new(horizontalBaselineInParagraphCoordinates, lines[$_get](newLine).baseline)));
      }
      let result = null;
      if (newPosition.offset === this.range.start) {
        result = selection.SelectionResult.previous;
      } else if (newPosition.offset === this.range.end) {
        result = selection.SelectionResult.next;
      } else {
        result = selection.SelectionResult.end;
      }
      if (!(result !== selection.SelectionResult.next || below)) dart.assertFailed(null, I[1], 1659, 12, "result != SelectionResult.next || below");
      if (!(result !== selection.SelectionResult.previous || !below)) dart.assertFailed(null, I[1], 1660, 12, "result != SelectionResult.previous || !below");
      return new (T.MapEntryOfTextPosition$SelectionResult()).__(newPosition, result);
    }
    [_positionIsWithinCurrentSelection](position) {
      if (this[_textSelectionStart] == null || this[_textSelectionEnd] == null) {
        return false;
      }
      let currentStart = null;
      function currentStart$35get() {
        let t14;
        t14 = currentStart;
        return t14 == null ? dart.throw(new _internal.LateError.localNI("currentStart")) : t14;
      }
      function currentStart$35set(currentStart$35param) {
        return currentStart = currentStart$35param;
      }
      let currentEnd = null;
      function currentEnd$35get() {
        let t17;
        t17 = currentEnd;
        return t17 == null ? dart.throw(new _internal.LateError.localNI("currentEnd")) : t17;
      }
      function currentEnd$35set(currentEnd$35param) {
        return currentEnd = currentEnd$35param;
      }
      if (paragraph$._SelectableFragment._compareTextPositions(dart.nullCheck(this[_textSelectionStart]), dart.nullCheck(this[_textSelectionEnd])) > 0) {
        currentStart$35set(dart.nullCheck(this[_textSelectionStart]));
        currentEnd$35set(dart.nullCheck(this[_textSelectionEnd]));
      } else {
        currentStart$35set(dart.nullCheck(this[_textSelectionEnd]));
        currentEnd$35set(dart.nullCheck(this[_textSelectionStart]));
      }
      return paragraph$._SelectableFragment._compareTextPositions(currentStart$35get(), position) >= 0 && paragraph$._SelectableFragment._compareTextPositions(currentEnd$35get(), position) <= 0;
    }
    static _compareTextPositions(position, otherPosition) {
      if (position.offset < otherPosition.offset) {
        return 1;
      } else if (position.offset > otherPosition.offset) {
        return -1;
      } else if (position.affinity === otherPosition.affinity) {
        return 0;
      } else {
        return position.affinity === ui.TextAffinity.upstream ? 1 : -1;
      }
    }
    getTransformToParagraph() {
      return vector_math_64.Matrix4.translationValues(this[_rect].left, this[_rect].top, 0.0);
    }
    getTransformTo(ancestor) {
      let t19;
      t19 = this.getTransformToParagraph();
      return (() => {
        t19.multiply(this.paragraph.getTransformTo(ancestor));
        return t19;
      })();
    }
    pushHandleLayers(startHandle, endHandle) {
      if (!this.paragraph.attached) {
        if (!(startHandle == null && endHandle == null)) dart.assertFailed("Only clean up can be called.", I[1], 1713, 14, "startHandle == null && endHandle == null");
        return;
      }
      if (!dart.equals(this[_startHandleLayerLink], startHandle)) {
        this[_startHandleLayerLink] = startHandle;
        this.paragraph.markNeedsPaint();
      }
      if (!dart.equals(this[_endHandleLayerLink], endHandle)) {
        this[_endHandleLayerLink] = endHandle;
        this.paragraph.markNeedsPaint();
      }
    }
    get [_rect]() {
      if (this[_cachedRect] == null) {
        let boxes = this.paragraph.getBoxesForSelection(new text_editing.TextSelection.new({baseOffset: this.range.start, extentOffset: this.range.end}));
        if (boxes[$isNotEmpty]) {
          let result = boxes[$first].toRect();
          for (let index = 1; index < boxes[$length]; index = index + 1) {
            result = result.expandToInclude(boxes[$_get](index).toRect());
          }
          this[_cachedRect] = result;
        } else {
          let offset = this.paragraph[_getOffsetForPosition](new ui.TextPosition.new({offset: this.range.start}));
          this[_cachedRect] = new ui.Rect.fromPoints(offset, offset.translate(0.0, -this.paragraph[_textPainter].preferredLineHeight));
        }
      }
      return dart.nullCheck(this[_cachedRect]);
    }
    didChangeParagraphLayout() {
      this[_cachedRect] = null;
    }
    get size() {
      return this[_rect].size;
    }
    paint(context, offset) {
      let t19;
      if (this[_textSelectionStart] == null || this[_textSelectionEnd] == null) {
        return;
      }
      if (this.paragraph.selectionColor != null) {
        let selection = new text_editing.TextSelection.new({baseOffset: dart.nullCheck(this[_textSelectionStart]).offset, extentOffset: dart.nullCheck(this[_textSelectionEnd]).offset});
        let selectionPaint = (t19 = ui.Paint.new(), (() => {
          t19.style = ui.PaintingStyle.fill;
          t19.color = dart.nullCheck(this.paragraph.selectionColor);
          return t19;
        })());
        for (let textBox of this.paragraph.getBoxesForSelection(selection)) {
          context.canvas.drawRect(textBox.toRect().shift(offset), selectionPaint);
        }
      }
      let transform = this.getTransformToParagraph();
      if (this[_startHandleLayerLink] != null && this.value.startSelectionPoint != null) {
        context.pushLayer(new layer.LeaderLayer.new({link: dart.nullCheck(this[_startHandleLayerLink]), offset: offset['+'](matrix_utils.MatrixUtils.transformPoint(transform, dart.nullCheck(this.value.startSelectionPoint).localPosition))}), dart.fn((context, offset) => {
        }, T.PaintingContextAndOffsetTovoid()), ui.Offset.zero);
      }
      if (this[_endHandleLayerLink] != null && this.value.endSelectionPoint != null) {
        context.pushLayer(new layer.LeaderLayer.new({link: dart.nullCheck(this[_endHandleLayerLink]), offset: offset['+'](matrix_utils.MatrixUtils.transformPoint(transform, dart.nullCheck(this.value.endSelectionPoint).localPosition))}), dart.fn((context, offset) => {
        }, T.PaintingContextAndOffsetTovoid()), ui.Offset.zero);
      }
    }
    getLineAtOffset(position) {
      let line = this.paragraph[_getLineAtOffset](position);
      let start = line.start[$clamp](this.range.start, this.range.end);
      let end = line.end[$clamp](this.range.start, this.range.end);
      return new text_editing.TextSelection.new({baseOffset: start, extentOffset: end});
    }
    getTextPositionAbove(position) {
      return this[_clampTextPosition](this.paragraph[_getTextPositionAbove](position));
    }
    getTextPositionBelow(position) {
      return this[_clampTextPosition](this.paragraph[_getTextPositionBelow](position));
    }
    getWordBoundary(position) {
      return this.paragraph.getWordBoundary(position);
    }
  };
  (paragraph$._SelectableFragment.new = function(opts) {
    let paragraph = opts && 'paragraph' in opts ? opts.paragraph : null;
    let fullText = opts && 'fullText' in opts ? opts.fullText : null;
    let range = opts && 'range' in opts ? opts.range : null;
    this[_textSelectionStart] = null;
    this[_textSelectionEnd] = null;
    this[_startHandleLayerLink] = null;
    this[_endHandleLayerLink] = null;
    this[___SelectableFragment__selectionGeometry] = null;
    this[_cachedRect] = null;
    this.paragraph = paragraph;
    this.fullText = fullText;
    this.range = range;
    if (!(range.isValid && !range.isCollapsed && range.isNormalized)) dart.assertFailed(null, I[1], 1307, 15, "range.isValid && !range.isCollapsed && range.isNormalized");
    paragraph$._SelectableFragment.__proto__.new.call(this);
    this[_selectionGeometry] = this[_getSelectionGeometry]();
  }).prototype = paragraph$._SelectableFragment.prototype;
  dart.addTypeTests(paragraph$._SelectableFragment);
  dart.addTypeCaches(paragraph$._SelectableFragment);
  paragraph$._SelectableFragment[dart.implements] = () => [text_layout_metrics.TextLayoutMetrics];
  dart.setMethodSignature(paragraph$._SelectableFragment, () => ({
    __proto__: dart.getMethods(paragraph$._SelectableFragment.__proto__),
    [_updateSelectionGeometry]: dart.fnType(dart.void, []),
    [_getSelectionGeometry]: dart.fnType(selection.SelectionGeometry, []),
    dispatchSelectionEvent: dart.fnType(selection.SelectionResult, [selection.SelectionEvent]),
    getSelectedContent: dart.fnType(dart.nullable(selection.SelectedContent), []),
    [_didChangeSelection]: dart.fnType(dart.void, []),
    [_updateSelectionEdge]: dart.fnType(selection.SelectionResult, [ui.Offset], {}, {isEnd: core.bool}),
    [_clampTextPosition]: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    [_setSelectionPosition]: dart.fnType(dart.void, [dart.nullable(ui.TextPosition)], {}, {isEnd: core.bool}),
    [_handleClearSelection]: dart.fnType(selection.SelectionResult, []),
    [_handleSelectAll]: dart.fnType(selection.SelectionResult, []),
    [_handleSelectWord]: dart.fnType(selection.SelectionResult, [ui.Offset]),
    [_handleDirectionallyExtendSelection]: dart.fnType(selection.SelectionResult, [core.double, core.bool, selection.SelectionExtendDirection]),
    [_handleGranularlyExtendSelection]: dart.fnType(selection.SelectionResult, [core.bool, core.bool, selection.TextGranularity]),
    [_getNextPosition]: dart.fnType(ui.TextPosition, [text_boundary.TextBoundary, ui.TextPosition, core.bool]),
    [_handleVerticalMovement]: dart.fnType(core.MapEntry$(ui.TextPosition, selection.SelectionResult), [ui.TextPosition], {}, {below: core.bool, horizontalBaselineInParagraphCoordinates: core.double}),
    [_positionIsWithinCurrentSelection]: dart.fnType(core.bool, [ui.TextPosition]),
    getTransformToParagraph: dart.fnType(vector_math_64.Matrix4, []),
    getTransformTo: dart.fnType(vector_math_64.Matrix4, [dart.nullable(object.RenderObject)]),
    pushHandleLayers: dart.fnType(dart.void, [dart.nullable(layer.LayerLink), dart.nullable(layer.LayerLink)]),
    didChangeParagraphLayout: dart.fnType(dart.void, []),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset]),
    getLineAtOffset: dart.fnType(text_editing.TextSelection, [ui.TextPosition]),
    getTextPositionAbove: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTextPositionBelow: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getWordBoundary: dart.fnType(ui.TextRange, [ui.TextPosition])
  }));
  dart.setStaticMethodSignature(paragraph$._SelectableFragment, () => ['_compareTextPositions']);
  dart.setGetterSignature(paragraph$._SelectableFragment, () => ({
    __proto__: dart.getGetters(paragraph$._SelectableFragment.__proto__),
    value: selection.SelectionGeometry,
    [_selectionGeometry]: selection.SelectionGeometry,
    [_rect]: ui.Rect,
    size: ui.Size
  }));
  dart.setSetterSignature(paragraph$._SelectableFragment, () => ({
    __proto__: dart.getSetters(paragraph$._SelectableFragment.__proto__),
    [_selectionGeometry]: selection.SelectionGeometry
  }));
  dart.setLibraryUri(paragraph$._SelectableFragment, I[0]);
  dart.setFieldSignature(paragraph$._SelectableFragment, () => ({
    __proto__: dart.getFields(paragraph$._SelectableFragment.__proto__),
    range: dart.finalFieldType(ui.TextRange),
    paragraph: dart.finalFieldType(paragraph$.RenderParagraph),
    fullText: dart.finalFieldType(core.String),
    [_textSelectionStart]: dart.fieldType(dart.nullable(ui.TextPosition)),
    [_textSelectionEnd]: dart.fieldType(dart.nullable(ui.TextPosition)),
    [_startHandleLayerLink]: dart.fieldType(dart.nullable(layer.LayerLink)),
    [_endHandleLayerLink]: dart.fieldType(dart.nullable(layer.LayerLink)),
    [___SelectableFragment__selectionGeometry]: dart.fieldType(dart.nullable(selection.SelectionGeometry)),
    [_cachedRect]: dart.fieldType(dart.nullable(ui.Rect))
  }));
  dart.defineLazy(paragraph$, {
    /*paragraph$._kEllipsis*/get _kEllipsis() {
      return "…";
    }
  }, false);
  var point$ = dart.privateName(editable, "TextSelectionPoint.point");
  var direction$ = dart.privateName(editable, "TextSelectionPoint.direction");
  editable.TextSelectionPoint = class TextSelectionPoint extends core.Object {
    get point() {
      return this[point$];
    }
    set point(value) {
      super.point = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    static ['_#new#tearOff'](point, direction) {
      return new editable.TextSelectionPoint.new(point, direction);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return editable.TextSelectionPoint.is(other) && other.point._equals(this.point) && other.direction == this.direction;
    }
    toString() {
      switch (this.direction) {
        case C[22] || CT.C22:
          {
            return dart.str(this.point) + "-ltr";
          }
        case C[21] || CT.C21:
          {
            return dart.str(this.point) + "-rtl";
          }
        case null:
          {
            return dart.str(this.point);
          }
      }
    }
    get hashCode() {
      return core.Object.hash(this.point, this.direction);
    }
  };
  (editable.TextSelectionPoint.new = function(point, direction) {
    this[point$] = point;
    this[direction$] = direction;
    if (!(point !== null)) dart.assertFailed(null, I[2], 46, 14, "point != null");
    ;
  }).prototype = editable.TextSelectionPoint.prototype;
  dart.addTypeTests(editable.TextSelectionPoint);
  dart.addTypeCaches(editable.TextSelectionPoint);
  dart.setLibraryUri(editable.TextSelectionPoint, I[3]);
  dart.setFieldSignature(editable.TextSelectionPoint, () => ({
    __proto__: dart.getFields(editable.TextSelectionPoint.__proto__),
    point: dart.finalFieldType(ui.Offset),
    direction: dart.finalFieldType(dart.nullable(ui.TextDirection))
  }));
  dart.defineExtensionMethods(editable.TextSelectionPoint, ['_equals', 'toString']);
  dart.defineExtensionAccessors(editable.TextSelectionPoint, ['hashCode']);
  var _isValid = dart.privateName(editable, "_isValid");
  var _positionCache = dart.privateName(editable, "_positionCache");
  var _editable$ = dart.privateName(editable, "_editable");
  var _lineMetrics$ = dart.privateName(editable, "_lineMetrics");
  var _currentTextPosition$ = dart.privateName(editable, "_currentTextPosition");
  var _currentLine$ = dart.privateName(editable, "_currentLine");
  var _currentOffset$ = dart.privateName(editable, "_currentOffset");
  var _textPainter$ = dart.privateName(editable, "_textPainter");
  var _getTextPositionForLine = dart.privateName(editable, "_getTextPositionForLine");
  editable.VerticalCaretMovementRun = class VerticalCaretMovementRun extends core.Iterator$(ui.TextPosition) {
    static ['_#_#tearOff'](_editable, _lineMetrics, _currentTextPosition, _currentLine, _currentOffset) {
      return new editable.VerticalCaretMovementRun.__(_editable, _lineMetrics, _currentTextPosition, _currentLine, _currentOffset);
    }
    get isValid() {
      if (!this[_isValid]) {
        return false;
      }
      let newLineMetrics = this[_editable$][_textPainter$].computeLineMetrics();
      if (newLineMetrics !== this[_lineMetrics$]) {
        this[_isValid] = false;
      }
      return this[_isValid];
    }
    [_getTextPositionForLine](lineNumber) {
      if (!this.isValid) dart.assertFailed(null, I[2], 175, 12, "isValid");
      if (!(lineNumber >= 0)) dart.assertFailed(null, I[2], 176, 12, "lineNumber >= 0");
      let cachedPosition = this[_positionCache][$_get](lineNumber);
      if (cachedPosition != null) {
        return cachedPosition;
      }
      if (!(lineNumber !== this[_currentLine$])) dart.assertFailed(null, I[2], 181, 12, "lineNumber != _currentLine");
      let newOffset = new ui.Offset.new(this[_currentOffset$].dx, this[_lineMetrics$][$_get](lineNumber).baseline);
      let closestPosition = this[_editable$][_textPainter$].getPositionForOffset(newOffset);
      let position = new (T.MapEntryOfOffset$TextPosition()).__(newOffset, closestPosition);
      this[_positionCache][$_set](lineNumber, position);
      return position;
    }
    get current() {
      if (!this.isValid) dart.assertFailed(null, I[2], 192, 12, "isValid");
      return this[_currentTextPosition$];
    }
    moveNext() {
      if (!this.isValid) dart.assertFailed(null, I[2], 198, 12, "isValid");
      if (this[_currentLine$] + 1 >= this[_lineMetrics$][$length]) {
        return false;
      }
      let position = this[_getTextPositionForLine](this[_currentLine$] + 1);
      this[_currentLine$] = this[_currentLine$] + 1;
      this[_currentOffset$] = position.key;
      this[_currentTextPosition$] = position.value;
      return true;
    }
    movePrevious() {
      if (!this.isValid) dart.assertFailed(null, I[2], 213, 12, "isValid");
      if (this[_currentLine$] <= 0) {
        return false;
      }
      let position = this[_getTextPositionForLine](this[_currentLine$] - 1);
      this[_currentLine$] = this[_currentLine$] - 1;
      this[_currentOffset$] = position.key;
      this[_currentTextPosition$] = position.value;
      return true;
    }
    moveByOffset(offset) {
      let initialOffset = this[_currentOffset$];
      if (offset >= 0.0) {
        while (this[_currentOffset$].dy < initialOffset.dy + offset) {
          if (!this.moveNext()) {
            break;
          }
        }
      } else {
        while (this[_currentOffset$].dy > initialOffset.dy + offset) {
          if (!this.movePrevious()) {
            break;
          }
        }
      }
      return !initialOffset._equals(this[_currentOffset$]);
    }
  };
  (editable.VerticalCaretMovementRun.__ = function(_editable, _lineMetrics, _currentTextPosition, _currentLine, _currentOffset) {
    this[_isValid] = true;
    this[_positionCache] = new (T.IdentityMapOfint$MapEntryOfOffset$TextPosition()).new();
    this[_editable$] = _editable;
    this[_lineMetrics$] = _lineMetrics;
    this[_currentTextPosition$] = _currentTextPosition;
    this[_currentLine$] = _currentLine;
    this[_currentOffset$] = _currentOffset;
    ;
  }).prototype = editable.VerticalCaretMovementRun.prototype;
  dart.addTypeTests(editable.VerticalCaretMovementRun);
  dart.addTypeCaches(editable.VerticalCaretMovementRun);
  dart.setMethodSignature(editable.VerticalCaretMovementRun, () => ({
    __proto__: dart.getMethods(editable.VerticalCaretMovementRun.__proto__),
    [_getTextPositionForLine]: dart.fnType(core.MapEntry$(ui.Offset, ui.TextPosition), [core.int]),
    moveNext: dart.fnType(core.bool, []),
    movePrevious: dart.fnType(core.bool, []),
    moveByOffset: dart.fnType(core.bool, [core.double])
  }));
  dart.setGetterSignature(editable.VerticalCaretMovementRun, () => ({
    __proto__: dart.getGetters(editable.VerticalCaretMovementRun.__proto__),
    isValid: core.bool,
    current: ui.TextPosition
  }));
  dart.setLibraryUri(editable.VerticalCaretMovementRun, I[3]);
  dart.setFieldSignature(editable.VerticalCaretMovementRun, () => ({
    __proto__: dart.getFields(editable.VerticalCaretMovementRun.__proto__),
    [_currentOffset$]: dart.fieldType(ui.Offset),
    [_currentLine$]: dart.fieldType(core.int),
    [_currentTextPosition$]: dart.fieldType(ui.TextPosition),
    [_lineMetrics$]: dart.finalFieldType(core.List$(ui.LineMetrics)),
    [_editable$]: dart.finalFieldType(editable.RenderEditable),
    [_isValid]: dart.fieldType(core.bool),
    [_positionCache]: dart.finalFieldType(core.Map$(core.int, core.MapEntry$(ui.Offset, ui.TextPosition)))
  }));
  var onCaretChanged$ = dart.privateName(editable, "RenderEditable.onCaretChanged");
  var ignorePointer$ = dart.privateName(editable, "RenderEditable.ignorePointer");
  var textSelectionDelegate$ = dart.privateName(editable, "RenderEditable.textSelectionDelegate");
  var floatingCursorAddedMargin$ = dart.privateName(editable, "RenderEditable.floatingCursorAddedMargin");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _foregroundRenderObject = dart.privateName(editable, "_foregroundRenderObject");
  var _backgroundRenderObject = dart.privateName(editable, "_backgroundRenderObject");
  var __RenderEditable__placeholderSpans = dart.privateName(editable, "_#RenderEditable#_placeholderSpans");
  var _foregroundPainter = dart.privateName(editable, "_foregroundPainter");
  var _painter = dart.privateName(editable, "_painter");
  var __RenderEditable__caretPainter = dart.privateName(editable, "_#RenderEditable#_caretPainter");
  var _selectionPainter = dart.privateName(editable, "_selectionPainter");
  var _autocorrectHighlightPainter = dart.privateName(editable, "_autocorrectHighlightPainter");
  var _cachedBuiltInForegroundPainters = dart.privateName(editable, "_cachedBuiltInForegroundPainters");
  var _cachedBuiltInPainters = dart.privateName(editable, "_cachedBuiltInPainters");
  var _textLayoutLastMaxWidth = dart.privateName(editable, "_textLayoutLastMaxWidth");
  var _textLayoutLastMinWidth = dart.privateName(editable, "_textLayoutLastMinWidth");
  var _lastCaretRect = dart.privateName(editable, "_lastCaretRect");
  var _selectionStartInViewport = dart.privateName(editable, "_selectionStartInViewport");
  var _selectionEndInViewport = dart.privateName(editable, "_selectionEndInViewport");
  var _cachedAttributedValue = dart.privateName(editable, "_cachedAttributedValue");
  var _cachedCombinedSemanticsInfos$ = dart.privateName(editable, "_cachedCombinedSemanticsInfos");
  var _hasFocus = dart.privateName(editable, "_hasFocus");
  var _forceLine = dart.privateName(editable, "_forceLine");
  var _readOnly = dart.privateName(editable, "_readOnly");
  var _cursorWidth = dart.privateName(editable, "_cursorWidth");
  var _floatingCursorOn = dart.privateName(editable, "_floatingCursorOn");
  var __RenderEditable__floatingCursorTextPosition = dart.privateName(editable, "_#RenderEditable#_floatingCursorTextPosition");
  var _maxScrollExtent = dart.privateName(editable, "_maxScrollExtent");
  var _clipBehavior = dart.privateName(editable, "_clipBehavior");
  var _semanticsInfo$ = dart.privateName(editable, "_semanticsInfo");
  var _cachedChildNodes$ = dart.privateName(editable, "_cachedChildNodes");
  var _cachedLineBreakCount = dart.privateName(editable, "_cachedLineBreakCount");
  var __RenderEditable__tap = dart.privateName(editable, "_#RenderEditable#_tap");
  var __RenderEditable__longPress = dart.privateName(editable, "_#RenderEditable#_longPress");
  var _lastTapDownPosition = dart.privateName(editable, "_lastTapDownPosition");
  var _lastSecondaryTapDownPosition = dart.privateName(editable, "_lastSecondaryTapDownPosition");
  var _placeholderDimensions$ = dart.privateName(editable, "_placeholderDimensions");
  var __RenderEditable__caretPrototype = dart.privateName(editable, "_#RenderEditable#_caretPrototype");
  var _relativeOrigin = dart.privateName(editable, "_relativeOrigin");
  var _previousOffset = dart.privateName(editable, "_previousOffset");
  var _resetOriginOnLeft = dart.privateName(editable, "_resetOriginOnLeft");
  var _resetOriginOnRight = dart.privateName(editable, "_resetOriginOnRight");
  var _resetOriginOnTop = dart.privateName(editable, "_resetOriginOnTop");
  var _resetOriginOnBottom = dart.privateName(editable, "_resetOriginOnBottom");
  var _resetFloatingCursorAnimationValue = dart.privateName(editable, "_resetFloatingCursorAnimationValue");
  var _clipRectLayer = dart.privateName(editable, "_clipRectLayer");
  var _showCursor = dart.privateName(editable, "_showCursor");
  var _maxLines = dart.privateName(editable, "_maxLines");
  var _minLines = dart.privateName(editable, "_minLines");
  var _expands = dart.privateName(editable, "_expands");
  var _selection = dart.privateName(editable, "_selection");
  var _offset = dart.privateName(editable, "_offset");
  var _cursorHeight = dart.privateName(editable, "_cursorHeight");
  var _paintCursorOnTop = dart.privateName(editable, "_paintCursorOnTop");
  var _enableInteractiveSelection = dart.privateName(editable, "_enableInteractiveSelection");
  var _devicePixelRatio = dart.privateName(editable, "_devicePixelRatio");
  var _startHandleLayerLink$ = dart.privateName(editable, "_startHandleLayerLink");
  var _endHandleLayerLink$ = dart.privateName(editable, "_endHandleLayerLink");
  var _obscuringCharacter = dart.privateName(editable, "_obscuringCharacter");
  var _obscureText = dart.privateName(editable, "_obscureText");
  var _caretPainter = dart.privateName(editable, "_caretPainter");
  var _updateForegroundPainter = dart.privateName(editable, "_updateForegroundPainter");
  var _updatePainter = dart.privateName(editable, "_updatePainter");
  var _extractPlaceholderSpans$ = dart.privateName(editable, "_extractPlaceholderSpans");
  var _builtInForegroundPainters = dart.privateName(editable, "_builtInForegroundPainters");
  var _placeholderSpans$ = dart.privateName(editable, "_placeholderSpans");
  var _builtInPainters = dart.privateName(editable, "_builtInPainters");
  var _onCaretChanged = dart.privateName(editable, "_onCaretChanged");
  var _createBuiltInForegroundPainters = dart.privateName(editable, "_createBuiltInForegroundPainters");
  var _createBuiltInPainters = dart.privateName(editable, "_createBuiltInPainters");
  var _caretPrototype = dart.privateName(editable, "_caretPrototype");
  var _getTextPositionVertical$ = dart.privateName(editable, "_getTextPositionVertical");
  var _updateSelectionExtentsVisibility = dart.privateName(editable, "_updateSelectionExtentsVisibility");
  var _setTextEditingValue = dart.privateName(editable, "_setTextEditingValue");
  var _setSelection = dart.privateName(editable, "_setSelection");
  var _showHideCursor = dart.privateName(editable, "_showHideCursor");
  var _floatingCursorTextPosition = dart.privateName(editable, "_floatingCursorTextPosition");
  var _caretMargin = dart.privateName(editable, "_caretMargin");
  var _computeTextMetricsIfNeeded = dart.privateName(editable, "_computeTextMetricsIfNeeded");
  var _paintOffset = dart.privateName(editable, "_paintOffset");
  var _isMultiline = dart.privateName(editable, "_isMultiline");
  var _handleSetSelection = dart.privateName(editable, "_handleSetSelection");
  var _handleSetText = dart.privateName(editable, "_handleSetText");
  var _handleMoveCursorBackwardByWord = dart.privateName(editable, "_handleMoveCursorBackwardByWord");
  var _handleMoveCursorBackwardByCharacter = dart.privateName(editable, "_handleMoveCursorBackwardByCharacter");
  var _handleMoveCursorForwardByWord = dart.privateName(editable, "_handleMoveCursorForwardByWord");
  var _handleMoveCursorForwardByCharacter = dart.privateName(editable, "_handleMoveCursorForwardByCharacter");
  var _createShowOnScreenFor$ = dart.privateName(editable, "_createShowOnScreenFor");
  var _getNextWord = dart.privateName(editable, "_getNextWord");
  var _getPreviousWord = dart.privateName(editable, "_getPreviousWord");
  var _onlyWhitespace = dart.privateName(editable, "_onlyWhitespace");
  var _tap = dart.privateName(editable, "_tap");
  var _handleTapDown = dart.privateName(editable, "_handleTapDown");
  var _handleTap = dart.privateName(editable, "_handleTap");
  var _longPress = dart.privateName(editable, "_longPress");
  var _handleLongPress = dart.privateName(editable, "_handleLongPress");
  var _viewportAxis = dart.privateName(editable, "_viewportAxis");
  var _viewportExtent = dart.privateName(editable, "_viewportExtent");
  var _getMaxScrollExtent = dart.privateName(editable, "_getMaxScrollExtent");
  var _hasVisualOverflow = dart.privateName(editable, "_hasVisualOverflow");
  var _snapToPhysicalPixel = dart.privateName(editable, "_snapToPhysicalPixel");
  var _layoutText$ = dart.privateName(editable, "_layoutText");
  var _countHardLineBreaks = dart.privateName(editable, "_countHardLineBreaks");
  var _preferredHeight = dart.privateName(editable, "_preferredHeight");
  var _getWordAtOffset = dart.privateName(editable, "_getWordAtOffset");
  var _layoutChildren$ = dart.privateName(editable, "_layoutChildren");
  var _setParentData$ = dart.privateName(editable, "_setParentData");
  var _computeCaretPrototype = dart.privateName(editable, "_computeCaretPrototype");
  var _canComputeDryLayout$ = dart.privateName(editable, "_canComputeDryLayout");
  var _lineNumberFor = dart.privateName(editable, "_lineNumberFor");
  var _paintContents = dart.privateName(editable, "_paintContents");
  var _paintHandleLayers = dart.privateName(editable, "_paintHandleLayers");
  const RenderBox_RelayoutWhenSystemFontsChangeMixin$36$ = class RenderBox_RelayoutWhenSystemFontsChangeMixin extends box.RenderBox {};
  (RenderBox_RelayoutWhenSystemFontsChangeMixin$36$.new = function() {
    RenderBox_RelayoutWhenSystemFontsChangeMixin$36$.__proto__.new.call(this);
  }).prototype = RenderBox_RelayoutWhenSystemFontsChangeMixin$36$.prototype;
  dart.applyMixin(RenderBox_RelayoutWhenSystemFontsChangeMixin$36$, object.RelayoutWhenSystemFontsChangeMixin);
  const RenderBox_ContainerRenderObjectMixin$36$ = class RenderBox_ContainerRenderObjectMixin extends RenderBox_RelayoutWhenSystemFontsChangeMixin$36$ {};
  (RenderBox_ContainerRenderObjectMixin$36$.new = function() {
    object.ContainerRenderObjectMixin$(box.RenderBox, paragraph$.TextParentData)[dart.mixinNew].call(this);
    RenderBox_ContainerRenderObjectMixin$36$.__proto__.new.call(this);
  }).prototype = RenderBox_ContainerRenderObjectMixin$36$.prototype;
  dart.applyMixin(RenderBox_ContainerRenderObjectMixin$36$, object.ContainerRenderObjectMixin$(box.RenderBox, paragraph$.TextParentData));
  const RenderBox_RenderBoxContainerDefaultsMixin$36$ = class RenderBox_RenderBoxContainerDefaultsMixin extends RenderBox_ContainerRenderObjectMixin$36$ {};
  (RenderBox_RenderBoxContainerDefaultsMixin$36$.new = function() {
    RenderBox_RenderBoxContainerDefaultsMixin$36$.__proto__.new.call(this);
  }).prototype = RenderBox_RenderBoxContainerDefaultsMixin$36$.prototype;
  dart.applyMixin(RenderBox_RenderBoxContainerDefaultsMixin$36$, box.RenderBoxContainerDefaultsMixin$(box.RenderBox, paragraph$.TextParentData));
  editable.RenderEditable = class RenderEditable extends RenderBox_RenderBoxContainerDefaultsMixin$36$ {
    get onCaretChanged() {
      return this[onCaretChanged$];
    }
    set onCaretChanged(value) {
      this[onCaretChanged$] = value;
    }
    get ignorePointer() {
      return this[ignorePointer$];
    }
    set ignorePointer(value) {
      this[ignorePointer$] = value;
    }
    get textSelectionDelegate() {
      return this[textSelectionDelegate$];
    }
    set textSelectionDelegate(value) {
      this[textSelectionDelegate$] = value;
    }
    get floatingCursorAddedMargin() {
      return this[floatingCursorAddedMargin$];
    }
    set floatingCursorAddedMargin(value) {
      this[floatingCursorAddedMargin$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let text = opts && 'text' in opts ? opts.text : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[0] || CT.C0;
      let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
      let backgroundCursorColor = opts && 'backgroundCursorColor' in opts ? opts.backgroundCursorColor : null;
      let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
      let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
      let startHandleLayerLink = opts && 'startHandleLayerLink' in opts ? opts.startHandleLayerLink : null;
      let endHandleLayerLink = opts && 'endHandleLayerLink' in opts ? opts.endHandleLayerLink : null;
      let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
      let minLines = opts && 'minLines' in opts ? opts.minLines : null;
      let expands = opts && 'expands' in opts ? opts.expands : false;
      let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
      let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
      let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
      let selection = opts && 'selection' in opts ? opts.selection : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let onCaretChanged = opts && 'onCaretChanged' in opts ? opts.onCaretChanged : null;
      let ignorePointer = opts && 'ignorePointer' in opts ? opts.ignorePointer : false;
      let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
      let forceLine = opts && 'forceLine' in opts ? opts.forceLine : true;
      let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
      let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[2] || CT.C2;
      let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
      let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 1;
      let cursorHeight = opts && 'cursorHeight' in opts ? opts.cursorHeight : null;
      let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
      let paintCursorAboveText = opts && 'paintCursorAboveText' in opts ? opts.paintCursorAboveText : false;
      let cursorOffset = opts && 'cursorOffset' in opts ? opts.cursorOffset : C[45] || CT.C45;
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : 1;
      let selectionHeightStyle = opts && 'selectionHeightStyle' in opts ? opts.selectionHeightStyle : C[26] || CT.C26;
      let selectionWidthStyle = opts && 'selectionWidthStyle' in opts ? opts.selectionWidthStyle : C[27] || CT.C27;
      let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : null;
      let floatingCursorAddedMargin = opts && 'floatingCursorAddedMargin' in opts ? opts.floatingCursorAddedMargin : C[46] || CT.C46;
      let promptRectRange = opts && 'promptRectRange' in opts ? opts.promptRectRange : null;
      let promptRectColor = opts && 'promptRectColor' in opts ? opts.promptRectColor : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[47] || CT.C47;
      let textSelectionDelegate = opts && 'textSelectionDelegate' in opts ? opts.textSelectionDelegate : null;
      let painter = opts && 'painter' in opts ? opts.painter : null;
      let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
      let children = opts && 'children' in opts ? opts.children : null;
      return new editable.RenderEditable.new({text: text, textDirection: textDirection, textAlign: textAlign, cursorColor: cursorColor, backgroundCursorColor: backgroundCursorColor, showCursor: showCursor, hasFocus: hasFocus, startHandleLayerLink: startHandleLayerLink, endHandleLayerLink: endHandleLayerLink, maxLines: maxLines, minLines: minLines, expands: expands, strutStyle: strutStyle, selectionColor: selectionColor, textScaleFactor: textScaleFactor, selection: selection, offset: offset, onCaretChanged: onCaretChanged, ignorePointer: ignorePointer, readOnly: readOnly, forceLine: forceLine, textHeightBehavior: textHeightBehavior, textWidthBasis: textWidthBasis, obscuringCharacter: obscuringCharacter, obscureText: obscureText, locale: locale, cursorWidth: cursorWidth, cursorHeight: cursorHeight, cursorRadius: cursorRadius, paintCursorAboveText: paintCursorAboveText, cursorOffset: cursorOffset, devicePixelRatio: devicePixelRatio, selectionHeightStyle: selectionHeightStyle, selectionWidthStyle: selectionWidthStyle, enableInteractiveSelection: enableInteractiveSelection, floatingCursorAddedMargin: floatingCursorAddedMargin, promptRectRange: promptRectRange, promptRectColor: promptRectColor, clipBehavior: clipBehavior, textSelectionDelegate: textSelectionDelegate, painter: painter, foregroundPainter: foregroundPainter, children: children});
    }
    setupParentData(child) {
      box.RenderBox.as(child);
      if (!paragraph$.TextParentData.is(child.parentData)) {
        child.parentData = new paragraph$.TextParentData.new();
      }
    }
    dispose() {
      let t19, t19$, t19$0, t19$1;
      t19 = this[_foregroundRenderObject];
      t19 == null ? null : t19.dispose();
      this[_foregroundRenderObject] = null;
      t19$ = this[_backgroundRenderObject];
      t19$ == null ? null : t19$.dispose();
      this[_backgroundRenderObject] = null;
      this[_clipRectLayer].layer = null;
      t19$0 = this[_cachedBuiltInForegroundPainters];
      t19$0 == null ? null : t19$0.dispose();
      t19$1 = this[_cachedBuiltInPainters];
      t19$1 == null ? null : t19$1.dispose();
      this[_selectionStartInViewport].dispose();
      this[_selectionEndInViewport].dispose();
      this[_autocorrectHighlightPainter].dispose();
      this[_selectionPainter].dispose();
      this[_caretPainter].dispose();
      this[_textPainter$].dispose();
      super.dispose();
    }
    [_updateForegroundPainter](newPainter) {
      let t19;
      let effectivePainter = newPainter == null ? this[_builtInForegroundPainters] : new editable._CompositeRenderEditablePainter.new({painters: T.JSArrayOfRenderEditablePainter().of([this[_builtInForegroundPainters], newPainter])});
      if (this[_foregroundRenderObject] == null) {
        let foregroundRenderObject = new editable._RenderEditableCustomPaint.new({painter: effectivePainter});
        this.adoptChild(foregroundRenderObject);
        this[_foregroundRenderObject] = foregroundRenderObject;
      } else {
        t19 = this[_foregroundRenderObject];
        t19 == null ? null : t19.painter = effectivePainter;
      }
      this[_foregroundPainter] = newPainter;
    }
    get [_placeholderSpans$]() {
      let t19;
      t19 = this[__RenderEditable__placeholderSpans];
      return t19 == null ? dart.throw(new _internal.LateError.fieldNI("_placeholderSpans")) : t19;
    }
    set [_placeholderSpans$](_placeholderSpans$35param) {
      this[__RenderEditable__placeholderSpans] = _placeholderSpans$35param;
    }
    [_extractPlaceholderSpans$](span) {
      let t19;
      this[_placeholderSpans$] = T.JSArrayOfPlaceholderSpan().of([]);
      t19 = span;
      t19 == null ? null : t19.visitChildren(dart.fn(span => {
        if (placeholder_span.PlaceholderSpan.is(span)) {
          this[_placeholderSpans$][$add](span);
        }
        return true;
      }, T.InlineSpanTobool()));
    }
    get foregroundPainter() {
      return this[_foregroundPainter];
    }
    set foregroundPainter(newPainter) {
      if (dart.equals(newPainter, this[_foregroundPainter])) {
        return;
      }
      this[_updateForegroundPainter](newPainter);
    }
    [_updatePainter](newPainter) {
      let t19;
      let effectivePainter = newPainter == null ? this[_builtInPainters] : new editable._CompositeRenderEditablePainter.new({painters: T.JSArrayOfRenderEditablePainter().of([this[_builtInPainters], newPainter])});
      if (this[_backgroundRenderObject] == null) {
        let backgroundRenderObject = new editable._RenderEditableCustomPaint.new({painter: effectivePainter});
        this.adoptChild(backgroundRenderObject);
        this[_backgroundRenderObject] = backgroundRenderObject;
      } else {
        t19 = this[_backgroundRenderObject];
        t19 == null ? null : t19.painter = effectivePainter;
      }
      this[_painter] = newPainter;
    }
    get painter() {
      return this[_painter];
    }
    set painter(newPainter) {
      if (dart.equals(newPainter, this[_painter])) {
        return;
      }
      this[_updatePainter](newPainter);
    }
    get [_caretPainter]() {
      let t20, t19;
      t19 = this[__RenderEditable__caretPainter];
      return t19 == null ? (t20 = new editable._FloatingCursorPainter.new(dart.bind(this, _onCaretChanged)), this[__RenderEditable__caretPainter] == null ? this[__RenderEditable__caretPainter] = t20 : dart.throw(new _internal.LateError.fieldADI("_caretPainter"))) : t19;
    }
    get [_builtInForegroundPainters]() {
      let t19;
      t19 = this[_cachedBuiltInForegroundPainters];
      return t19 == null ? this[_cachedBuiltInForegroundPainters] = this[_createBuiltInForegroundPainters]() : t19;
    }
    [_createBuiltInForegroundPainters]() {
      return new editable._CompositeRenderEditablePainter.new({painters: (() => {
          let t19 = T.JSArrayOfRenderEditablePainter().of([]);
          if (this.paintCursorAboveText) t19.push(this[_caretPainter]);
          return t19;
        })()});
    }
    get [_builtInPainters]() {
      let t20;
      t20 = this[_cachedBuiltInPainters];
      return t20 == null ? this[_cachedBuiltInPainters] = this[_createBuiltInPainters]() : t20;
    }
    [_createBuiltInPainters]() {
      return new editable._CompositeRenderEditablePainter.new({painters: (() => {
          let t20 = T.JSArrayOfRenderEditablePainter().of([this[_autocorrectHighlightPainter], this[_selectionPainter]]);
          if (!this.paintCursorAboveText) t20.push(this[_caretPainter]);
          return t20;
        })()});
    }
    debugAssertLayoutUpToDate() {
      if (!(this[_textLayoutLastMaxWidth] === this.constraints.maxWidth && this[_textLayoutLastMinWidth] === this.constraints.minWidth)) dart.assertFailed("Last width (" + dart.str(this[_textLayoutLastMinWidth]) + ", " + dart.str(this[_textLayoutLastMaxWidth]) + ") not the same as max width constraint (" + dart.str(this.constraints.minWidth) + ", " + dart.str(this.constraints.maxWidth) + ").", I[2], 550, 7, "_textLayoutLastMaxWidth == constraints.maxWidth &&\r\n      _textLayoutLastMinWidth == constraints.minWidth");
    }
    [_onCaretChanged](caretRect) {
      let t21;
      if (!dart.equals(this[_lastCaretRect], caretRect)) {
        t21 = this.onCaretChanged;
        t21 == null ? null : t21(caretRect);
      }
      this[_lastCaretRect] = this.onCaretChanged == null ? null : caretRect;
    }
    get textHeightBehavior() {
      return this[_textPainter$].textHeightBehavior;
    }
    set textHeightBehavior(value) {
      if (dart.equals(this[_textPainter$].textHeightBehavior, value)) {
        return;
      }
      this[_textPainter$].textHeightBehavior = value;
      this.markNeedsTextLayout();
    }
    get textWidthBasis() {
      return this[_textPainter$].textWidthBasis;
    }
    set textWidthBasis(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 595, 12, "value != null");
      if (this[_textPainter$].textWidthBasis === value) {
        return;
      }
      this[_textPainter$].textWidthBasis = value;
      this.markNeedsTextLayout();
    }
    get devicePixelRatio() {
      return this[_devicePixelRatio];
    }
    set devicePixelRatio(value) {
      if (this.devicePixelRatio === value) {
        return;
      }
      this[_devicePixelRatio] = value;
      this.markNeedsTextLayout();
    }
    get obscuringCharacter() {
      return this[_obscuringCharacter];
    }
    set obscuringCharacter(value) {
      if (this[_obscuringCharacter] === value) {
        return;
      }
      if (!(value !== null && extensions['StringCharacters|get#characters'](value)[$length] === 1)) dart.assertFailed(null, I[2], 625, 12, "value != null && value.characters.length == 1");
      this[_obscuringCharacter] = value;
      this.markNeedsLayout();
    }
    get obscureText() {
      return this[_obscureText];
    }
    set obscureText(value) {
      if (this[_obscureText] === value) {
        return;
      }
      this[_obscureText] = value;
      this[_cachedAttributedValue] = null;
      this.markNeedsSemanticsUpdate();
    }
    get selectionHeightStyle() {
      return this[_selectionPainter].selectionHeightStyle;
    }
    set selectionHeightStyle(value) {
      this[_selectionPainter].selectionHeightStyle = value;
    }
    get selectionWidthStyle() {
      return this[_selectionPainter].selectionWidthStyle;
    }
    set selectionWidthStyle(value) {
      this[_selectionPainter].selectionWidthStyle = value;
    }
    get selectionStartInViewport() {
      return this[_selectionStartInViewport];
    }
    get selectionEndInViewport() {
      return this[_selectionEndInViewport];
    }
    [_getTextPositionVertical$](position, verticalOffset) {
      let caretOffset = this[_textPainter$].getOffsetForCaret(position, this[_caretPrototype]);
      let caretOffsetTranslated = caretOffset.translate(0.0, verticalOffset);
      return this[_textPainter$].getPositionForOffset(caretOffsetTranslated);
    }
    getLineAtOffset(position) {
      this.debugAssertLayoutUpToDate();
      let line = this[_textPainter$].getLineBoundary(position);
      if (this.obscureText) {
        return new text_editing.TextSelection.new({baseOffset: 0, extentOffset: this.plainText.length});
      }
      return new text_editing.TextSelection.new({baseOffset: line.start, extentOffset: line.end});
    }
    getWordBoundary(position) {
      return this[_textPainter$].getWordBoundary(position);
    }
    getTextPositionAbove(position) {
      let preferredLineHeight = this[_textPainter$].preferredLineHeight;
      let verticalOffset = -0.5 * preferredLineHeight;
      return this[_getTextPositionVertical$](position, verticalOffset);
    }
    getTextPositionBelow(position) {
      let preferredLineHeight = this[_textPainter$].preferredLineHeight;
      let verticalOffset = 1.5 * preferredLineHeight;
      return this[_getTextPositionVertical$](position, verticalOffset);
    }
    [_updateSelectionExtentsVisibility](effectiveOffset) {
      if (!(this.selection != null)) dart.assertFailed(null, I[2], 743, 12, "selection != null");
      let visibleRegion = ui.Offset.zero['&'](this.size);
      let startOffset = this[_textPainter$].getOffsetForCaret(new ui.TextPosition.new({offset: dart.nullCheck(this.selection).start, affinity: dart.nullCheck(this.selection).affinity}), this[_caretPrototype]);
      this[_selectionStartInViewport].value = visibleRegion.inflate(0.5).contains(startOffset['+'](effectiveOffset));
      let endOffset = this[_textPainter$].getOffsetForCaret(new ui.TextPosition.new({offset: dart.nullCheck(this.selection).end, affinity: dart.nullCheck(this.selection).affinity}), this[_caretPrototype]);
      this[_selectionEndInViewport].value = visibleRegion.inflate(0.5).contains(endOffset['+'](effectiveOffset));
    }
    [_setTextEditingValue](newValue, cause) {
      this.textSelectionDelegate.userUpdateTextEditingValue(newValue, cause);
    }
    [_setSelection](nextSelection, cause) {
      if (nextSelection.isValid) {
        let textLength = this.textSelectionDelegate.textEditingValue.text.length;
        nextSelection = nextSelection.copyWith({baseOffset: math.min(core.int, nextSelection.baseOffset, textLength), extentOffset: math.min(core.int, nextSelection.extentOffset, textLength)});
      }
      this[_setTextEditingValue](this.textSelectionDelegate.textEditingValue.copyWith({selection: nextSelection}), cause);
    }
    markNeedsPaint() {
      let t21, t21$;
      super.markNeedsPaint();
      t21 = this[_foregroundRenderObject];
      t21 == null ? null : t21.markNeedsPaint();
      t21$ = this[_backgroundRenderObject];
      t21$ == null ? null : t21$.markNeedsPaint();
    }
    markNeedsTextLayout() {
      this[_textLayoutLastMaxWidth] = null;
      this[_textLayoutLastMinWidth] = null;
      this.markNeedsLayout();
    }
    systemFontsDidChange() {
      super.systemFontsDidChange();
      this[_textPainter$].markNeedsLayout();
      this[_textLayoutLastMaxWidth] = null;
      this[_textLayoutLastMinWidth] = null;
    }
    get plainText() {
      return this[_textPainter$].plainText;
    }
    get text() {
      return this[_textPainter$].text;
    }
    set text(value) {
      if (dart.equals(this[_textPainter$].text, value)) {
        return;
      }
      this[_cachedLineBreakCount] = null;
      this[_textPainter$].text = value;
      this[_cachedAttributedValue] = null;
      this[_cachedCombinedSemanticsInfos$] = null;
      this[_extractPlaceholderSpans$](value);
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get textAlign() {
      return this[_textPainter$].textAlign;
    }
    set textAlign(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 855, 12, "value != null");
      if (this[_textPainter$].textAlign === value) {
        return;
      }
      this[_textPainter$].textAlign = value;
      this.markNeedsTextLayout();
    }
    get textDirection() {
      return dart.nullCheck(this[_textPainter$].textDirection);
    }
    set textDirection(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 881, 12, "value != null");
      if (this[_textPainter$].textDirection === value) {
        return;
      }
      this[_textPainter$].textDirection = value;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get locale() {
      return this[_textPainter$].locale;
    }
    set locale(value) {
      if (dart.equals(this[_textPainter$].locale, value)) {
        return;
      }
      this[_textPainter$].locale = value;
      this.markNeedsTextLayout();
    }
    get strutStyle() {
      return this[_textPainter$].strutStyle;
    }
    set strutStyle(value) {
      if (dart.equals(this[_textPainter$].strutStyle, value)) {
        return;
      }
      this[_textPainter$].strutStyle = value;
      this.markNeedsTextLayout();
    }
    get cursorColor() {
      return this[_caretPainter].caretColor;
    }
    set cursorColor(value) {
      this[_caretPainter].caretColor = value;
    }
    get backgroundCursorColor() {
      return this[_caretPainter].backgroundCursorColor;
    }
    set backgroundCursorColor(value) {
      this[_caretPainter].backgroundCursorColor = value;
    }
    get showCursor() {
      return this[_showCursor];
    }
    set showCursor(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 939, 12, "value != null");
      if (this[_showCursor][$_equals](value)) {
        return;
      }
      if (this.attached) {
        this[_showCursor].removeListener(dart.bind(this, _showHideCursor));
      }
      this[_showCursor] = value;
      if (this.attached) {
        this[_showHideCursor]();
        this[_showCursor].addListener(dart.bind(this, _showHideCursor));
      }
    }
    [_showHideCursor]() {
      this[_caretPainter].shouldPaint = this.showCursor.value;
    }
    get hasFocus() {
      return this[_hasFocus];
    }
    set hasFocus(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 961, 12, "value != null");
      if (this[_hasFocus] === value) {
        return;
      }
      this[_hasFocus] = value;
      this.markNeedsSemanticsUpdate();
    }
    get forceLine() {
      return this[_forceLine];
    }
    set forceLine(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 973, 12, "value != null");
      if (this[_forceLine] === value) {
        return;
      }
      this[_forceLine] = value;
      this.markNeedsLayout();
    }
    get readOnly() {
      return this[_readOnly];
    }
    set readOnly(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 985, 12, "value != null");
      if (this[_readOnly] === value) {
        return;
      }
      this[_readOnly] = value;
      this.markNeedsSemanticsUpdate();
    }
    get maxLines() {
      return this[_maxLines];
    }
    set maxLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, I[2], 1007, 12, "value == null || value > 0");
      if (this.maxLines == value) {
        return;
      }
      this[_maxLines] = value;
      this[_textPainter$].maxLines = value === 1 ? 1 : null;
      this.markNeedsTextLayout();
    }
    get minLines() {
      return this[_minLines];
    }
    set minLines(value) {
      if (!(value == null || dart.notNull(value) > 0)) dart.assertFailed(null, I[2], 1025, 12, "value == null || value > 0");
      if (this.minLines == value) {
        return;
      }
      this[_minLines] = value;
      this.markNeedsTextLayout();
    }
    get expands() {
      return this[_expands];
    }
    set expands(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 1037, 12, "value != null");
      if (this.expands === value) {
        return;
      }
      this[_expands] = value;
      this.markNeedsTextLayout();
    }
    get selectionColor() {
      return this[_selectionPainter].highlightColor;
    }
    set selectionColor(value) {
      this[_selectionPainter].highlightColor = value;
    }
    get textScaleFactor() {
      return this[_textPainter$].textScaleFactor;
    }
    set textScaleFactor(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 1057, 12, "value != null");
      if (this[_textPainter$].textScaleFactor === value) {
        return;
      }
      this[_textPainter$].textScaleFactor = value;
      this.markNeedsTextLayout();
    }
    get selection() {
      return this[_selection];
    }
    set selection(value) {
      if (dart.equals(this[_selection], value)) {
        return;
      }
      this[_selection] = value;
      this[_selectionPainter].highlightedRange = value;
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    get offset() {
      return this[_offset];
    }
    set offset(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 1091, 12, "value != null");
      if (this[_offset][$_equals](value)) {
        return;
      }
      if (this.attached) {
        this[_offset].removeListener(dart.bind(this, 'markNeedsPaint'));
      }
      this[_offset] = value;
      if (this.attached) {
        this[_offset].addListener(dart.bind(this, 'markNeedsPaint'));
      }
      this.markNeedsLayout();
    }
    get cursorWidth() {
      return this[_cursorWidth];
    }
    set cursorWidth(value) {
      if (this[_cursorWidth] === value) {
        return;
      }
      this[_cursorWidth] = value;
      this.markNeedsLayout();
    }
    get cursorHeight() {
      let t21;
      t21 = this[_cursorHeight];
      return t21 == null ? this.preferredLineHeight : t21;
    }
    set cursorHeight(value) {
      if (this[_cursorHeight] == value) {
        return;
      }
      this[_cursorHeight] = value;
      this.markNeedsLayout();
    }
    get paintCursorAboveText() {
      return this[_paintCursorOnTop];
    }
    set paintCursorAboveText(value) {
      if (this[_paintCursorOnTop] === value) {
        return;
      }
      this[_paintCursorOnTop] = value;
      this[_cachedBuiltInForegroundPainters] = null;
      this[_cachedBuiltInPainters] = null;
      this[_updateForegroundPainter](this[_foregroundPainter]);
      this[_updatePainter](this[_painter]);
    }
    get cursorOffset() {
      return this[_caretPainter].cursorOffset;
    }
    set cursorOffset(value) {
      this[_caretPainter].cursorOffset = value;
    }
    get cursorRadius() {
      return this[_caretPainter].cursorRadius;
    }
    set cursorRadius(value) {
      this[_caretPainter].cursorRadius = value;
    }
    get startHandleLayerLink() {
      return this[_startHandleLayerLink$];
    }
    set startHandleLayerLink(value) {
      if (this[_startHandleLayerLink$][$_equals](value)) {
        return;
      }
      this[_startHandleLayerLink$] = value;
      this.markNeedsPaint();
    }
    get endHandleLayerLink() {
      return this[_endHandleLayerLink$];
    }
    set endHandleLayerLink(value) {
      if (this[_endHandleLayerLink$][$_equals](value)) {
        return;
      }
      this[_endHandleLayerLink$] = value;
      this.markNeedsPaint();
    }
    get [_floatingCursorTextPosition]() {
      let t21;
      t21 = this[__RenderEditable__floatingCursorTextPosition];
      return t21 == null ? dart.throw(new _internal.LateError.fieldNI("_floatingCursorTextPosition")) : t21;
    }
    set [_floatingCursorTextPosition](_floatingCursorTextPosition$35param) {
      this[__RenderEditable__floatingCursorTextPosition] = _floatingCursorTextPosition$35param;
    }
    get enableInteractiveSelection() {
      return this[_enableInteractiveSelection];
    }
    set enableInteractiveSelection(value) {
      if (this[_enableInteractiveSelection] == value) {
        return;
      }
      this[_enableInteractiveSelection] = value;
      this.markNeedsTextLayout();
      this.markNeedsSemanticsUpdate();
    }
    get selectionEnabled() {
      let t21;
      t21 = this.enableInteractiveSelection;
      return t21 == null ? !this.obscureText : t21;
    }
    get promptRectColor() {
      return this[_autocorrectHighlightPainter].highlightColor;
    }
    set promptRectColor(newValue) {
      this[_autocorrectHighlightPainter].highlightColor = newValue;
    }
    setPromptRectRange(newRange) {
      this[_autocorrectHighlightPainter].highlightedRange = newRange;
    }
    get maxScrollExtent() {
      return this[_maxScrollExtent];
    }
    get [_caretMargin]() {
      return 1 + this.cursorWidth;
    }
    get clipBehavior() {
      return this[_clipBehavior];
    }
    set clipBehavior(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 1298, 12, "value != null");
      if (value !== this[_clipBehavior]) {
        this[_clipBehavior] = value;
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    getBoxesForSelection(selection) {
      this[_computeTextMetricsIfNeeded]();
      return this[_textPainter$].getBoxesForSelection(selection)[$map](ui.Rect, dart.fn(textBox => textBox.toRect().shift(this[_paintOffset]), T.TextBoxToRect()))[$toList]();
    }
    describeSemanticsConfiguration(config) {
      let t21, t21$, t21$0, t21$1, t21$2, t21$3, t21$4;
      super.describeSemanticsConfiguration(config);
      this[_semanticsInfo$] = dart.nullCheck(this[_textPainter$].text).getSemanticsInformation();
      if (dart.nullCheck(this[_semanticsInfo$])[$any](dart.fn(info => info.recognizer != null, T.InlineSpanSemanticsInformationTobool())) && platform.defaultTargetPlatform !== platform.TargetPlatform.macOS) {
        if (!(this.readOnly && !this.obscureText)) dart.assertFailed(null, I[2], 1336, 14, "readOnly && !obscureText");
        t21 = config;
        (() => {
          t21.isSemanticBoundary = true;
          t21.explicitChildNodes = true;
          return t21;
        })();
        return;
      }
      if (this[_cachedAttributedValue] == null) {
        if (this.obscureText) {
          this[_cachedAttributedValue] = new semantics.AttributedString.new(this.obscuringCharacter[$times](this.plainText.length));
        } else {
          let buffer = new core.StringBuffer.new();
          let offset = 0;
          let attributes = T.JSArrayOfStringAttribute().of([]);
          for (let info of dart.nullCheck(this[_semanticsInfo$])) {
            let label = (t21$ = info.semanticsLabel, t21$ == null ? info.text : t21$);
            for (let infoAttribute of info.stringAttributes) {
              let originalRange = infoAttribute.range;
              attributes[$add](infoAttribute.copy({range: new ui.TextRange.new({start: offset + originalRange.start, end: offset + originalRange.end})}));
            }
            buffer.write(label);
            offset = offset + label.length;
          }
          this[_cachedAttributedValue] = new semantics.AttributedString.new(buffer.toString(), {attributes: attributes});
        }
      }
      t21$0 = config;
      (() => {
        t21$0.attributedValue = dart.nullCheck(this[_cachedAttributedValue]);
        t21$0.isObscured = this.obscureText;
        t21$0.isMultiline = this[_isMultiline];
        t21$0.textDirection = this.textDirection;
        t21$0.isFocused = this.hasFocus;
        t21$0.isTextField = true;
        t21$0.isReadOnly = this.readOnly;
        return t21$0;
      })();
      if (this.hasFocus && this.selectionEnabled) {
        config.onSetSelection = dart.bind(this, _handleSetSelection);
      }
      if (this.hasFocus && !this.readOnly) {
        config.onSetText = dart.bind(this, _handleSetText);
      }
      if (this.selectionEnabled && dart.test((t21$2 = (t21$1 = this.selection, t21$1 == null ? null : t21$1.isValid), t21$2 == null ? false : t21$2))) {
        config.textSelection = this.selection;
        if (this[_textPainter$].getOffsetBefore(dart.nullCheck(this.selection).extentOffset) != null) {
          t21$3 = config;
          (() => {
            t21$3.onMoveCursorBackwardByWord = dart.bind(this, _handleMoveCursorBackwardByWord);
            t21$3.onMoveCursorBackwardByCharacter = dart.bind(this, _handleMoveCursorBackwardByCharacter);
            return t21$3;
          })();
        }
        if (this[_textPainter$].getOffsetAfter(dart.nullCheck(this.selection).extentOffset) != null) {
          t21$4 = config;
          (() => {
            t21$4.onMoveCursorForwardByWord = dart.bind(this, _handleMoveCursorForwardByWord);
            t21$4.onMoveCursorForwardByCharacter = dart.bind(this, _handleMoveCursorForwardByCharacter);
            return t21$4;
          })();
        }
      }
    }
    [_handleSetText](text) {
      this.textSelectionDelegate.userUpdateTextEditingValue(new text_input.TextEditingValue.new({text: text, selection: new text_editing.TextSelection.collapsed({offset: text.length})}), text_input.SelectionChangedCause.keyboard);
    }
    assembleSemanticsNode(node, config, children) {
      let t22, t22$, t21, t24, t24$, t24$0;
      if (!(this[_semanticsInfo$] != null && dart.nullCheck(this[_semanticsInfo$])[$isNotEmpty])) dart.assertFailed(null, I[2], 1411, 12, "_semanticsInfo != null && _semanticsInfo!.isNotEmpty");
      let newChildren = T.JSArrayOfSemanticsNode().of([]);
      let currentDirection = this.textDirection;
      let currentRect = null;
      let ordinal = 0.0;
      let start = 0;
      let placeholderIndex = 0;
      let childIndex = 0;
      let child = this.firstChild;
      let newChildCache = new (T.LinkedMapOfKey$SemanticsNode()).new();
      this[_cachedCombinedSemanticsInfos$] == null ? this[_cachedCombinedSemanticsInfos$] = inline_span.combineSemanticsInfo(dart.nullCheck(this[_semanticsInfo$])) : null;
      for (let info of dart.nullCheck(this[_cachedCombinedSemanticsInfos$])) {
        let selection = new text_editing.TextSelection.new({baseOffset: start, extentOffset: start + info.text.length});
        start = start + info.text.length;
        if (info.isPlaceholder) {
          while (children[$length] > childIndex && children[$elementAt](childIndex).isTagged(new paragraph$.PlaceholderSpanIndexSemanticsTag.new(placeholderIndex))) {
            let childNode = children[$elementAt](childIndex);
            let parentData = paragraph$.TextParentData.as(dart.nullCheck(dart.nullCheck(child).parentData));
            if (!(parentData.scale != null)) dart.assertFailed(null, I[2], 1436, 18, "parentData.scale != null");
            childNode.rect = new ui.Rect.fromLTWH(childNode.rect.left, childNode.rect.top, childNode.rect.width * dart.nullCheck(parentData.scale), childNode.rect.height * dart.nullCheck(parentData.scale));
            newChildren[$add](childNode);
            childIndex = childIndex + 1;
          }
          child = this.childAfter(dart.nullCheck(child));
          placeholderIndex = placeholderIndex + 1;
        } else {
          let initialDirection = currentDirection;
          let rects = this[_textPainter$].getBoxesForSelection(selection);
          if (rects[$isEmpty]) {
            continue;
          }
          let rect = rects[$first].toRect();
          currentDirection = rects[$first].direction;
          for (let textBox of rects[$skip](1)) {
            rect = rect.expandToInclude(textBox.toRect());
            currentDirection = textBox.direction;
          }
          rect = new ui.Rect.fromLTWH(math.max(core.double, 0.0, rect.left), math.max(core.double, 0.0, rect.top), math.min(core.double, rect.width, this.constraints.maxWidth), math.min(core.double, rect.height, this.constraints.maxHeight));
          currentRect = new ui.Rect.fromLTRB(rect.left[$floorToDouble]() - 4.0, rect.top[$floorToDouble]() - 4.0, rect.right[$ceilToDouble]() + 4.0, rect.bottom[$ceilToDouble]() + 4.0);
          let configuration = (t21 = new semantics.SemanticsConfiguration.new(), (() => {
            t21.sortKey = new semantics.OrdinalSortKey.new((t22 = ordinal, ordinal = t22 + 1, t22));
            t21.textDirection = initialDirection;
            t21.attributedLabel = new semantics.AttributedString.new((t22$ = info.semanticsLabel, t22$ == null ? info.text : t22$), {attributes: info.stringAttributes});
            return t21;
          })());
          let recognizer = info.recognizer;
          if (recognizer != null) {
            if (tap.TapGestureRecognizer.is(recognizer)) {
              if (recognizer.onTap != null) {
                configuration.onTap = recognizer.onTap;
                configuration.isLink = true;
              }
            } else if (multitap.DoubleTapGestureRecognizer.is(recognizer)) {
              if (recognizer.onDoubleTap != null) {
                configuration.onTap = recognizer.onDoubleTap;
                configuration.isLink = true;
              }
            } else if (long_press.LongPressGestureRecognizer.is(recognizer)) {
              if (recognizer.onLongPress != null) {
                configuration.onLongPress = recognizer.onLongPress;
              }
            } else {
              if (!false) dart.assertFailed(dart.str(dart.runtimeType(recognizer)) + " is not supported.", I[2], 1497, 20, "false");
            }
          }
          if (node.parentPaintClipRect != null) {
            let paintRect = dart.nullCheck(node.parentPaintClipRect).intersect(currentRect);
            configuration.isHidden = paintRect.isEmpty && !currentRect.isEmpty;
          }
          let newChild = null;
          function newChild$35get() {
            let t22;
            t22 = newChild;
            return t22 == null ? dart.throw(new _internal.LateError.localNI("newChild")) : t22;
          }
          function newChild$35set(newChild$35param) {
            if (newChild == null)
              return newChild = newChild$35param;
            else
              dart.throw(new _internal.LateError.localAI("newChild"));
          }
          if (dart.test((t24$ = (t24 = this[_cachedChildNodes$], t24 == null ? null : t24[$isNotEmpty]), t24$ == null ? false : t24$))) {
            newChild$35set(dart.nullCheck(dart.nullCheck(this[_cachedChildNodes$])[$remove](dart.nullCheck(this[_cachedChildNodes$])[$keys][$first])));
          } else {
            let key = new key$.UniqueKey.new();
            newChild$35set(new semantics.SemanticsNode.new({key: key, showOnScreen: this[_createShowOnScreenFor$](key)}));
          }
          t24$0 = newChild$35get();
          (() => {
            t24$0.updateWith({config: configuration});
            t24$0.rect = currentRect;
            return t24$0;
          })();
          newChildCache[$_set](dart.nullCheck(newChild$35get().key), newChild$35get());
          newChildren[$add](newChild$35get());
        }
      }
      this[_cachedChildNodes$] = newChildCache;
      node.updateWith({config: config, childrenInInversePaintOrder: newChildren});
    }
    [_createShowOnScreenFor$](key) {
      return dart.fn(() => {
        let node = dart.nullCheck(dart.nullCheck(this[_cachedChildNodes$])[$_get](key));
        this.showOnScreen({descendant: this, rect: node.rect});
      }, T.VoidTovoid());
    }
    [_handleSetSelection](selection) {
      this[_setSelection](selection, text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorForwardByCharacter](extendSelection) {
      if (!(this.selection != null)) dart.assertFailed(null, I[2], 1541, 12, "selection != null");
      let extentOffset = this[_textPainter$].getOffsetAfter(dart.nullCheck(this.selection).extentOffset);
      if (extentOffset == null) {
        return;
      }
      let baseOffset = !extendSelection ? extentOffset : dart.nullCheck(this.selection).baseOffset;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset}), text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorBackwardByCharacter](extendSelection) {
      if (!(this.selection != null)) dart.assertFailed(null, I[2], 1554, 12, "selection != null");
      let extentOffset = this[_textPainter$].getOffsetBefore(dart.nullCheck(this.selection).extentOffset);
      if (extentOffset == null) {
        return;
      }
      let baseOffset = !extendSelection ? extentOffset : dart.nullCheck(this.selection).baseOffset;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset}), text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorForwardByWord](extendSelection) {
      if (!(this.selection != null)) dart.assertFailed(null, I[2], 1567, 12, "selection != null");
      let currentWord = this[_textPainter$].getWordBoundary(dart.nullCheck(this.selection).extent);
      let nextWord = this[_getNextWord](currentWord.end);
      if (nextWord == null) {
        return;
      }
      let baseOffset = extendSelection ? dart.nullCheck(this.selection).baseOffset : nextWord.start;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: nextWord.start}), text_input.SelectionChangedCause.keyboard);
    }
    [_handleMoveCursorBackwardByWord](extendSelection) {
      if (!(this.selection != null)) dart.assertFailed(null, I[2], 1584, 12, "selection != null");
      let currentWord = this[_textPainter$].getWordBoundary(dart.nullCheck(this.selection).extent);
      let previousWord = this[_getPreviousWord](currentWord.start - 1);
      if (previousWord == null) {
        return;
      }
      let baseOffset = extendSelection ? dart.nullCheck(this.selection).baseOffset : previousWord.start;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: previousWord.start}), text_input.SelectionChangedCause.keyboard);
    }
    [_getNextWord](offset) {
      while (true) {
        let range = this[_textPainter$].getWordBoundary(new ui.TextPosition.new({offset: offset}));
        if (range === null || !range.isValid || range.isCollapsed) {
          return null;
        }
        if (!this[_onlyWhitespace](range)) {
          return range;
        }
        offset = range.end;
      }
    }
    [_getPreviousWord](offset) {
      while (offset >= 0) {
        let range = this[_textPainter$].getWordBoundary(new ui.TextPosition.new({offset: offset}));
        if (range === null || !range.isValid || range.isCollapsed) {
          return null;
        }
        if (!this[_onlyWhitespace](range)) {
          return range;
        }
        offset = range.start - 1;
      }
      return null;
    }
    [_onlyWhitespace](range) {
      for (let i = range.start; i < range.end; i = i + 1) {
        let codeUnit = dart.nullCheck(dart.nullCheck(this.text).codeUnitAt(i));
        if (!text_layout_metrics.TextLayoutMetrics.isWhitespace(codeUnit)) {
          return false;
        }
      }
      return true;
    }
    attach(owner) {
      let t24, t24$, t24$0, t24$1;
      object.PipelineOwner.as(owner);
      super.attach(owner);
      t24 = this[_foregroundRenderObject];
      t24 == null ? null : t24.attach(owner);
      t24$ = this[_backgroundRenderObject];
      t24$ == null ? null : t24$.attach(owner);
      this[_tap] = (t24$0 = new tap.TapGestureRecognizer.new({debugOwner: this}), (() => {
        t24$0.onTapDown = dart.bind(this, _handleTapDown);
        t24$0.onTap = dart.bind(this, _handleTap);
        return t24$0;
      })());
      this[_longPress] = (t24$1 = new long_press.LongPressGestureRecognizer.new({debugOwner: this}), (() => {
        t24$1.onLongPress = dart.bind(this, _handleLongPress);
        return t24$1;
      })());
      this[_offset].addListener(dart.bind(this, 'markNeedsPaint'));
      this[_showHideCursor]();
      this[_showCursor].addListener(dart.bind(this, _showHideCursor));
    }
    detach() {
      let t24, t24$;
      this[_tap].dispose();
      this[_longPress].dispose();
      this[_offset].removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_showCursor].removeListener(dart.bind(this, _showHideCursor));
      super.detach();
      t24 = this[_foregroundRenderObject];
      t24 == null ? null : t24.detach();
      t24$ = this[_backgroundRenderObject];
      t24$ == null ? null : t24$.detach();
    }
    redepthChildren() {
      let foregroundChild = this[_foregroundRenderObject];
      let backgroundChild = this[_backgroundRenderObject];
      if (foregroundChild != null) {
        this.redepthChild(foregroundChild);
      }
      if (backgroundChild != null) {
        this.redepthChild(backgroundChild);
      }
      super.redepthChildren();
    }
    visitChildren(visitor) {
      let foregroundChild = this[_foregroundRenderObject];
      let backgroundChild = this[_backgroundRenderObject];
      if (foregroundChild != null) {
        visitor(foregroundChild);
      }
      if (backgroundChild != null) {
        visitor(backgroundChild);
      }
      super.visitChildren(visitor);
    }
    get [_isMultiline]() {
      return this.maxLines !== 1;
    }
    get [_viewportAxis]() {
      return this[_isMultiline] ? basic_types.Axis.vertical : basic_types.Axis.horizontal;
    }
    get [_paintOffset]() {
      switch (this[_viewportAxis]) {
        case C[48] || CT.C48:
          {
            return new ui.Offset.new(-this.offset.pixels, 0.0);
          }
        case C[49] || CT.C49:
          {
            return new ui.Offset.new(0.0, -this.offset.pixels);
          }
      }
    }
    get [_viewportExtent]() {
      if (!this.hasSize) dart.assertFailed(null, I[2], 1709, 12, "hasSize");
      switch (this[_viewportAxis]) {
        case C[48] || CT.C48:
          {
            return this.size.width;
          }
        case C[49] || CT.C49:
          {
            return this.size.height;
          }
      }
    }
    [_getMaxScrollExtent](contentSize) {
      if (!this.hasSize) dart.assertFailed(null, I[2], 1719, 12, "hasSize");
      switch (this[_viewportAxis]) {
        case C[48] || CT.C48:
          {
            return math.max(core.double, 0.0, contentSize.width - this.size.width);
          }
        case C[49] || CT.C49:
          {
            return math.max(core.double, 0.0, contentSize.height - this.size.height);
          }
      }
    }
    get [_hasVisualOverflow]() {
      return this[_maxScrollExtent] > 0 || !this[_paintOffset]._equals(ui.Offset.zero);
    }
    getEndpointsForSelection(selection) {
      this[_computeTextMetricsIfNeeded]();
      let paintOffset = this[_paintOffset];
      let boxes = selection.isCollapsed ? T.JSArrayOfTextBox().of([]) : this[_textPainter$].getBoxesForSelection(selection, {boxHeightStyle: this.selectionHeightStyle, boxWidthStyle: this.selectionWidthStyle});
      if (boxes[$isEmpty]) {
        let caretOffset = this[_textPainter$].getOffsetForCaret(selection.extent, this[_caretPrototype]);
        let start = new ui.Offset.new(0.0, this.preferredLineHeight)['+'](caretOffset)['+'](paintOffset);
        return T.JSArrayOfTextSelectionPoint().of([new editable.TextSelectionPoint.new(start, null)]);
      } else {
        let start = new ui.Offset.new(math$.clampDouble(boxes[$first].start, 0.0, this[_textPainter$].size.width), boxes[$first].bottom)['+'](paintOffset);
        let end = new ui.Offset.new(math$.clampDouble(boxes[$last].end, 0.0, this[_textPainter$].size.width), boxes[$last].bottom)['+'](paintOffset);
        return T.JSArrayOfTextSelectionPoint().of([new editable.TextSelectionPoint.new(start, boxes[$first].direction), new editable.TextSelectionPoint.new(end, boxes[$last].direction)]);
      }
    }
    getRectForComposingRange(range) {
      let t24;
      if (!range.isValid || range.isCollapsed) {
        return null;
      }
      this[_computeTextMetricsIfNeeded]();
      let boxes = this[_textPainter$].getBoxesForSelection(new text_editing.TextSelection.new({baseOffset: range.start, extentOffset: range.end}), {boxHeightStyle: this.selectionHeightStyle, boxWidthStyle: this.selectionWidthStyle});
      t24 = boxes[$fold](T.RectN(), null, dart.fn((accum, incoming) => {
        let t24, t24$;
        t24$ = (t24 = accum, t24 == null ? null : t24.expandToInclude(incoming.toRect()));
        return t24$ == null ? incoming.toRect() : t24$;
      }, T.RectNAndTextBoxToRect()));
      return t24 == null ? null : t24.shift(this[_paintOffset]);
    }
    getPositionForPoint(globalPosition) {
      this[_computeTextMetricsIfNeeded]();
      globalPosition = globalPosition['+'](this[_paintOffset]._negate());
      return this[_textPainter$].getPositionForOffset(this.globalToLocal(globalPosition));
    }
    getLocalRectForCaret(caretPosition) {
      this[_computeTextMetricsIfNeeded]();
      let caretOffset = this[_textPainter$].getOffsetForCaret(caretPosition, this[_caretPrototype]);
      let rect = new ui.Rect.fromLTWH(0.0, 0.0, this.cursorWidth, this.cursorHeight).shift(caretOffset['+'](this[_paintOffset])['+'](this.cursorOffset));
      return rect.shift(this[_snapToPhysicalPixel](rect.topLeft));
    }
    computeMinIntrinsicWidth(height) {
      this[_layoutText$]();
      return this[_textPainter$].minIntrinsicWidth;
    }
    computeMaxIntrinsicWidth(height) {
      this[_layoutText$]();
      return this[_textPainter$].maxIntrinsicWidth + this[_caretMargin];
    }
    get preferredLineHeight() {
      return this[_textPainter$].preferredLineHeight;
    }
    [_countHardLineBreaks](text) {
      let cachedValue = this[_cachedLineBreakCount];
      if (cachedValue != null) {
        return cachedValue;
      }
      let count = 0;
      for (let index = 0; index < text.length; index = index + 1) {
        switch (text[$codeUnitAt](index)) {
          case 10:
          case 133:
          case 11:
          case 12:
          case 8232:
          case 8233:
            {
              count = count + 1;
            }
        }
      }
      return this[_cachedLineBreakCount] = count;
    }
    [_preferredHeight](width) {
      let t24, t24$, t24$0;
      let maxLines = this.maxLines;
      let minLines = (t24 = this.minLines, t24 == null ? maxLines : t24);
      let minHeight = this.preferredLineHeight * dart.notNull((t24$ = minLines, t24$ == null ? 0 : t24$));
      if (maxLines == null) {
        let estimatedHeight = null;
        if (width === 1 / 0) {
          estimatedHeight = this.preferredLineHeight * (this[_countHardLineBreaks](this.plainText) + 1);
        } else {
          this[_layoutText$]({maxWidth: width});
          estimatedHeight = this[_textPainter$].height;
        }
        return math.max(core.double, estimatedHeight, minHeight);
      }
      let textHeightBehavior = this.textHeightBehavior;
      let usePreferredLineHeightHack = maxLines === 1 && (t24$0 = this.text, t24$0 == null ? null : t24$0.codeUnitAt(0)) == null && this.strutStyle != null && !dart.equals(this.strutStyle, strut_style.StrutStyle.disabled) && textHeightBehavior != null && (!textHeightBehavior.applyHeightToFirstAscent || !textHeightBehavior.applyHeightToLastDescent);
      if (maxLines === 1 && !usePreferredLineHeightHack) {
        if (!(this[_textPainter$].maxLines === 1)) dart.assertFailed(null, I[2], 1899, 14, "_textPainter.maxLines == 1");
        this[_layoutText$]({maxWidth: width});
        return this[_textPainter$].height;
      }
      if (minLines == maxLines) {
        return minHeight;
      }
      this[_layoutText$]({maxWidth: width});
      let maxHeight = this.preferredLineHeight * dart.notNull(maxLines);
      return math$.clampDouble(this[_textPainter$].height, minHeight, maxHeight);
    }
    computeMinIntrinsicHeight(width) {
      return this[_preferredHeight](width);
    }
    computeMaxIntrinsicHeight(width) {
      return this[_preferredHeight](width);
    }
    computeDistanceToActualBaseline(baseline) {
      this[_computeTextMetricsIfNeeded]();
      return this[_textPainter$].computeDistanceToActualBaseline(baseline);
    }
    hitTestSelf(position) {
      return true;
    }
    hitTestChildren(result, opts) {
      let t24;
      let position = opts && 'position' in opts ? opts.position : null;
      let hitText = false;
      let textSpan = this[_textPainter$].text;
      if (textSpan != null) {
        let effectivePosition = position['-'](this[_paintOffset]);
        let textPosition = this[_textPainter$].getPositionForOffset(effectivePosition);
        let span = textSpan.getSpanForPosition(textPosition);
        if (hit_test.HitTestTarget.is(span)) {
          result.add(new (T.HitTestEntryOfHitTestTarget()).new(span));
          hitText = true;
        }
      }
      let child = this.firstChild;
      let childIndex = 0;
      while (child != null && childIndex < dart.nullCheck(this[_textPainter$].inlinePlaceholderBoxes)[$length]) {
        let textParentData = paragraph$.TextParentData.as(dart.nullCheck(child.parentData));
        let transform = (t24 = vector_math_64.Matrix4.translationValues(textParentData.offset.dx, textParentData.offset.dy, 0.0), (() => {
          t24.scale(textParentData.scale, textParentData.scale, textParentData.scale);
          return t24;
        })());
        let isHit = result.addWithPaintTransform({transform: transform, position: position, hitTest: dart.fn((result, transformed) => {
            if (!dart.fn(() => {
              let manualPosition = position['-'](textParentData.offset)['/'](dart.nullCheck(textParentData.scale));
              return (transformed.dx - manualPosition.dx)[$abs]() < 1e-10 && (transformed.dy - manualPosition.dy)[$abs]() < 1e-10;
            }, T.VoidTobool())()) dart.assertFailed(null, I[2], 1964, 18, "() {\r\n            final Offset manualPosition = (position - textParentData.offset) / textParentData.scale!;\r\n            return (transformed.dx - manualPosition.dx).abs() < precisionErrorTolerance\r\n              && (transformed.dy - manualPosition.dy).abs() < precisionErrorTolerance;\r\n          }()");
            return dart.nullCheck(child).hitTest(result, {position: transformed});
          }, T.BoxHitTestResultAndOffsetTobool())});
        if (isHit) {
          return true;
        }
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      return hitText;
    }
    set [_tap](_tap$35param) {
      this[__RenderEditable__tap] = _tap$35param;
    }
    get [_tap]() {
      let t24;
      t24 = this[__RenderEditable__tap];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_tap")) : t24;
    }
    set [_longPress](_longPress$35param) {
      this[__RenderEditable__longPress] = _longPress$35param;
    }
    get [_longPress]() {
      let t24;
      t24 = this[__RenderEditable__longPress];
      return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_longPress")) : t24;
    }
    handleEvent(event, entry) {
      box.BoxHitTestEntry.as(entry);
      if (!this.debugHandleEvent(event, entry)) dart.assertFailed(null, I[2], 1986, 12, "debugHandleEvent(event, entry)");
      if (events.PointerDownEvent.is(event)) {
        if (!!this.debugNeedsLayout) dart.assertFailed(null, I[2], 1988, 14, "!debugNeedsLayout");
        if (!this.ignorePointer) {
          this[_tap].addPointer(event);
          this[_longPress].addPointer(event);
        }
      }
    }
    get lastSecondaryTapDownPosition() {
      return this[_lastSecondaryTapDownPosition];
    }
    handleSecondaryTapDown(details) {
      this[_lastTapDownPosition] = details.globalPosition;
      this[_lastSecondaryTapDownPosition] = details.globalPosition;
    }
    handleTapDown(details) {
      this[_lastTapDownPosition] = details.globalPosition;
    }
    [_handleTapDown](details) {
      if (!!this.ignorePointer) dart.assertFailed(null, I[2], 2026, 12, "!ignorePointer");
      this.handleTapDown(details);
    }
    handleTap() {
      this.selectPosition({cause: text_input.SelectionChangedCause.tap});
    }
    [_handleTap]() {
      if (!!this.ignorePointer) dart.assertFailed(null, I[2], 2040, 12, "!ignorePointer");
      this.handleTap();
    }
    handleDoubleTap() {
      this.selectWord({cause: text_input.SelectionChangedCause.doubleTap});
    }
    handleLongPress() {
      this.selectWord({cause: text_input.SelectionChangedCause.longPress});
    }
    [_handleLongPress]() {
      if (!!this.ignorePointer) dart.assertFailed(null, I[2], 2064, 12, "!ignorePointer");
      this.handleLongPress();
    }
    selectPosition(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      this.selectPositionAt({from: dart.nullCheck(this[_lastTapDownPosition]), cause: cause});
    }
    selectPositionAt(opts) {
      let t24, t24$;
      let from = opts && 'from' in opts ? opts.from : null;
      let to = opts && 'to' in opts ? opts.to : null;
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (!(cause !== null)) dart.assertFailed(null, I[2], 2087, 12, "cause != null");
      if (!(from !== null)) dart.assertFailed(null, I[2], 2088, 12, "from != null");
      this[_layoutText$]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
      let fromPosition = this[_textPainter$].getPositionForOffset(this.globalToLocal(from['-'](this[_paintOffset])));
      let toPosition = to == null ? null : this[_textPainter$].getPositionForOffset(this.globalToLocal(to['-'](this[_paintOffset])));
      let baseOffset = fromPosition.offset;
      let extentOffset = (t24$ = (t24 = toPosition, t24 == null ? null : t24.offset), t24$ == null ? fromPosition.offset : t24$);
      let newSelection = new text_editing.TextSelection.new({baseOffset: baseOffset, extentOffset: extentOffset, affinity: fromPosition.affinity});
      this[_setSelection](newSelection, cause);
    }
    selectWord(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      this.selectWordsInRange({from: dart.nullCheck(this[_lastTapDownPosition]), cause: cause});
    }
    selectWordsInRange(opts) {
      let from = opts && 'from' in opts ? opts.from : null;
      let to = opts && 'to' in opts ? opts.to : null;
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (!(cause !== null)) dart.assertFailed(null, I[2], 2123, 12, "cause != null");
      if (!(from !== null)) dart.assertFailed(null, I[2], 2124, 12, "from != null");
      this[_computeTextMetricsIfNeeded]();
      let fromPosition = this[_textPainter$].getPositionForOffset(this.globalToLocal(from['-'](this[_paintOffset])));
      let fromWord = this[_getWordAtOffset](fromPosition);
      let toPosition = to == null ? fromPosition : this[_textPainter$].getPositionForOffset(this.globalToLocal(to['-'](this[_paintOffset])));
      let toWord = toPosition._equals(fromPosition) ? fromWord : this[_getWordAtOffset](toPosition);
      let isFromWordBeforeToWord = fromWord.start < toWord.end;
      this[_setSelection](new text_editing.TextSelection.new({baseOffset: isFromWordBeforeToWord ? fromWord.base.offset : fromWord.extent.offset, extentOffset: isFromWordBeforeToWord ? toWord.extent.offset : toWord.base.offset, affinity: fromWord.affinity}), cause);
    }
    selectWordEdge(opts) {
      let cause = opts && 'cause' in opts ? opts.cause : null;
      if (!(cause !== null)) dart.assertFailed(null, I[2], 2146, 12, "cause != null");
      this[_computeTextMetricsIfNeeded]();
      if (!(this[_lastTapDownPosition] != null)) dart.assertFailed(null, I[2], 2148, 12, "_lastTapDownPosition != null");
      let position = this[_textPainter$].getPositionForOffset(this.globalToLocal(dart.nullCheck(this[_lastTapDownPosition])['-'](this[_paintOffset])));
      let word = this[_textPainter$].getWordBoundary(position);
      let newSelection = null;
      function newSelection$35get() {
        let t25;
        t25 = newSelection;
        return t25 == null ? dart.throw(new _internal.LateError.localNI("newSelection")) : t25;
      }
      function newSelection$35set(newSelection$35param) {
        return newSelection = newSelection$35param;
      }
      if (position.offset <= word.start) {
        newSelection$35set(new text_editing.TextSelection.collapsed({offset: word.start}));
      } else {
        newSelection$35set(new text_editing.TextSelection.collapsed({offset: word.end, affinity: ui.TextAffinity.upstream}));
      }
      this[_setSelection](newSelection$35get(), cause);
    }
    [_getWordAtOffset](position) {
      this.debugAssertLayoutUpToDate();
      if (position.offset >= this.plainText.length) {
        return new text_editing.TextSelection.fromPosition(new ui.TextPosition.new({offset: this.plainText.length, affinity: ui.TextAffinity.upstream}));
      }
      if (this.obscureText) {
        return new text_editing.TextSelection.new({baseOffset: 0, extentOffset: this.plainText.length});
      }
      let word = this[_textPainter$].getWordBoundary(position);
      let effectiveOffset = null;
      switch (position.affinity) {
        case C[50] || CT.C50:
          {
            effectiveOffset = position.offset - 1;
            break;
          }
        case C[51] || CT.C51:
          {
            effectiveOffset = position.offset;
            break;
          }
      }
      if (text_layout_metrics.TextLayoutMetrics.isWhitespace(this.plainText[$codeUnitAt](effectiveOffset)) && effectiveOffset > 0) {
        if (!(platform.defaultTargetPlatform !== null)) dart.assertFailed(null, I[2], 2193, 14, "defaultTargetPlatform != null");
        let previousWord = this[_getPreviousWord](word.start);
        switch (platform.defaultTargetPlatform) {
          case C[52] || CT.C52:
            {
              if (previousWord == null) {
                let nextWord = this[_getNextWord](word.start);
                if (nextWord == null) {
                  return new text_editing.TextSelection.collapsed({offset: position.offset});
                }
                return new text_editing.TextSelection.new({baseOffset: position.offset, extentOffset: nextWord.end});
              }
              return new text_editing.TextSelection.new({baseOffset: previousWord.start, extentOffset: position.offset});
            }
          case C[53] || CT.C53:
            {
              if (this.readOnly) {
                if (previousWord == null) {
                  return new text_editing.TextSelection.new({baseOffset: position.offset, extentOffset: position.offset + 1});
                }
                return new text_editing.TextSelection.new({baseOffset: previousWord.start, extentOffset: position.offset});
              }
              break;
            }
          case C[54] || CT.C54:
          case C[55] || CT.C55:
          case C[56] || CT.C56:
          case C[57] || CT.C57:
            {
              break;
            }
        }
      }
      return new text_editing.TextSelection.new({baseOffset: word.start, extentOffset: word.end});
    }
    [_layoutChildren$](constraints, opts) {
      let dry = opts && 'dry' in opts ? opts.dry : false;
      if (this.childCount === 0) {
        this[_textPainter$].setPlaceholderDimensions(T.JSArrayOfPlaceholderDimensions().of([]));
        return T.JSArrayOfPlaceholderDimensions().of([]);
      }
      let child = this.firstChild;
      let placeholderDimensions = T.ListOfPlaceholderDimensions().filled(this.childCount, text_painter.PlaceholderDimensions.empty);
      let childIndex = 0;
      let boxConstraints = new box.BoxConstraints.new({maxWidth: constraints.maxWidth});
      boxConstraints = boxConstraints['/'](this.textScaleFactor);
      while (child != null) {
        let baselineOffset = null;
        let childSize = null;
        if (!dry) {
          child.layout(boxConstraints, {parentUsesSize: true});
          childSize = child.size;
          switch (this[_placeholderSpans$][$_get](childIndex).alignment) {
            case C[8] || CT.C8:
              {
                baselineOffset = child.getDistanceToBaseline(dart.nullCheck(this[_placeholderSpans$][$_get](childIndex).baseline));
                break;
              }
            case C[9] || CT.C9:
            case C[10] || CT.C10:
            case C[13] || CT.C13:
            case C[12] || CT.C12:
            case C[11] || CT.C11:
              {
                baselineOffset = null;
                break;
              }
          }
        } else {
          if (!(this[_placeholderSpans$][$_get](childIndex).alignment !== ui.PlaceholderAlignment.baseline)) dart.assertFailed(null, I[2], 2286, 16, "_placeholderSpans[childIndex].alignment != ui.PlaceholderAlignment.baseline");
          childSize = child.getDryLayout(boxConstraints);
        }
        placeholderDimensions[$_set](childIndex, new text_painter.PlaceholderDimensions.new({size: childSize, alignment: this[_placeholderSpans$][$_get](childIndex).alignment, baseline: this[_placeholderSpans$][$_get](childIndex).baseline, baselineOffset: baselineOffset}));
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      return placeholderDimensions;
    }
    [_setParentData$]() {
      let child = this.firstChild;
      let childIndex = 0;
      while (child != null && childIndex < dart.nullCheck(this[_textPainter$].inlinePlaceholderBoxes)[$length]) {
        let textParentData = paragraph$.TextParentData.as(dart.nullCheck(child.parentData));
        textParentData.offset = new ui.Offset.new(dart.nullCheck(this[_textPainter$].inlinePlaceholderBoxes)[$_get](childIndex).left, dart.nullCheck(this[_textPainter$].inlinePlaceholderBoxes)[$_get](childIndex).top);
        textParentData.scale = dart.nullCheck(this[_textPainter$].inlinePlaceholderScales)[$_get](childIndex);
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
    }
    [_layoutText$](opts) {
      let minWidth = opts && 'minWidth' in opts ? opts.minWidth : 0;
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : 1 / 0;
      if (!(maxWidth !== null && minWidth !== null)) dart.assertFailed(null, I[2], 2317, 12, "maxWidth != null && minWidth != null");
      let availableMaxWidth = math.max(core.double, 0.0, maxWidth - this[_caretMargin]);
      let availableMinWidth = math.min(core.double, minWidth, availableMaxWidth);
      let textMaxWidth = this[_isMultiline] ? availableMaxWidth : 1 / 0;
      let textMinWidth = this.forceLine ? availableMaxWidth : availableMinWidth;
      this[_textPainter$].layout({minWidth: textMinWidth, maxWidth: textMaxWidth});
      this[_textLayoutLastMinWidth] = minWidth;
      this[_textLayoutLastMaxWidth] = maxWidth;
    }
    [_computeTextMetricsIfNeeded]() {
      if (!(this.constraints !== null)) dart.assertFailed(null, I[2], 2350, 12, "constraints != null");
      this[_layoutText$]({minWidth: this.constraints.minWidth, maxWidth: this.constraints.maxWidth});
    }
    set [_caretPrototype](_caretPrototype$35param) {
      this[__RenderEditable__caretPrototype] = _caretPrototype$35param;
    }
    get [_caretPrototype]() {
      let t27;
      t27 = this[__RenderEditable__caretPrototype];
      return t27 == null ? dart.throw(new _internal.LateError.fieldNI("_caretPrototype")) : t27;
    }
    [_computeCaretPrototype]() {
      if (!(platform.defaultTargetPlatform !== null)) dart.assertFailed(null, I[2], 2368, 12, "defaultTargetPlatform != null");
      switch (platform.defaultTargetPlatform) {
        case C[52] || CT.C52:
        case C[55] || CT.C55:
          {
            this[_caretPrototype] = new ui.Rect.fromLTWH(0.0, 0.0, this.cursorWidth, this.cursorHeight + 2);
            break;
          }
        case C[53] || CT.C53:
        case C[54] || CT.C54:
        case C[56] || CT.C56:
        case C[57] || CT.C57:
          {
            this[_caretPrototype] = new ui.Rect.fromLTWH(0.0, 2, this.cursorWidth, this.cursorHeight - 2.0 * 2);
            break;
          }
      }
    }
    [_snapToPhysicalPixel](sourceOffset) {
      let globalOffset = this.localToGlobal(sourceOffset);
      let pixelMultiple = 1.0 / this[_devicePixelRatio];
      return new ui.Offset.new(globalOffset.dx[$isFinite] ? (globalOffset.dx / pixelMultiple)[$round]() * pixelMultiple - globalOffset.dx : 0.0, globalOffset.dy[$isFinite] ? (globalOffset.dy / pixelMultiple)[$round]() * pixelMultiple - globalOffset.dy : 0.0);
    }
    [_canComputeDryLayout$]() {
      for (let span of this[_placeholderSpans$]) {
        switch (span.alignment) {
          case C[8] || CT.C8:
          case C[9] || CT.C9:
          case C[10] || CT.C10:
            {
              return false;
            }
          case C[11] || CT.C11:
          case C[12] || CT.C12:
          case C[13] || CT.C13:
            {
              continue;
            }
        }
      }
      return true;
    }
    computeDryLayout(constraints) {
      if (!this[_canComputeDryLayout$]()) {
        if (!this.debugCannotComputeDryLayout({reason: "Dry layout not available for alignments that require baseline."})) dart.assertFailed(null, I[2], 2420, 14, "debugCannotComputeDryLayout(\r\n        reason: 'Dry layout not available for alignments that require baseline.',\r\n      )");
        return ui.Size.zero;
      }
      this[_textPainter$].setPlaceholderDimensions(this[_layoutChildren$](constraints, {dry: true}));
      this[_layoutText$]({minWidth: constraints.minWidth, maxWidth: constraints.maxWidth});
      let width = this.forceLine ? constraints.maxWidth : constraints.constrainWidth(this[_textPainter$].size.width + this[_caretMargin]);
      return new ui.Size.new(width, constraints.constrainHeight(this[_preferredHeight](constraints.maxWidth)));
    }
    performLayout() {
      let t27, t27$;
      let constraints = this.constraints;
      this[_placeholderDimensions$] = this[_layoutChildren$](constraints);
      this[_textPainter$].setPlaceholderDimensions(this[_placeholderDimensions$]);
      this[_computeTextMetricsIfNeeded]();
      this[_setParentData$]();
      this[_computeCaretPrototype]();
      let textPainterSize = this[_textPainter$].size;
      let width = this.forceLine ? constraints.maxWidth : constraints.constrainWidth(this[_textPainter$].size.width + this[_caretMargin]);
      let preferredHeight = this[_preferredHeight](constraints.maxWidth);
      this.size = new ui.Size.new(width, constraints.constrainHeight(preferredHeight));
      let contentSize = new ui.Size.new(textPainterSize.width + this[_caretMargin], textPainterSize.height);
      let painterConstraints = new box.BoxConstraints.tight(contentSize);
      t27 = this[_foregroundRenderObject];
      t27 == null ? null : t27.layout(painterConstraints);
      t27$ = this[_backgroundRenderObject];
      t27$ == null ? null : t27$.layout(painterConstraints);
      this[_maxScrollExtent] = this[_getMaxScrollExtent](contentSize);
      this.offset.applyViewportDimension(this[_viewportExtent]);
      this.offset.applyContentDimensions(0.0, this[_maxScrollExtent]);
    }
    calculateBoundedFloatingCursorOffset(rawCursorOffset) {
      let deltaPosition = ui.Offset.zero;
      let topBound = -this.floatingCursorAddedMargin.top;
      let bottomBound = this[_textPainter$].height - this.preferredLineHeight + this.floatingCursorAddedMargin.bottom;
      let leftBound = -this.floatingCursorAddedMargin.left;
      let rightBound = this[_textPainter$].width + this.floatingCursorAddedMargin.right;
      if (this[_previousOffset] != null) {
        deltaPosition = rawCursorOffset['-'](dart.nullCheck(this[_previousOffset]));
      }
      if (this[_resetOriginOnLeft] && deltaPosition.dx > 0) {
        this[_relativeOrigin] = new ui.Offset.new(rawCursorOffset.dx - leftBound, this[_relativeOrigin].dy);
        this[_resetOriginOnLeft] = false;
      } else if (this[_resetOriginOnRight] && deltaPosition.dx < 0) {
        this[_relativeOrigin] = new ui.Offset.new(rawCursorOffset.dx - rightBound, this[_relativeOrigin].dy);
        this[_resetOriginOnRight] = false;
      }
      if (this[_resetOriginOnTop] && deltaPosition.dy > 0) {
        this[_relativeOrigin] = new ui.Offset.new(this[_relativeOrigin].dx, rawCursorOffset.dy - topBound);
        this[_resetOriginOnTop] = false;
      } else if (this[_resetOriginOnBottom] && deltaPosition.dy < 0) {
        this[_relativeOrigin] = new ui.Offset.new(this[_relativeOrigin].dx, rawCursorOffset.dy - bottomBound);
        this[_resetOriginOnBottom] = false;
      }
      let currentX = rawCursorOffset.dx - this[_relativeOrigin].dx;
      let currentY = rawCursorOffset.dy - this[_relativeOrigin].dy;
      let adjustedX = math.min(core.double, math.max(core.double, currentX, leftBound), rightBound);
      let adjustedY = math.min(core.double, math.max(core.double, currentY, topBound), bottomBound);
      let adjustedOffset = new ui.Offset.new(adjustedX, adjustedY);
      if (currentX < leftBound && deltaPosition.dx < 0) {
        this[_resetOriginOnLeft] = true;
      } else if (currentX > rightBound && deltaPosition.dx > 0) {
        this[_resetOriginOnRight] = true;
      }
      if (currentY < topBound && deltaPosition.dy < 0) {
        this[_resetOriginOnTop] = true;
      } else if (currentY > bottomBound && deltaPosition.dy > 0) {
        this[_resetOriginOnBottom] = true;
      }
      this[_previousOffset] = rawCursorOffset;
      return adjustedOffset;
    }
    setFloatingCursor(state, boundedOffset, lastTextPosition, opts) {
      let resetLerpValue = opts && 'resetLerpValue' in opts ? opts.resetLerpValue : null;
      if (!(state !== null)) dart.assertFailed(null, I[2], 2530, 12, "state != null");
      if (!(boundedOffset !== null)) dart.assertFailed(null, I[2], 2531, 12, "boundedOffset != null");
      if (!(lastTextPosition !== null)) dart.assertFailed(null, I[2], 2532, 12, "lastTextPosition != null");
      if (state === text_input.FloatingCursorDragState.Start) {
        this[_relativeOrigin] = ui.Offset.zero;
        this[_previousOffset] = null;
        this[_resetOriginOnBottom] = false;
        this[_resetOriginOnTop] = false;
        this[_resetOriginOnRight] = false;
        this[_resetOriginOnBottom] = false;
      }
      this[_floatingCursorOn] = state !== text_input.FloatingCursorDragState.End;
      this[_resetFloatingCursorAnimationValue] = resetLerpValue;
      if (this[_floatingCursorOn]) {
        this[_floatingCursorTextPosition] = lastTextPosition;
        let animationValue = this[_resetFloatingCursorAnimationValue];
        let sizeAdjustment = animationValue != null ? dart.nullCheck(edge_insets.EdgeInsets.lerp(editable._kFloatingCaretSizeIncrease, edge_insets.EdgeInsets.zero, animationValue)) : editable._kFloatingCaretSizeIncrease;
        this[_caretPainter].floatingCursorRect = sizeAdjustment.inflateRect(this[_caretPrototype]).shift(boundedOffset);
      } else {
        this[_caretPainter].floatingCursorRect = null;
      }
      this[_caretPainter].showRegularCaret = this[_resetFloatingCursorAnimationValue] == null;
    }
    [_lineNumberFor](startPosition, metrics) {
      let offset = this[_textPainter$].getOffsetForCaret(startPosition, ui.Rect.zero);
      for (let lineMetrics of metrics) {
        if (lineMetrics.baseline > offset.dy) {
          return new (T.MapEntryOfint$Offset()).__(lineMetrics.lineNumber, new ui.Offset.new(offset.dx, lineMetrics.baseline));
        }
      }
      if (!(startPosition.offset === 0)) dart.assertFailed("unable to find the line for " + dart.str(startPosition), I[2], 2565, 12, "startPosition.offset == 0");
      return new (T.MapEntryOfint$Offset()).__(math.max(core.int, 0, metrics[$length] - 1), new ui.Offset.new(offset.dx, metrics[$isNotEmpty] ? metrics[$last].baseline + metrics[$last].descent : 0.0));
    }
    startVerticalCaretMovement(startPosition) {
      let metrics = this[_textPainter$].computeLineMetrics();
      let currentLine = this[_lineNumberFor](startPosition, metrics);
      return new editable.VerticalCaretMovementRun.__(this, metrics, startPosition, currentLine.key, currentLine.value);
    }
    [_paintContents](context, offset) {
      this.debugAssertLayoutUpToDate();
      let effectiveOffset = offset['+'](this[_paintOffset]);
      if (this.selection != null && !this[_floatingCursorOn]) {
        this[_updateSelectionExtentsVisibility](effectiveOffset);
      }
      let foregroundChild = this[_foregroundRenderObject];
      let backgroundChild = this[_backgroundRenderObject];
      if (backgroundChild != null) {
        context.paintChild(backgroundChild, offset);
      }
      this[_textPainter$].paint(context.canvas, effectiveOffset);
      let child = this.firstChild;
      let childIndex = 0;
      while (child != null && childIndex < dart.nullCheck(this[_textPainter$].inlinePlaceholderBoxes)[$length]) {
        let textParentData = paragraph$.TextParentData.as(dart.nullCheck(child.parentData));
        let scale = dart.nullCheck(textParentData.scale);
        context.pushTransform(this.needsCompositing, effectiveOffset['+'](textParentData.offset), vector_math_64.Matrix4.diagonal3Values(scale, scale, scale), dart.fn((context, offset) => {
          context.paintChild(dart.nullCheck(child), offset);
        }, T.PaintingContextAndOffsetTovoid()));
        child = this.childAfter(child);
        childIndex = childIndex + 1;
      }
      if (foregroundChild != null) {
        context.paintChild(foregroundChild, offset);
      }
    }
    [_paintHandleLayers](context, endpoints, offset) {
      let startPoint = endpoints[$_get](0).point;
      startPoint = new ui.Offset.new(math$.clampDouble(startPoint.dx, 0.0, this.size.width), math$.clampDouble(startPoint.dy, 0.0, this.size.height));
      context.pushLayer(new layer.LeaderLayer.new({link: this.startHandleLayerLink, offset: startPoint['+'](offset)}), dart.bind(this, 'paint', super.paint), ui.Offset.zero);
      if (endpoints[$length] === 2) {
        let endPoint = endpoints[$_get](1).point;
        endPoint = new ui.Offset.new(math$.clampDouble(endPoint.dx, 0.0, this.size.width), math$.clampDouble(endPoint.dy, 0.0, this.size.height));
        context.pushLayer(new layer.LeaderLayer.new({link: this.endHandleLayerLink, offset: endPoint['+'](offset)}), dart.bind(this, 'paint', super.paint), ui.Offset.zero);
      }
    }
    paint(context, offset) {
      this[_computeTextMetricsIfNeeded]();
      if (this[_hasVisualOverflow] && this.clipBehavior !== ui.Clip.none) {
        this[_clipRectLayer].layer = context.pushClipRect(this.needsCompositing, offset, ui.Offset.zero['&'](this.size), dart.bind(this, _paintContents), {clipBehavior: this.clipBehavior, oldLayer: this[_clipRectLayer].layer});
      } else {
        this[_clipRectLayer].layer = null;
        this[_paintContents](context, offset);
      }
      let selection = this.selection;
      if (selection != null && selection.isValid) {
        this[_paintHandleLayers](context, this.getEndpointsForSelection(selection), offset);
      }
    }
    describeApproximatePaintClip(child) {
      object.RenderObject.as(child);
      switch (this.clipBehavior) {
        case C[58] || CT.C58:
          {
            return null;
          }
        case C[47] || CT.C47:
        case C[59] || CT.C59:
        case C[60] || CT.C60:
          {
            return this[_hasVisualOverflow] ? ui.Offset.zero['&'](this.size) : null;
          }
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(new colors.ColorProperty.new("cursorColor", this.cursorColor));
      properties.add(new (T.DiagnosticsPropertyOfValueNotifierOfbool()).new("showCursor", this.showCursor));
      properties.add(new diagnostics.IntProperty.new("maxLines", this.maxLines));
      properties.add(new diagnostics.IntProperty.new("minLines", this.minLines));
      properties.add(new (T.DiagnosticsPropertyOfbool()).new("expands", this.expands, {defaultValue: false}));
      properties.add(new colors.ColorProperty.new("selectionColor", this.selectionColor));
      properties.add(new diagnostics.DoubleProperty.new("textScaleFactor", this.textScaleFactor));
      properties.add(new (T.DiagnosticsPropertyOfLocale()).new("locale", this.locale, {defaultValue: null}));
      properties.add(new (T.DiagnosticsPropertyOfTextSelection()).new("selection", this.selection));
      properties.add(new (T.DiagnosticsPropertyOfViewportOffset()).new("offset", this.offset));
    }
    debugDescribeChildren() {
      return (() => {
        let t27 = T.JSArrayOfDiagnosticsNode().of([]);
        if (this.text != null) t27.push(dart.nullCheck(this.text).toDiagnosticsNode({name: "text", style: diagnostics.DiagnosticsTreeStyle.transition}));
        return t27;
      })();
    }
  };
  (editable.RenderEditable.new = function(opts) {
    let t19, t19$;
    let text = opts && 'text' in opts ? opts.text : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : C[0] || CT.C0;
    let cursorColor = opts && 'cursorColor' in opts ? opts.cursorColor : null;
    let backgroundCursorColor = opts && 'backgroundCursorColor' in opts ? opts.backgroundCursorColor : null;
    let showCursor = opts && 'showCursor' in opts ? opts.showCursor : null;
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : null;
    let startHandleLayerLink = opts && 'startHandleLayerLink' in opts ? opts.startHandleLayerLink : null;
    let endHandleLayerLink = opts && 'endHandleLayerLink' in opts ? opts.endHandleLayerLink : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : 1;
    let minLines = opts && 'minLines' in opts ? opts.minLines : null;
    let expands = opts && 'expands' in opts ? opts.expands : false;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let selectionColor = opts && 'selectionColor' in opts ? opts.selectionColor : null;
    let textScaleFactor = opts && 'textScaleFactor' in opts ? opts.textScaleFactor : 1;
    let selection = opts && 'selection' in opts ? opts.selection : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let onCaretChanged = opts && 'onCaretChanged' in opts ? opts.onCaretChanged : null;
    let ignorePointer = opts && 'ignorePointer' in opts ? opts.ignorePointer : false;
    let readOnly = opts && 'readOnly' in opts ? opts.readOnly : false;
    let forceLine = opts && 'forceLine' in opts ? opts.forceLine : true;
    let textHeightBehavior = opts && 'textHeightBehavior' in opts ? opts.textHeightBehavior : null;
    let textWidthBasis = opts && 'textWidthBasis' in opts ? opts.textWidthBasis : C[2] || CT.C2;
    let obscuringCharacter = opts && 'obscuringCharacter' in opts ? opts.obscuringCharacter : "•";
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let cursorWidth = opts && 'cursorWidth' in opts ? opts.cursorWidth : 1;
    let cursorHeight = opts && 'cursorHeight' in opts ? opts.cursorHeight : null;
    let cursorRadius = opts && 'cursorRadius' in opts ? opts.cursorRadius : null;
    let paintCursorAboveText = opts && 'paintCursorAboveText' in opts ? opts.paintCursorAboveText : false;
    let cursorOffset = opts && 'cursorOffset' in opts ? opts.cursorOffset : C[45] || CT.C45;
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : 1;
    let selectionHeightStyle = opts && 'selectionHeightStyle' in opts ? opts.selectionHeightStyle : C[26] || CT.C26;
    let selectionWidthStyle = opts && 'selectionWidthStyle' in opts ? opts.selectionWidthStyle : C[27] || CT.C27;
    let enableInteractiveSelection = opts && 'enableInteractiveSelection' in opts ? opts.enableInteractiveSelection : null;
    let floatingCursorAddedMargin = opts && 'floatingCursorAddedMargin' in opts ? opts.floatingCursorAddedMargin : C[46] || CT.C46;
    let promptRectRange = opts && 'promptRectRange' in opts ? opts.promptRectRange : null;
    let promptRectColor = opts && 'promptRectColor' in opts ? opts.promptRectColor : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[47] || CT.C47;
    let textSelectionDelegate = opts && 'textSelectionDelegate' in opts ? opts.textSelectionDelegate : null;
    let painter = opts && 'painter' in opts ? opts.painter : null;
    let foregroundPainter = opts && 'foregroundPainter' in opts ? opts.foregroundPainter : null;
    let children = opts && 'children' in opts ? opts.children : null;
    this[_foregroundRenderObject] = null;
    this[_backgroundRenderObject] = null;
    this[__RenderEditable__placeholderSpans] = null;
    this[_foregroundPainter] = null;
    this[_painter] = null;
    this[__RenderEditable__caretPainter] = null;
    this[_selectionPainter] = new editable._TextHighlightPainter.new();
    this[_autocorrectHighlightPainter] = new editable._TextHighlightPainter.new();
    this[_cachedBuiltInForegroundPainters] = null;
    this[_cachedBuiltInPainters] = null;
    this[_textLayoutLastMaxWidth] = null;
    this[_textLayoutLastMinWidth] = null;
    this[_lastCaretRect] = null;
    this[_selectionStartInViewport] = new (T.ValueNotifierOfbool()).new(true);
    this[_selectionEndInViewport] = new (T.ValueNotifierOfbool()).new(true);
    this[_cachedAttributedValue] = null;
    this[_cachedCombinedSemanticsInfos$] = null;
    this[_hasFocus] = false;
    this[_forceLine] = false;
    this[_readOnly] = false;
    this[_cursorWidth] = 1.0;
    this[_floatingCursorOn] = false;
    this[__RenderEditable__floatingCursorTextPosition] = null;
    this[_maxScrollExtent] = 0.0;
    this[_clipBehavior] = ui.Clip.hardEdge;
    this[_semanticsInfo$] = null;
    this[_cachedChildNodes$] = null;
    this[_cachedLineBreakCount] = null;
    this[__RenderEditable__tap] = null;
    this[__RenderEditable__longPress] = null;
    this[_lastTapDownPosition] = null;
    this[_lastSecondaryTapDownPosition] = null;
    this[_placeholderDimensions$] = null;
    this[__RenderEditable__caretPrototype] = null;
    this[_relativeOrigin] = ui.Offset.zero;
    this[_previousOffset] = null;
    this[_resetOriginOnLeft] = false;
    this[_resetOriginOnRight] = false;
    this[_resetOriginOnTop] = false;
    this[_resetOriginOnBottom] = false;
    this[_resetFloatingCursorAnimationValue] = null;
    this[_clipRectLayer] = new (T.LayerHandleOfClipRectLayer()).new();
    this[onCaretChanged$] = onCaretChanged;
    this[ignorePointer$] = ignorePointer;
    this[floatingCursorAddedMargin$] = floatingCursorAddedMargin;
    this[textSelectionDelegate$] = textSelectionDelegate;
    if (!(textAlign !== null)) dart.assertFailed(null, I[2], 328, 15, "textAlign != null");
    if (!(textDirection !== null)) dart.assertFailed("RenderEditable created without a textDirection.", I[2], 329, 15, "textDirection != null");
    if (!(maxLines == null || dart.notNull(maxLines) > 0)) dart.assertFailed(null, I[2], 330, 15, "maxLines == null || maxLines > 0");
    if (!(minLines == null || dart.notNull(minLines) > 0)) dart.assertFailed(null, I[2], 331, 15, "minLines == null || minLines > 0");
    if (!(startHandleLayerLink !== null)) dart.assertFailed(null, I[2], 332, 15, "startHandleLayerLink != null");
    if (!(endHandleLayerLink !== null)) dart.assertFailed(null, I[2], 333, 15, "endHandleLayerLink != null");
    if (!(maxLines == null || minLines == null || dart.notNull(maxLines) >= dart.notNull(minLines))) dart.assertFailed("minLines can't be greater than maxLines", I[2], 335, 10, "(maxLines == null) || (minLines == null) || (maxLines >= minLines)");
    if (!(expands !== null)) dart.assertFailed(null, I[2], 338, 15, "expands != null");
    if (!(!expands || maxLines == null && minLines == null)) dart.assertFailed("minLines and maxLines must be null when expands is true.", I[2], 340, 10, "!expands || (maxLines == null && minLines == null)");
    if (!(textScaleFactor !== null)) dart.assertFailed(null, I[2], 343, 15, "textScaleFactor != null");
    if (!(offset !== null)) dart.assertFailed(null, I[2], 344, 15, "offset != null");
    if (!(ignorePointer !== null)) dart.assertFailed(null, I[2], 345, 15, "ignorePointer != null");
    if (!(textWidthBasis !== null)) dart.assertFailed(null, I[2], 346, 15, "textWidthBasis != null");
    if (!(paintCursorAboveText !== null)) dart.assertFailed(null, I[2], 347, 15, "paintCursorAboveText != null");
    if (!(obscuringCharacter !== null && extensions['StringCharacters|get#characters'](obscuringCharacter)[$length] === 1)) dart.assertFailed(null, I[2], 348, 15, "obscuringCharacter != null && obscuringCharacter.characters.length == 1");
    if (!(obscureText !== null)) dart.assertFailed(null, I[2], 349, 15, "obscureText != null");
    if (!(textSelectionDelegate !== null)) dart.assertFailed(null, I[2], 350, 15, "textSelectionDelegate != null");
    if (!(cursorWidth !== null && cursorWidth >= 0.0)) dart.assertFailed(null, I[2], 351, 15, "cursorWidth != null && cursorWidth >= 0.0");
    if (!(cursorHeight == null || dart.notNull(cursorHeight) >= 0.0)) dart.assertFailed(null, I[2], 352, 15, "cursorHeight == null || cursorHeight >= 0.0");
    if (!(readOnly !== null)) dart.assertFailed(null, I[2], 353, 15, "readOnly != null");
    if (!(forceLine !== null)) dart.assertFailed(null, I[2], 354, 15, "forceLine != null");
    if (!(devicePixelRatio !== null)) dart.assertFailed(null, I[2], 355, 15, "devicePixelRatio != null");
    if (!(selectionHeightStyle !== null)) dart.assertFailed(null, I[2], 356, 15, "selectionHeightStyle != null");
    if (!(selectionWidthStyle !== null)) dart.assertFailed(null, I[2], 357, 15, "selectionWidthStyle != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[2], 358, 15, "clipBehavior != null");
    this[_textPainter$] = new text_painter.TextPainter.new({text: text, textAlign: textAlign, textDirection: textDirection, textScaleFactor: textScaleFactor, locale: locale, maxLines: maxLines === 1 ? 1 : null, strutStyle: strutStyle, textHeightBehavior: textHeightBehavior, textWidthBasis: textWidthBasis});
    this[_showCursor] = (t19 = showCursor, t19 == null ? new (T.ValueNotifierOfbool()).new(false) : t19);
    this[_maxLines] = maxLines;
    this[_minLines] = minLines;
    this[_expands] = expands;
    this[_selection] = selection;
    this[_offset] = offset;
    this[_cursorWidth] = cursorWidth;
    this[_cursorHeight] = cursorHeight;
    this[_paintCursorOnTop] = paintCursorAboveText;
    this[_enableInteractiveSelection] = enableInteractiveSelection;
    this[_devicePixelRatio] = devicePixelRatio;
    this[_startHandleLayerLink$] = startHandleLayerLink;
    this[_endHandleLayerLink$] = endHandleLayerLink;
    this[_obscuringCharacter] = obscuringCharacter;
    this[_obscureText] = obscureText;
    this[_readOnly] = readOnly;
    this[_forceLine] = forceLine;
    this[_clipBehavior] = clipBehavior;
    this[_hasFocus] = (t19$ = hasFocus, t19$ == null ? false : t19$);
    editable.RenderEditable.__proto__.new.call(this);
    if (!(this[_showCursor] !== null)) dart.assertFailed(null, I[2], 389, 12, "_showCursor != null");
    if (!(!this[_showCursor].value || cursorColor != null)) dart.assertFailed(null, I[2], 390, 12, "!_showCursor.value || cursorColor != null");
    this[_selectionPainter].highlightColor = selectionColor;
    this[_selectionPainter].highlightedRange = selection;
    this[_selectionPainter].selectionHeightStyle = selectionHeightStyle;
    this[_selectionPainter].selectionWidthStyle = selectionWidthStyle;
    this[_autocorrectHighlightPainter].highlightColor = promptRectColor;
    this[_autocorrectHighlightPainter].highlightedRange = promptRectRange;
    this[_caretPainter].caretColor = cursorColor;
    this[_caretPainter].cursorRadius = cursorRadius;
    this[_caretPainter].cursorOffset = cursorOffset;
    this[_caretPainter].backgroundCursorColor = backgroundCursorColor;
    this[_updateForegroundPainter](foregroundPainter);
    this[_updatePainter](painter);
    this.addAll(children);
    this[_extractPlaceholderSpans$](text);
  }).prototype = editable.RenderEditable.prototype;
  dart.addTypeTests(editable.RenderEditable);
  dart.addTypeCaches(editable.RenderEditable);
  editable.RenderEditable[dart.implements] = () => [text_layout_metrics.TextLayoutMetrics];
  dart.setMethodSignature(editable.RenderEditable, () => ({
    __proto__: dart.getMethods(editable.RenderEditable.__proto__),
    [_updateForegroundPainter]: dart.fnType(dart.void, [dart.nullable(editable.RenderEditablePainter)]),
    [_extractPlaceholderSpans$]: dart.fnType(dart.void, [dart.nullable(inline_span.InlineSpan)]),
    [_updatePainter]: dart.fnType(dart.void, [dart.nullable(editable.RenderEditablePainter)]),
    [_createBuiltInForegroundPainters]: dart.fnType(editable._CompositeRenderEditablePainter, []),
    [_createBuiltInPainters]: dart.fnType(editable._CompositeRenderEditablePainter, []),
    debugAssertLayoutUpToDate: dart.fnType(dart.void, []),
    [_onCaretChanged]: dart.fnType(dart.void, [ui.Rect]),
    [_getTextPositionVertical$]: dart.fnType(ui.TextPosition, [ui.TextPosition, core.double]),
    getLineAtOffset: dart.fnType(text_editing.TextSelection, [ui.TextPosition]),
    getWordBoundary: dart.fnType(ui.TextRange, [ui.TextPosition]),
    getTextPositionAbove: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTextPositionBelow: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    [_updateSelectionExtentsVisibility]: dart.fnType(dart.void, [ui.Offset]),
    [_setTextEditingValue]: dart.fnType(dart.void, [text_input.TextEditingValue, text_input.SelectionChangedCause]),
    [_setSelection]: dart.fnType(dart.void, [text_editing.TextSelection, text_input.SelectionChangedCause]),
    markNeedsTextLayout: dart.fnType(dart.void, []),
    [_showHideCursor]: dart.fnType(dart.void, []),
    setPromptRectRange: dart.fnType(dart.void, [dart.nullable(ui.TextRange)]),
    getBoxesForSelection: dart.fnType(core.List$(ui.Rect), [text_editing.TextSelection]),
    [_handleSetText]: dart.fnType(dart.void, [core.String]),
    [_createShowOnScreenFor$]: dart.fnType(dart.nullable(dart.fnType(dart.void, [])), [key$.Key]),
    [_handleSetSelection]: dart.fnType(dart.void, [text_editing.TextSelection]),
    [_handleMoveCursorForwardByCharacter]: dart.fnType(dart.void, [core.bool]),
    [_handleMoveCursorBackwardByCharacter]: dart.fnType(dart.void, [core.bool]),
    [_handleMoveCursorForwardByWord]: dart.fnType(dart.void, [core.bool]),
    [_handleMoveCursorBackwardByWord]: dart.fnType(dart.void, [core.bool]),
    [_getNextWord]: dart.fnType(dart.nullable(ui.TextRange), [core.int]),
    [_getPreviousWord]: dart.fnType(dart.nullable(ui.TextRange), [core.int]),
    [_onlyWhitespace]: dart.fnType(core.bool, [ui.TextRange]),
    [_getMaxScrollExtent]: dart.fnType(core.double, [ui.Size]),
    getEndpointsForSelection: dart.fnType(core.List$(editable.TextSelectionPoint), [text_editing.TextSelection]),
    getRectForComposingRange: dart.fnType(dart.nullable(ui.Rect), [ui.TextRange]),
    getPositionForPoint: dart.fnType(ui.TextPosition, [ui.Offset]),
    getLocalRectForCaret: dart.fnType(ui.Rect, [ui.TextPosition]),
    [_countHardLineBreaks]: dart.fnType(core.int, [core.String]),
    [_preferredHeight]: dart.fnType(core.double, [core.double]),
    computeDistanceToActualBaseline: dart.fnType(core.double, [ui.TextBaseline]),
    handleSecondaryTapDown: dart.fnType(dart.void, [tap.TapDownDetails]),
    handleTapDown: dart.fnType(dart.void, [tap.TapDownDetails]),
    [_handleTapDown]: dart.fnType(dart.void, [tap.TapDownDetails]),
    handleTap: dart.fnType(dart.void, []),
    [_handleTap]: dart.fnType(dart.void, []),
    handleDoubleTap: dart.fnType(dart.void, []),
    handleLongPress: dart.fnType(dart.void, []),
    [_handleLongPress]: dart.fnType(dart.void, []),
    selectPosition: dart.fnType(dart.void, [], {}, {cause: text_input.SelectionChangedCause}),
    selectPositionAt: dart.fnType(dart.void, [], {to: dart.nullable(ui.Offset)}, {cause: text_input.SelectionChangedCause, from: ui.Offset}),
    selectWord: dart.fnType(dart.void, [], {}, {cause: text_input.SelectionChangedCause}),
    selectWordsInRange: dart.fnType(dart.void, [], {to: dart.nullable(ui.Offset)}, {cause: text_input.SelectionChangedCause, from: ui.Offset}),
    selectWordEdge: dart.fnType(dart.void, [], {}, {cause: text_input.SelectionChangedCause}),
    [_getWordAtOffset]: dart.fnType(text_editing.TextSelection, [ui.TextPosition]),
    [_layoutChildren$]: dart.fnType(core.List$(text_painter.PlaceholderDimensions), [box.BoxConstraints], {dry: core.bool}, {}),
    [_setParentData$]: dart.fnType(dart.void, []),
    [_layoutText$]: dart.fnType(dart.void, [], {maxWidth: core.double, minWidth: core.double}, {}),
    [_computeTextMetricsIfNeeded]: dart.fnType(dart.void, []),
    [_computeCaretPrototype]: dart.fnType(dart.void, []),
    [_snapToPhysicalPixel]: dart.fnType(ui.Offset, [ui.Offset]),
    [_canComputeDryLayout$]: dart.fnType(core.bool, []),
    calculateBoundedFloatingCursorOffset: dart.fnType(ui.Offset, [ui.Offset]),
    setFloatingCursor: dart.fnType(dart.void, [text_input.FloatingCursorDragState, ui.Offset, ui.TextPosition], {resetLerpValue: dart.nullable(core.double)}, {}),
    [_lineNumberFor]: dart.fnType(core.MapEntry$(core.int, ui.Offset), [ui.TextPosition, core.List$(ui.LineMetrics)]),
    startVerticalCaretMovement: dart.fnType(editable.VerticalCaretMovementRun, [ui.TextPosition]),
    [_paintContents]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset]),
    [_paintHandleLayers]: dart.fnType(dart.void, [object.PaintingContext, core.List$(editable.TextSelectionPoint), ui.Offset])
  }));
  dart.setGetterSignature(editable.RenderEditable, () => ({
    __proto__: dart.getGetters(editable.RenderEditable.__proto__),
    [_placeholderSpans$]: core.List$(placeholder_span.PlaceholderSpan),
    foregroundPainter: dart.nullable(editable.RenderEditablePainter),
    painter: dart.nullable(editable.RenderEditablePainter),
    [_caretPainter]: editable._FloatingCursorPainter,
    [_builtInForegroundPainters]: editable._CompositeRenderEditablePainter,
    [_builtInPainters]: editable._CompositeRenderEditablePainter,
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    textWidthBasis: text_painter.TextWidthBasis,
    devicePixelRatio: core.double,
    obscuringCharacter: core.String,
    obscureText: core.bool,
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle,
    selectionStartInViewport: change_notifier.ValueListenable$(core.bool),
    selectionEndInViewport: change_notifier.ValueListenable$(core.bool),
    plainText: core.String,
    text: dart.nullable(inline_span.InlineSpan),
    textAlign: ui.TextAlign,
    textDirection: ui.TextDirection,
    locale: dart.nullable(ui.Locale),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    cursorColor: dart.nullable(ui.Color),
    backgroundCursorColor: dart.nullable(ui.Color),
    showCursor: change_notifier.ValueNotifier$(core.bool),
    hasFocus: core.bool,
    forceLine: core.bool,
    readOnly: core.bool,
    maxLines: dart.nullable(core.int),
    minLines: dart.nullable(core.int),
    expands: core.bool,
    selectionColor: dart.nullable(ui.Color),
    textScaleFactor: core.double,
    selection: dart.nullable(text_editing.TextSelection),
    offset: viewport_offset.ViewportOffset,
    cursorWidth: core.double,
    cursorHeight: core.double,
    paintCursorAboveText: core.bool,
    cursorOffset: ui.Offset,
    cursorRadius: dart.nullable(ui.Radius),
    startHandleLayerLink: layer.LayerLink,
    endHandleLayerLink: layer.LayerLink,
    [_floatingCursorTextPosition]: ui.TextPosition,
    enableInteractiveSelection: dart.nullable(core.bool),
    selectionEnabled: core.bool,
    promptRectColor: dart.nullable(ui.Color),
    maxScrollExtent: core.double,
    [_caretMargin]: core.double,
    clipBehavior: ui.Clip,
    [_isMultiline]: core.bool,
    [_viewportAxis]: basic_types.Axis,
    [_paintOffset]: ui.Offset,
    [_viewportExtent]: core.double,
    [_hasVisualOverflow]: core.bool,
    preferredLineHeight: core.double,
    [_tap]: tap.TapGestureRecognizer,
    [_longPress]: long_press.LongPressGestureRecognizer,
    lastSecondaryTapDownPosition: dart.nullable(ui.Offset),
    [_caretPrototype]: ui.Rect
  }));
  dart.setSetterSignature(editable.RenderEditable, () => ({
    __proto__: dart.getSetters(editable.RenderEditable.__proto__),
    [_placeholderSpans$]: core.List$(placeholder_span.PlaceholderSpan),
    foregroundPainter: dart.nullable(editable.RenderEditablePainter),
    painter: dart.nullable(editable.RenderEditablePainter),
    textHeightBehavior: dart.nullable(ui.TextHeightBehavior),
    textWidthBasis: text_painter.TextWidthBasis,
    devicePixelRatio: core.double,
    obscuringCharacter: core.String,
    obscureText: core.bool,
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle,
    text: dart.nullable(inline_span.InlineSpan),
    textAlign: ui.TextAlign,
    textDirection: ui.TextDirection,
    locale: dart.nullable(ui.Locale),
    strutStyle: dart.nullable(strut_style.StrutStyle),
    cursorColor: dart.nullable(ui.Color),
    backgroundCursorColor: dart.nullable(ui.Color),
    showCursor: change_notifier.ValueNotifier$(core.bool),
    hasFocus: core.bool,
    forceLine: core.bool,
    readOnly: core.bool,
    maxLines: dart.nullable(core.int),
    minLines: dart.nullable(core.int),
    expands: core.bool,
    selectionColor: dart.nullable(ui.Color),
    textScaleFactor: core.double,
    selection: dart.nullable(text_editing.TextSelection),
    offset: viewport_offset.ViewportOffset,
    cursorWidth: core.double,
    cursorHeight: dart.nullable(core.double),
    paintCursorAboveText: core.bool,
    cursorOffset: ui.Offset,
    cursorRadius: dart.nullable(ui.Radius),
    startHandleLayerLink: layer.LayerLink,
    endHandleLayerLink: layer.LayerLink,
    [_floatingCursorTextPosition]: ui.TextPosition,
    enableInteractiveSelection: dart.nullable(core.bool),
    promptRectColor: dart.nullable(ui.Color),
    clipBehavior: ui.Clip,
    [_tap]: tap.TapGestureRecognizer,
    [_longPress]: long_press.LongPressGestureRecognizer,
    [_caretPrototype]: ui.Rect
  }));
  dart.setLibraryUri(editable.RenderEditable, I[3]);
  dart.setFieldSignature(editable.RenderEditable, () => ({
    __proto__: dart.getFields(editable.RenderEditable.__proto__),
    [_foregroundRenderObject]: dart.fieldType(dart.nullable(editable._RenderEditableCustomPaint)),
    [_backgroundRenderObject]: dart.fieldType(dart.nullable(editable._RenderEditableCustomPaint)),
    [__RenderEditable__placeholderSpans]: dart.fieldType(dart.nullable(core.List$(placeholder_span.PlaceholderSpan))),
    [_foregroundPainter]: dart.fieldType(dart.nullable(editable.RenderEditablePainter)),
    [_painter]: dart.fieldType(dart.nullable(editable.RenderEditablePainter)),
    [__RenderEditable__caretPainter]: dart.fieldType(dart.nullable(editable._FloatingCursorPainter)),
    [_selectionPainter]: dart.finalFieldType(editable._TextHighlightPainter),
    [_autocorrectHighlightPainter]: dart.finalFieldType(editable._TextHighlightPainter),
    [_cachedBuiltInForegroundPainters]: dart.fieldType(dart.nullable(editable._CompositeRenderEditablePainter)),
    [_cachedBuiltInPainters]: dart.fieldType(dart.nullable(editable._CompositeRenderEditablePainter)),
    [_textLayoutLastMaxWidth]: dart.fieldType(dart.nullable(core.double)),
    [_textLayoutLastMinWidth]: dart.fieldType(dart.nullable(core.double)),
    [_lastCaretRect]: dart.fieldType(dart.nullable(ui.Rect)),
    onCaretChanged: dart.fieldType(dart.nullable(dart.fnType(dart.void, [ui.Rect]))),
    ignorePointer: dart.fieldType(core.bool),
    [_devicePixelRatio]: dart.fieldType(core.double),
    [_obscuringCharacter]: dart.fieldType(core.String),
    [_obscureText]: dart.fieldType(core.bool),
    textSelectionDelegate: dart.fieldType(text_input.TextSelectionDelegate),
    [_selectionStartInViewport]: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    [_selectionEndInViewport]: dart.finalFieldType(change_notifier.ValueNotifier$(core.bool)),
    [_textPainter$]: dart.finalFieldType(text_painter.TextPainter),
    [_cachedAttributedValue]: dart.fieldType(dart.nullable(semantics.AttributedString)),
    [_cachedCombinedSemanticsInfos$]: dart.fieldType(dart.nullable(core.List$(inline_span.InlineSpanSemanticsInformation))),
    [_showCursor]: dart.fieldType(change_notifier.ValueNotifier$(core.bool)),
    [_hasFocus]: dart.fieldType(core.bool),
    [_forceLine]: dart.fieldType(core.bool),
    [_readOnly]: dart.fieldType(core.bool),
    [_maxLines]: dart.fieldType(dart.nullable(core.int)),
    [_minLines]: dart.fieldType(dart.nullable(core.int)),
    [_expands]: dart.fieldType(core.bool),
    [_selection]: dart.fieldType(dart.nullable(text_editing.TextSelection)),
    [_offset]: dart.fieldType(viewport_offset.ViewportOffset),
    [_cursorWidth]: dart.fieldType(core.double),
    [_cursorHeight]: dart.fieldType(dart.nullable(core.double)),
    [_paintCursorOnTop]: dart.fieldType(core.bool),
    [_startHandleLayerLink$]: dart.fieldType(layer.LayerLink),
    [_endHandleLayerLink$]: dart.fieldType(layer.LayerLink),
    floatingCursorAddedMargin: dart.fieldType(edge_insets.EdgeInsets),
    [_floatingCursorOn]: dart.fieldType(core.bool),
    [__RenderEditable__floatingCursorTextPosition]: dart.fieldType(dart.nullable(ui.TextPosition)),
    [_enableInteractiveSelection]: dart.fieldType(dart.nullable(core.bool)),
    [_maxScrollExtent]: dart.fieldType(core.double),
    [_clipBehavior]: dart.fieldType(ui.Clip),
    [_semanticsInfo$]: dart.fieldType(dart.nullable(core.List$(inline_span.InlineSpanSemanticsInformation))),
    [_cachedChildNodes$]: dart.fieldType(dart.nullable(collection.LinkedHashMap$(key$.Key, semantics.SemanticsNode))),
    [_cachedLineBreakCount]: dart.fieldType(dart.nullable(core.int)),
    [__RenderEditable__tap]: dart.fieldType(dart.nullable(tap.TapGestureRecognizer)),
    [__RenderEditable__longPress]: dart.fieldType(dart.nullable(long_press.LongPressGestureRecognizer)),
    [_lastTapDownPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [_lastSecondaryTapDownPosition]: dart.fieldType(dart.nullable(ui.Offset)),
    [_placeholderDimensions$]: dart.fieldType(dart.nullable(core.List$(text_painter.PlaceholderDimensions))),
    [__RenderEditable__caretPrototype]: dart.fieldType(dart.nullable(ui.Rect)),
    [_relativeOrigin]: dart.fieldType(ui.Offset),
    [_previousOffset]: dart.fieldType(dart.nullable(ui.Offset)),
    [_resetOriginOnLeft]: dart.fieldType(core.bool),
    [_resetOriginOnRight]: dart.fieldType(core.bool),
    [_resetOriginOnTop]: dart.fieldType(core.bool),
    [_resetOriginOnBottom]: dart.fieldType(core.bool),
    [_resetFloatingCursorAnimationValue]: dart.fieldType(dart.nullable(core.double)),
    [_clipRectLayer]: dart.finalFieldType(layer.LayerHandle$(layer.ClipRectLayer))
  }));
  editable._RenderEditableCustomPaint = class _RenderEditableCustomPaint extends box.RenderBox {
    static ['_#new#tearOff'](opts) {
      let painter = opts && 'painter' in opts ? opts.painter : null;
      return new editable._RenderEditableCustomPaint.new({painter: painter});
    }
    get parent() {
      return T.RenderEditableN().as(super.parent);
    }
    get isRepaintBoundary() {
      return true;
    }
    get sizedByParent() {
      return true;
    }
    get painter() {
      return this[_painter];
    }
    set painter(newValue) {
      let t28, t28$, t28$0, t28$1;
      if (dart.equals(newValue, this.painter)) {
        return;
      }
      let oldPainter = this.painter;
      this[_painter] = newValue;
      if (dart.test((t28$ = (t28 = newValue, t28 == null ? null : t28.shouldRepaint(oldPainter)), t28$ == null ? true : t28$))) {
        this.markNeedsPaint();
      }
      if (this.attached) {
        t28$0 = oldPainter;
        t28$0 == null ? null : t28$0.removeListener(dart.bind(this, 'markNeedsPaint'));
        t28$1 = newValue;
        t28$1 == null ? null : t28$1.addListener(dart.bind(this, 'markNeedsPaint'));
      }
    }
    paint(context, offset) {
      let parent = this.parent;
      if (!(parent != null)) dart.assertFailed(null, I[2], 2773, 12, "parent != null");
      let painter = this.painter;
      if (painter != null && parent != null) {
        parent[_computeTextMetricsIfNeeded]();
        painter.paint(context.canvas, this.size, parent);
      }
    }
    attach(owner) {
      let t28;
      object.PipelineOwner.as(owner);
      super.attach(owner);
      t28 = this[_painter];
      t28 == null ? null : t28.addListener(dart.bind(this, 'markNeedsPaint'));
    }
    detach() {
      let t28;
      t28 = this[_painter];
      t28 == null ? null : t28.removeListener(dart.bind(this, 'markNeedsPaint'));
      super.detach();
    }
    computeDryLayout(constraints) {
      return constraints.biggest;
    }
  };
  (editable._RenderEditableCustomPaint.new = function(opts) {
    let painter = opts && 'painter' in opts ? opts.painter : null;
    this[_painter] = painter;
    editable._RenderEditableCustomPaint.__proto__.new.call(this);
    ;
  }).prototype = editable._RenderEditableCustomPaint.prototype;
  dart.addTypeTests(editable._RenderEditableCustomPaint);
  dart.addTypeCaches(editable._RenderEditableCustomPaint);
  dart.setGetterSignature(editable._RenderEditableCustomPaint, () => ({
    __proto__: dart.getGetters(editable._RenderEditableCustomPaint.__proto__),
    parent: dart.nullable(editable.RenderEditable),
    painter: dart.nullable(editable.RenderEditablePainter)
  }));
  dart.setSetterSignature(editable._RenderEditableCustomPaint, () => ({
    __proto__: dart.getSetters(editable._RenderEditableCustomPaint.__proto__),
    painter: dart.nullable(editable.RenderEditablePainter)
  }));
  dart.setLibraryUri(editable._RenderEditableCustomPaint, I[3]);
  dart.setFieldSignature(editable._RenderEditableCustomPaint, () => ({
    __proto__: dart.getFields(editable._RenderEditableCustomPaint.__proto__),
    [_painter]: dart.fieldType(dart.nullable(editable.RenderEditablePainter))
  }));
  editable.RenderEditablePainter = class RenderEditablePainter extends change_notifier.ChangeNotifier {};
  (editable.RenderEditablePainter.new = function() {
    editable.RenderEditablePainter.__proto__.new.call(this);
    ;
  }).prototype = editable.RenderEditablePainter.prototype;
  dart.addTypeTests(editable.RenderEditablePainter);
  dart.addTypeCaches(editable.RenderEditablePainter);
  dart.setLibraryUri(editable.RenderEditablePainter, I[3]);
  var _selectionHeightStyle = dart.privateName(editable, "_selectionHeightStyle");
  var _selectionWidthStyle = dart.privateName(editable, "_selectionWidthStyle");
  var _highlightedRange = dart.privateName(editable, "_highlightedRange");
  var _highlightColor = dart.privateName(editable, "_highlightColor");
  editable._TextHighlightPainter = class _TextHighlightPainter extends editable.RenderEditablePainter {
    static ['_#new#tearOff'](opts) {
      let highlightedRange = opts && 'highlightedRange' in opts ? opts.highlightedRange : null;
      let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
      return new editable._TextHighlightPainter.new({highlightedRange: highlightedRange, highlightColor: highlightColor});
    }
    get highlightColor() {
      return this[_highlightColor];
    }
    set highlightColor(newValue) {
      if (dart.equals(newValue, this[_highlightColor])) {
        return;
      }
      this[_highlightColor] = newValue;
      this.notifyListeners();
    }
    get highlightedRange() {
      return this[_highlightedRange];
    }
    set highlightedRange(newValue) {
      if (dart.equals(newValue, this[_highlightedRange])) {
        return;
      }
      this[_highlightedRange] = newValue;
      this.notifyListeners();
    }
    get selectionHeightStyle() {
      return this[_selectionHeightStyle];
    }
    set selectionHeightStyle(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 2883, 12, "value != null");
      if (this[_selectionHeightStyle] === value) {
        return;
      }
      this[_selectionHeightStyle] = value;
      this.notifyListeners();
    }
    get selectionWidthStyle() {
      return this[_selectionWidthStyle];
    }
    set selectionWidthStyle(value) {
      if (!(value !== null)) dart.assertFailed(null, I[2], 2897, 12, "value != null");
      if (this[_selectionWidthStyle] === value) {
        return;
      }
      this[_selectionWidthStyle] = value;
      this.notifyListeners();
    }
    paint(canvas, size, renderEditable) {
      let range = this.highlightedRange;
      let color = this.highlightColor;
      if (range == null || color == null || range.isCollapsed) {
        return;
      }
      this.highlightPaint.color = color;
      let textPainter = renderEditable[_textPainter$];
      let boxes = textPainter.getBoxesForSelection(new text_editing.TextSelection.new({baseOffset: range.start, extentOffset: range.end}), {boxHeightStyle: this.selectionHeightStyle, boxWidthStyle: this.selectionWidthStyle});
      for (let box of boxes) {
        canvas.drawRect(box.toRect().shift(renderEditable[_paintOffset]).intersect(new ui.Rect.fromLTWH(0.0, 0.0, textPainter.width, textPainter.height)), this.highlightPaint);
      }
    }
    shouldRepaint(oldDelegate) {
      if (oldDelegate === this) {
        return false;
      }
      if (oldDelegate == null) {
        return this.highlightColor != null && this.highlightedRange != null;
      }
      return !editable._TextHighlightPainter.is(oldDelegate) || !dart.equals(oldDelegate.highlightColor, this.highlightColor) || !dart.equals(oldDelegate.highlightedRange, this.highlightedRange) || oldDelegate.selectionHeightStyle !== this.selectionHeightStyle || oldDelegate.selectionWidthStyle !== this.selectionWidthStyle;
    }
  };
  (editable._TextHighlightPainter.new = function(opts) {
    let highlightedRange = opts && 'highlightedRange' in opts ? opts.highlightedRange : null;
    let highlightColor = opts && 'highlightColor' in opts ? opts.highlightColor : null;
    this.highlightPaint = ui.Paint.new();
    this[_selectionHeightStyle] = ui.BoxHeightStyle.tight;
    this[_selectionWidthStyle] = ui.BoxWidthStyle.tight;
    this[_highlightedRange] = highlightedRange;
    this[_highlightColor] = highlightColor;
    editable._TextHighlightPainter.__proto__.new.call(this);
    ;
  }).prototype = editable._TextHighlightPainter.prototype;
  dart.addTypeTests(editable._TextHighlightPainter);
  dart.addTypeCaches(editable._TextHighlightPainter);
  dart.setMethodSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getMethods(editable._TextHighlightPainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size, editable.RenderEditable]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(editable.RenderEditablePainter)])
  }));
  dart.setGetterSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getGetters(editable._TextHighlightPainter.__proto__),
    highlightColor: dart.nullable(ui.Color),
    highlightedRange: dart.nullable(ui.TextRange),
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle
  }));
  dart.setSetterSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getSetters(editable._TextHighlightPainter.__proto__),
    highlightColor: dart.nullable(ui.Color),
    highlightedRange: dart.nullable(ui.TextRange),
    selectionHeightStyle: ui.BoxHeightStyle,
    selectionWidthStyle: ui.BoxWidthStyle
  }));
  dart.setLibraryUri(editable._TextHighlightPainter, I[3]);
  dart.setFieldSignature(editable._TextHighlightPainter, () => ({
    __proto__: dart.getFields(editable._TextHighlightPainter.__proto__),
    highlightPaint: dart.finalFieldType(ui.Paint),
    [_highlightColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_highlightedRange]: dart.fieldType(dart.nullable(ui.TextRange)),
    [_selectionHeightStyle]: dart.fieldType(ui.BoxHeightStyle),
    [_selectionWidthStyle]: dart.fieldType(ui.BoxWidthStyle)
  }));
  var _shouldPaint = dart.privateName(editable, "_shouldPaint");
  var ___FloatingCursorPainter_floatingCursorPaint = dart.privateName(editable, "_#_FloatingCursorPainter#floatingCursorPaint");
  var _caretColor = dart.privateName(editable, "_caretColor");
  var _cursorRadius = dart.privateName(editable, "_cursorRadius");
  var _cursorOffset = dart.privateName(editable, "_cursorOffset");
  var _backgroundCursorColor = dart.privateName(editable, "_backgroundCursorColor");
  var _floatingCursorRect = dart.privateName(editable, "_floatingCursorRect");
  editable._FloatingCursorPainter = class _FloatingCursorPainter extends editable.RenderEditablePainter {
    static ['_#new#tearOff'](caretPaintCallback) {
      return new editable._FloatingCursorPainter.new(caretPaintCallback);
    }
    get shouldPaint() {
      return this[_shouldPaint];
    }
    set shouldPaint(value) {
      if (this.shouldPaint === value) {
        return;
      }
      this[_shouldPaint] = value;
      this.notifyListeners();
    }
    get floatingCursorPaint() {
      let t29, t28;
      t28 = this[___FloatingCursorPainter_floatingCursorPaint];
      return t28 == null ? (t29 = ui.Paint.new(), this[___FloatingCursorPainter_floatingCursorPaint] == null ? this[___FloatingCursorPainter_floatingCursorPaint] = t29 : dart.throw(new _internal.LateError.fieldADI("floatingCursorPaint"))) : t28;
    }
    get caretColor() {
      return this[_caretColor];
    }
    set caretColor(value) {
      let t28, t28$;
      if ((t28 = this.caretColor, t28 == null ? null : t28.value) == (t28$ = value, t28$ == null ? null : t28$.value)) {
        return;
      }
      this[_caretColor] = value;
      this.notifyListeners();
    }
    get cursorRadius() {
      return this[_cursorRadius];
    }
    set cursorRadius(value) {
      if (dart.equals(this[_cursorRadius], value)) {
        return;
      }
      this[_cursorRadius] = value;
      this.notifyListeners();
    }
    get cursorOffset() {
      return this[_cursorOffset];
    }
    set cursorOffset(value) {
      if (this[_cursorOffset]._equals(value)) {
        return;
      }
      this[_cursorOffset] = value;
      this.notifyListeners();
    }
    get backgroundCursorColor() {
      return this[_backgroundCursorColor];
    }
    set backgroundCursorColor(value) {
      let t28, t28$;
      if ((t28 = this.backgroundCursorColor, t28 == null ? null : t28.value) == (t28$ = value, t28$ == null ? null : t28$.value)) {
        return;
      }
      this[_backgroundCursorColor] = value;
      if (this.showRegularCaret) {
        this.notifyListeners();
      }
    }
    get floatingCursorRect() {
      return this[_floatingCursorRect];
    }
    set floatingCursorRect(value) {
      if (dart.equals(this[_floatingCursorRect], value)) {
        return;
      }
      this[_floatingCursorRect] = value;
      this.notifyListeners();
    }
    paintRegularCursor(canvas, renderEditable, caretColor, textPosition) {
      let t28;
      let caretPrototype = renderEditable[_caretPrototype];
      let caretOffset = renderEditable[_textPainter$].getOffsetForCaret(textPosition, caretPrototype);
      let caretRect = caretPrototype.shift(caretOffset['+'](this.cursorOffset));
      let caretHeight = renderEditable[_textPainter$].getFullHeightForCaret(textPosition, caretPrototype);
      if (caretHeight != null) {
        switch (platform.defaultTargetPlatform) {
          case C[52] || CT.C52:
          case C[55] || CT.C55:
            {
              let heightDiff = dart.notNull(caretHeight) - caretRect.height;
              caretRect = new ui.Rect.fromLTWH(caretRect.left, caretRect.top + heightDiff / 2, caretRect.width, caretRect.height);
              break;
            }
          case C[53] || CT.C53:
          case C[54] || CT.C54:
          case C[56] || CT.C56:
          case C[57] || CT.C57:
            {
              caretRect = new ui.Rect.fromLTWH(caretRect.left, caretRect.top - 2, caretRect.width, caretHeight);
              break;
            }
        }
      }
      caretRect = caretRect.shift(renderEditable[_paintOffset]);
      let integralRect = caretRect.shift(renderEditable[_snapToPhysicalPixel](caretRect.topLeft));
      if (this.shouldPaint) {
        let radius = this.cursorRadius;
        this.caretPaint.color = caretColor;
        if (radius == null) {
          canvas.drawRect(integralRect, this.caretPaint);
        } else {
          let caretRRect = new ui.RRect.fromRectAndRadius(integralRect, radius);
          canvas.drawRRect(caretRRect, this.caretPaint);
        }
      }
      t28 = integralRect;
      this.caretPaintCallback(t28);
    }
    paint(canvas, size, renderEditable) {
      let t28, t28$;
      if (!(renderEditable !== null)) dart.assertFailed(null, I[2], 3076, 12, "renderEditable != null");
      let selection = renderEditable.selection;
      if (selection == null || !selection.isCollapsed) {
        return;
      }
      let floatingCursorRect = this.floatingCursorRect;
      let caretColor = floatingCursorRect == null ? this.caretColor : this.showRegularCaret ? this.backgroundCursorColor : null;
      let caretTextPosition = floatingCursorRect == null ? selection.extent : renderEditable[_floatingCursorTextPosition];
      if (caretColor != null) {
        this.paintRegularCursor(canvas, renderEditable, caretColor, caretTextPosition);
      }
      let floatingCursorColor = (t28 = this.caretColor, t28 == null ? null : t28.withOpacity(0.75));
      if (floatingCursorRect == null || floatingCursorColor == null || !this.shouldPaint) {
        return;
      }
      canvas.drawRRect(new ui.RRect.fromRectAndRadius(floatingCursorRect.shift(renderEditable[_paintOffset]), editable._kFloatingCaretRadius), (t28$ = this.floatingCursorPaint, (() => {
        t28$.color = floatingCursorColor;
        return t28$;
      })()));
    }
    shouldRepaint(oldDelegate) {
      if (this === oldDelegate) {
        return false;
      }
      if (oldDelegate == null) {
        return this.shouldPaint;
      }
      return !editable._FloatingCursorPainter.is(oldDelegate) || oldDelegate.shouldPaint !== this.shouldPaint || oldDelegate.showRegularCaret !== this.showRegularCaret || !dart.equals(oldDelegate.caretColor, this.caretColor) || !dart.equals(oldDelegate.cursorRadius, this.cursorRadius) || !oldDelegate.cursorOffset._equals(this.cursorOffset) || !dart.equals(oldDelegate.backgroundCursorColor, this.backgroundCursorColor) || !dart.equals(oldDelegate.floatingCursorRect, this.floatingCursorRect);
    }
  };
  (editable._FloatingCursorPainter.new = function(caretPaintCallback) {
    this[_shouldPaint] = true;
    this.showRegularCaret = false;
    this.caretPaint = ui.Paint.new();
    this[___FloatingCursorPainter_floatingCursorPaint] = null;
    this[_caretColor] = null;
    this[_cursorRadius] = null;
    this[_cursorOffset] = ui.Offset.zero;
    this[_backgroundCursorColor] = null;
    this[_floatingCursorRect] = null;
    this.caretPaintCallback = caretPaintCallback;
    editable._FloatingCursorPainter.__proto__.new.call(this);
    ;
  }).prototype = editable._FloatingCursorPainter.prototype;
  dart.addTypeTests(editable._FloatingCursorPainter);
  dart.addTypeCaches(editable._FloatingCursorPainter);
  dart.setMethodSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getMethods(editable._FloatingCursorPainter.__proto__),
    paintRegularCursor: dart.fnType(dart.void, [ui.Canvas, editable.RenderEditable, ui.Color, ui.TextPosition]),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size, editable.RenderEditable]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(editable.RenderEditablePainter)])
  }));
  dart.setGetterSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getGetters(editable._FloatingCursorPainter.__proto__),
    shouldPaint: core.bool,
    floatingCursorPaint: ui.Paint,
    caretColor: dart.nullable(ui.Color),
    cursorRadius: dart.nullable(ui.Radius),
    cursorOffset: ui.Offset,
    backgroundCursorColor: dart.nullable(ui.Color),
    floatingCursorRect: dart.nullable(ui.Rect)
  }));
  dart.setSetterSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getSetters(editable._FloatingCursorPainter.__proto__),
    shouldPaint: core.bool,
    caretColor: dart.nullable(ui.Color),
    cursorRadius: dart.nullable(ui.Radius),
    cursorOffset: ui.Offset,
    backgroundCursorColor: dart.nullable(ui.Color),
    floatingCursorRect: dart.nullable(ui.Rect)
  }));
  dart.setLibraryUri(editable._FloatingCursorPainter, I[3]);
  dart.setFieldSignature(editable._FloatingCursorPainter, () => ({
    __proto__: dart.getFields(editable._FloatingCursorPainter.__proto__),
    [_shouldPaint]: dart.fieldType(core.bool),
    caretPaintCallback: dart.fieldType(dart.fnType(dart.void, [ui.Rect])),
    showRegularCaret: dart.fieldType(core.bool),
    caretPaint: dart.finalFieldType(ui.Paint),
    [___FloatingCursorPainter_floatingCursorPaint]: dart.fieldType(dart.nullable(ui.Paint)),
    [_caretColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_cursorRadius]: dart.fieldType(dart.nullable(ui.Radius)),
    [_cursorOffset]: dart.fieldType(ui.Offset),
    [_backgroundCursorColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_floatingCursorRect]: dart.fieldType(dart.nullable(ui.Rect))
  }));
  editable._CompositeRenderEditablePainter = class _CompositeRenderEditablePainter extends editable.RenderEditablePainter {
    static ['_#new#tearOff'](opts) {
      let painters = opts && 'painters' in opts ? opts.painters : null;
      return new editable._CompositeRenderEditablePainter.new({painters: painters});
    }
    addListener(listener) {
      for (let painter of this.painters) {
        painter.addListener(listener);
      }
    }
    removeListener(listener) {
      for (let painter of this.painters) {
        painter.removeListener(listener);
      }
    }
    paint(canvas, size, renderEditable) {
      for (let painter of this.painters) {
        painter.paint(canvas, size, renderEditable);
      }
    }
    shouldRepaint(oldDelegate) {
      if (oldDelegate === this) {
        return false;
      }
      if (!editable._CompositeRenderEditablePainter.is(oldDelegate) || oldDelegate.painters[$length] !== this.painters[$length]) {
        return true;
      }
      let oldPainters = oldDelegate.painters[$iterator];
      let newPainters = this.painters[$iterator];
      while (oldPainters.moveNext() && newPainters.moveNext()) {
        if (newPainters.current.shouldRepaint(oldPainters.current)) {
          return true;
        }
      }
      return false;
    }
  };
  (editable._CompositeRenderEditablePainter.new = function(opts) {
    let painters = opts && 'painters' in opts ? opts.painters : null;
    this.painters = painters;
    editable._CompositeRenderEditablePainter.__proto__.new.call(this);
    ;
  }).prototype = editable._CompositeRenderEditablePainter.prototype;
  dart.addTypeTests(editable._CompositeRenderEditablePainter);
  dart.addTypeCaches(editable._CompositeRenderEditablePainter);
  dart.setMethodSignature(editable._CompositeRenderEditablePainter, () => ({
    __proto__: dart.getMethods(editable._CompositeRenderEditablePainter.__proto__),
    paint: dart.fnType(dart.void, [ui.Canvas, ui.Size, editable.RenderEditable]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(editable.RenderEditablePainter)])
  }));
  dart.setLibraryUri(editable._CompositeRenderEditablePainter, I[3]);
  dart.setFieldSignature(editable._CompositeRenderEditablePainter, () => ({
    __proto__: dart.getFields(editable._CompositeRenderEditablePainter.__proto__),
    painters: dart.finalFieldType(core.List$(editable.RenderEditablePainter))
  }));
  var Radius_y = dart.privateName(ui, "Radius.y");
  var Radius_x = dart.privateName(ui, "Radius.x");
  dart.defineLazy(editable, {
    /*editable._kCaretGap*/get _kCaretGap() {
      return 1;
    },
    /*editable._kCaretHeightOffset*/get _kCaretHeightOffset() {
      return 2;
    },
    /*editable._kFloatingCaretSizeIncrease*/get _kFloatingCaretSizeIncrease() {
      return C[61] || CT.C61;
    },
    /*editable._kFloatingCaretRadius*/get _kFloatingCaretRadius() {
      return C[62] || CT.C62;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/rendering/paragraph.dart", {
    "package:flutter/src/rendering/paragraph.dart": paragraph$,
    "package:flutter/src/rendering/editable.dart": editable
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["paragraph.dart","editable.dart"],"names":[],"mappingsa,mBAAiB;yCAClC,AAAgB,qBAAP;AACT,YAAI,oBAA6B,QAAd,oBAAQ;AACrB;;;AAER,YAAO,AAAO,OAAD,QAAM;IACrB;;;;;;IAVQ;;;EAWV;;;;;;;;;;;IAgBY;;;;;;;;;YAGc;;AACtB,YAAa,AACT,gDADG,KAAK,KACL,AAAM,AAAM,KAAP,WAAU;IACxB;;AAGoB,YAAO,8EAAuC;IAAM;;;IAZ5B;AAAS,yEAAM,AAA0C,+CAAP,KAAK;;EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAuEvE;;AAC7B,WAAqB,6BAAjB,AAAM,KAAD;AAC4B,QAAnC,AAAM,KAAD,cAAc;;IAEvB;;AAQuB,YAAiB,gBAAjB,AAAa;IAAK;aACrB;AAClB,YAAO,AAAM,KAAD;AACZ,cAAyB,AAAE,eAAnB,AAAa,mCAAgB,KAAK;;;;AAGtC;;;;AAEyB,YAAzB,AAAa,0BAAO,KAAK;AACI,YAA7B,+BAAyB;AACW,YAApC,sCAAgC;AACD,YAA/B,+BAAyB,KAAK;AACd,YAAhB;AAC0B,YAA1B;AACA;;;;AAEyB,YAAzB,AAAa,0BAAO,KAAK;AACH,YAAtB,wBAAkB;AACW,YAA7B,+BAAyB;AACW,YAApC,sCAAgC;AACD,YAA/B,+BAAyB,KAAK;AACb,YAAjB;AACuC,YAAvC;AAC6B,YAA7B;AACuC,YAAvC;AACA;;;IAEN;;AAQE,UAAI,AAAyB;AAC3B;;AAEwB,oBAAyB;AACnD,eAA+B,WAAoC,gBAAxB;AACzC,YAAI,AAAS,QAAD,iCACR,AAAS,QAAD,+BACoB,AAAE,eAA9B,AAAS,QAAD,kCAA0D,AAAE,eAA5B,AAAS,QAAD;AAMjD,UALD,AAAQ,OAAD,OACL,gDAC0C,AAAE,eAA9B,AAAS,QAAD,6CACoB,AAAE,eAA5B,AAAS,QAAD;;;AAK9B,YAAO,QAAO;IAChB;;AAQqC;IAAU;kBAEb;AAChC,UAAU,YAAN,KAAK,EAAI;AACX;;AAEqC,MAAvC;AAC6B,MAA7B;AACkB,MAAlB,mBAAa,KAAK;AACqB,MAAvC;IACF;;AAGE,UAAI,AAAW;AACb;;AAEoD,MAA7B,yCAAzB,iCAA6B,kCAAJ;AACyB,MAA1B,AAAE,eAA1B,0CAA8C,UAAF,eAAV;IACpC;;AAGE,UAAI,AAAW,4BAAW,AAAyB;AACjD;;AAEmD,MAA7B,AAAE,eAA1B,0CAA8C,UAAF,eAAV;IACpC;;AAGe,sBAAY,AAAK,+CAAoC;AAClC,mBAA8B;AAC1D,kBAAQ;AACZ,aAAO,AAAM,KAAD,GAAG,AAAU,SAAD;AAClB,kBAAM,AAAU,SAAD,WAAS,kDAAuB,KAAK;AACxD,YAAI,KAAK,KAAI,GAAG;AACd,cAAI,AAAI,GAAD,KAAI,CAAC;AACY,YAAtB,MAAM,AAAU,SAAD;;AAE8F,UAA/G,AAAO,MAAD,OAAK,mDAA+B,aAAa,6BAAiB,KAAK,OAAO,GAAG,cAAa,SAAS;AAClG,UAAX,QAAQ,GAAG;;AAEH,QAAV,QAAA,AAAM,KAAD,GAAI;;AAEX,YAAO,OAAM;IACf;;AAGE,UAAI,AAAyB;AAC3B;;AAEF,eAA+B,WAAoC,gBAAxB;AACvB,QAAlB,AAAS,QAAD;;AAEqB,MAA/B,iCAA2B;IAC7B;;;AAIwG,WAAtG;0BAA0B,aAAQ,QAAqB,WAAY,AAAQ,OAAD;AACnD,MAAjB;IACR;;AAIyC,MAAvC;AAG+B,MAA/B,iCAA2B;AACL,MAAtB,AAAa;AACE,MAAT;IACR;;;AAE2B;;IAAiB;4BAAjB;;IAAiB;+BACH;AACA,MAAvC,0BAAqC;AAMnC,MALF,AAAK,IAAD,eAAe,QAAY;AAC7B,YAAS,oCAAL,IAAI;AACqB,UAA3B,AAAkB,8BAAI,IAAI;;AAE5B,cAAO;;IAEX;;AAG2B,YAAA,AAAa;IAAS;kBACzB;AACtB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAU,iCAAG,KAAK;AACjC;;AAE4B,MAA9B,AAAa,+BAAY,KAAK;AACd,MAAhB;IACF;;AAemC,YAA0B,gBAA1B,AAAa;IAAc;sBAC9B;AAC9B,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAc,qCAAG,KAAK;AACrC;;AAEgC,MAAlC,AAAa,mCAAgB,KAAK;AACjB,MAAjB;IACF;;AASqB;IAAS;iBAEZ;AAChB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAU,oBAAG,KAAK;AACpB;;AAEe,MAAjB,kBAAY,KAAK;AACA,MAAjB;IACF;;AAG6B;IAAS;iBAEZ;AACxB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAU,oBAAG,KAAK;AACpB;;AAEe,MAAjB,kBAAY,KAAK;AACyD,MAA1E,AAAa,8BAAW,AAAM,KAAD,KAAiB,2CAAwB;AACrD,MAAjB;IACF;;AAM8B,YAAA,AAAa;IAAe;wBAC/B;AACzB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAgB,uCAAG,KAAK;AACvC;;AAEkC,MAApC,AAAa,qCAAkB,KAAK;AACd,MAAtB,wBAAkB;AACD,MAAjB;IACF;;AAKqB,YAAA,AAAa;IAAQ;iBAGxB;AAChB,YAAO,AAAM,AAAQ,KAAT,YAAkB,aAAN,KAAK,IAAG;AAChC,UAAI,AAAa,AAAS,+BAAG,KAAK;AAChC;;AAE2B,MAA7B,AAAa,8BAAW,KAAK;AACP,MAAtB,wBAAkB;AACD,MAAjB;IACF;;AASsB,YAAA,AAAa;IAAM;eAEtB;AACjB,UAAwB,YAApB,AAAa,2BAAU,KAAK;AAC9B;;AAEyB,MAA3B,AAAa,4BAAS,KAAK;AACL,MAAtB,wBAAkB;AACD,MAAjB;IACF;;AAG8B,YAAA,AAAa;IAAU;mBAE1B;AACzB,UAA4B,YAAxB,AAAa,+BAAc,KAAK;AAClC;;AAE6B,MAA/B,AAAa,gCAAa,KAAK;AACT,MAAtB,wBAAkB;AACD,MAAjB;IACF;;AAGqC,YAAA,AAAa;IAAc;uBAC9B;AAChC,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAe,sCAAG,KAAK;AACtC;;AAEiC,MAAnC,AAAa,oCAAiB,KAAK;AACb,MAAtB,wBAAkB;AACD,MAAjB;IACF;;AAGiD,YAAA,AAAa;IAAkB;2BAClC;AAC5C,UAAoC,YAAhC,AAAa,uCAAsB,KAAK;AAC1C;;AAEqC,MAAvC,AAAa,wCAAqB,KAAK;AACjB,MAAtB,wBAAkB;AACD,MAAjB;IACF;;AAK6B;IAAe;uBAElB;;AACxB,UAAoB,YAAhB,uBAAmB,KAAK;AAC1B;;AAEqB,MAAvB,wBAAkB,KAAK;AACvB,qBAAiG,yDAA7F,OAA0B,SAAI,QAAqB,YAAa,AAAS,AAAM,QAAP,uDAAxE,cAAgG;AAClF,QAAhB;;IAEJ;4BAE0C;;AACxC,YAAO,AAAuC,wBAArB,QAAQ,EAAO,mBAAQ,kBAAO,MAAmC,KAAhC,2BAAsB,QAAQ,GAA9B,aAAmC;IAC/F;;AAGE,YAAO,AAAa;IACtB;6BAGuC;AACrC,WAAK;AACH,cAAO;;AAEqC,MAA9C,6CAAuC,MAAM;AAChC,MAAb;AACA,YAAO,AAAa;IACtB;6BAGuC;AACrC,WAAK;AACH,cAAO;;AAEqC,MAA9C,6CAAuC,MAAM;AAChC,MAAb;AACA,YAAO,AAAa;IACtB;8BAEsC;AACpC,WAAK;AACH,cAAO;;AAEqC,MAA9C,8CAAwC,KAAK;AACA,MAA7C,6BAAsB,KAAK,YAAY,KAAK;AAC5C,YAAO,AAAa;IACtB;8BAGwC;AACtC,YAAO,+BAAwB,KAAK;IACtC;8BAGwC;AACtC,YAAO,+BAAwB,KAAK;IACtC;oCAGoD;AAClD,YAAQ;AACR,YAAO,AAAY;AACnB,WAAO,AAAY;AACoB,MAAvC,iCAA2B;AAO3B,YAAO,AAAa,oDAA6C;IACnE;;AAME,eAA2B,OAAQ;AACjC,gBAAQ,AAAK,IAAD;;;;;;AAIR,qBACe,+DAAuB,AACpC,qEACA;AAEF,sBAAO;;;;;;;;AAKP;;;;;AAIN,YAAO;IACT;6CAEmD;AACtC,kBAAQ;AACe,kCAAwB,uCAAmC,iBAAkC;AAC3H,uBAAa;AACjB,aAAO,KAAK;AAOT,QAJD,AAAqB,qBAAA,QAAC,UAAU,EAAI,kDAC5B,gBAAK,AAAM,KAAD,8BAAwC,iBAC7C,AAAiB,AAAa,+BAAZ,UAAU,uBAC7B,AAAiB,AAAa,+BAAZ,UAAU;AAEf,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAE4C,MAA5D,AAAa,4CAAyB,qBAAqB;IAC7D;6CAEmD;AACtC,kBAAQ;AACe,kCAAwB,uCAAmC,iBAAkC;AAC3H,uBAAa;AACjB,aAAO,KAAK;AAOT,QAJD,AAAqB,qBAAA,QAAC,UAAU,EAAI,kDAC5B,gBAAK,AAAM,KAAD,8BAAwC,iBAC7C,AAAiB,AAAa,+BAAZ,UAAU,uBAC7B,AAAiB,AAAa,+BAAZ,UAAU;AAEf,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAE4C,MAA5D,AAAa,4CAAyB,qBAAqB;IAC7D;8CAEoD;AACvC,kBAAQ;AACe,kCAAwB,uCAAmC,iBAAkC;AAC3H,uBAAa;AAGc,MAA/B,QAAQ,AAAM,KAAD,GAAG;AAChB,aAAO,KAAK;AACC,mBAAO,AAAM,KAAD,cAAc,sCAAyB,KAAK;AAKlE,QAJD,AAAqB,qBAAA,QAAC,UAAU,EAAI,kDAC5B,IAAI,aACC,AAAiB,AAAa,+BAAZ,UAAU,uBAC7B,AAAiB,AAAa,+BAAZ,UAAU;AAEf,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAE4C,MAA5D,AAAa,4CAAyB,qBAAqB;IAC7D;gBAGwB;AAAa;IAAI;oBAGH;;UAA0B;AAEzD,oBAAU;AACI,yBAAe,AAAa,wCAAqB,QAAQ;AAC1D,iBAAwB,AAAE,eAAnB,AAAa,4CAAyB,YAAY;AAC3E,UAAI,IAAI,YAAiB,0BAAL,IAAI;AACyB,QAA/C,AAAO,MAAD,KAAK,0CAAkB,0BAAL,IAAI;AACd,QAAd,UAAU;;AAID,kBAAQ;AACf,uBAAa;AACjB,aAAO,KAAK,YAAY,AAAW,UAAD,GAAsC,AAAE,eAArC,AAAa;AAC3B,6BAAmC,6BAAF,eAAhB,AAAM,KAAD;AAC7B,8BAAoB,yCAChC,AAAe,AAAO,cAAR,YACd,AAAe,AAAO,cAAR,YACd,MAHgC;AAI/B,mBACD,AAAe,cAAD,QACd,AAAe,cAAD,QACd,AAAe,cAAD;;;AAEL,oBAAQ,AAAO,MAAD,mCACZ,SAAS,YACV,QAAQ,WACT,SAAkB,QAAe;AACxC,iBAAO,AAIN;AAHc,mCAAkB,AAAS,AAAyB,QAA1B,MAAG,AAAe,cAAD,cAA+B,eAApB,AAAe,cAAD;AACjF,oBAA4C,AAAM,AAChD,EADM,AAAY,AAAG,WAAJ,MAAM,AAAe,cAAD,wBACG,AAAM,CAA1C,AAAY,AAAG,WAAJ,MAAM,AAAe,cAAD;;AAEvC,kBAAY,AAAE,gBAAP,KAAK,UAAU,MAAM,aAAY,WAAW;;AAGvD,YAAI,KAAK;AACP,gBAAO;;AAEgB,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAEhB,YAAO,QAAO;IAChB;;AAUmC,YAAA,AAAgB;IAAO;;UAEhC;UAAuB;AACpC,yBAAe,AAAS,iBAAG,AAAS,kBAAgB;AAM9D,MALD,AAAa,qCACD,QAAQ,YACR,YAAY,GACpB,QAAQ,QADY;IAI1B;;AAKuB,kBAAyB,AAAS;AACvD,cAAQ,KAAK;;;;AAGT,gBAAI;AACF;;AAEgC,YAAlC,oCAA8B;AAY5B,YAXe,AAAS,wDAAsB,QAAU;;AACxD,mBAAO;AAC4B,cAAnC,oCAA8B;AAC9B,oBACE,AAAS,4BAAkB,yBAAd,aAAiB,gCACqB,SAAjD,QAAI,kCAAqB,KAAK;AAElC,kBAAI;AAC0B,gBAAtB;AACwB,gBAA9B,AAAa;;;AAGjB;;;;;;AAI4B,YAAtB;AACwB,YAA9B,AAAa;AACb;;;IAEN;iCAS+C;AACgB,MAA7D,AAAa,4CAAyB;AACqC,MAA3E,6BAAsB,AAAY,WAAD,qBAAqB,AAAY,WAAD;IACnE;sBAM2D;UAAmB;AAC5E,UAAI,AAAW,oBAAG;AAChB,cAA8B;;AAErB,kBAAQ;AACe,kCAAwB,uCAAmC,iBAAkC;AAC3H,uBAAa;AAGF,2BAAiB,sCAAyB,AAAY,WAAD;AAInB,MAAjD,iBAAiB,AAAe,cAAD,MAAG;AAClC,aAAO,KAAK;AACF;AACG;AACX,aAAK,GAAG;AAIL,UAHD,AAAM,KAAD,QACH,cAAc,mBACE;AAEI,UAAtB,YAAY,AAAM,KAAD;AACjB,kBAAQ,AAAiB,AAAa,+BAAZ,UAAU;;;AAI/B,gBAFD,iBAAiB,AAAM,KAAD,uBACkB,eAAtC,AAAiB,AAAa,+BAAZ,UAAU;AAE9B;;;;;;;;AAMqB,gBAArB,iBAAiB;AACjB;;;;AAGJ,gBAAO,AAAiB,AAAa,AAAU,+BAAtB,UAAU,gBAAuC;AAC5B,UAA9C,YAAY,AAAM,KAAD,cAAc,cAAc;;AAO9C,QALD,AAAqB,qBAAA,QAAC,UAAU,EAAI,kDAC5B,SAAS,aACJ,AAAiB,AAAa,+BAAZ,UAAU,uBAC7B,AAAiB,AAAa,+BAAZ,UAAU,4BACtB,cAAc;AAEP,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAEhB,YAAO,sBAAqB;IAC9B;;AAKa,kBAAQ;AACf,uBAAa;AACjB,aAAO,KAAK,YAAY,AAAW,UAAD,GAAsC,AAAE,eAArC,AAAa;AAC3B,6BAAmC,6BAAF,eAAhB,AAAM,KAAD;AAI1C,QAHD,AAAe,cAAD,UAAU,kBACa,AAAC,AAAa,eAAjD,AAAa,kDAAwB,UAAU,QACZ,AAAC,AAAa,eAAjD,AAAa,kDAAwB,UAAU;AAEuB,QAAxE,AAAe,cAAD,SAA6C,AAAC,eAArC,AAAa,mDAAyB,UAAU;AAC9C,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;IAElB;;AAME,eAA2B,OAAQ;AACjC,gBAAQ,AAAK,IAAD;;;;;AAIR,oBAAO;;;;;;AAIP;;;;AAGN,YAAO;IACT;qBAGqC;AACnC,WAAK;AACH,aAAO,0CACG;AAEV,cAAY;;AAEgE,MAA9E,AAAa,4CAAyB,sBAAgB,WAAW,QAAO;AACG,MAA3E,6BAAsB,AAAY,WAAD,qBAAqB,AAAY,WAAD;AACjE,YAAO,AAAY,YAAD,WAAW,AAAa;IAC5C;;;AAIuB,wBAAmB;AACa,MAArD,+BAAyB,sBAAgB,WAAW;AACb,MAAvC,iCAA2B,WAAW;AACtB,MAAhB;AAOW,qBAAW,AAAa;AACxB,kCAAwB,AAAa;AACV,MAAtC,YAAO,AAAY,WAAD,WAAW,QAAQ;AAE1B,8BAAoB,AAAK,AAAO,AAAkB,mBAAhB,AAAS,QAAD,WAAW,qBAAqB;AAC1E,6BAAmB,AAAK,AAAM,kBAAE,AAAS,QAAD;AAMxC,8BAAoB,AAAiB,gBAAD,IAAI,iBAAiB;AACpE,UAAI,iBAAiB;AACnB,gBAAQ;;;AAEkB,cAAtB,uBAAiB;AACK,cAAtB,wBAAkB;AAClB;;;;;AAGqB,cAArB,uBAAiB;AACK,cAAtB,wBAAkB;AAClB;;;;AAEA,oBAAO,AAAc;AACA,cAArB,uBAAiB;AACC,0CAAkB,wCAC5B,mCAAiC,AAAE,eAAnB,AAAa,sCAAmB,sBACvC,qCACE,8BACT,eAJ0B;AAKjC;;;AACH,kBAAI,gBAAgB;AACX;AAAS;AAChB,wBAAQ;;;AAES,sBAAb,UAAU;AACuB,sBAAjC,YAAY,AAAgB,eAAD;AAC3B;;;;AAEoB,sBAApB,UAAU,AAAK;AAC4B,sBAA3C,YAAY,AAAQ,OAAD,GAAG,AAAgB,eAAD;AACrC;;;AAMH,gBAJD,wBAA8B,mBAC5B,kBAAO,SAAS,EAAE,MAClB,kBAAO,OAAO,EAAE,MACT;;AAGI,8BAAU,AAAK;AACf,gCAAY,AAAQ,OAAD,GAAG,AAAgB,AAAO,eAAR,UAAU;AAK3D,gBAJD,wBAA8B,mBAC5B,kBAAO,KAAK,SAAS,GACrB,kBAAO,KAAK,OAAO,GACZ;;AAGc,cAAzB,AAAgB,eAAD;AACf;;;;AAGkB,QAAtB,uBAAiB;AACK,QAAtB,wBAAkB;;IAEtB;UAG2B,SAAgB;;AAWF,MAAvC,iCAA2B;AAE3B,WAAO,AAON;;AANC,YAAI;AACU,4CAAQ;AAChB,uBAAQ,AAAyB;;;AACQ,UAA7C,AAAQ,AAAO,OAAR,iBAAiB,AAAO,MAAD,MAAG,YAAM,KAAK;;AAE9C,cAAO;;AAGT,UAAI;AACS,qBAAS,AAAO,MAAD,MAAG;AAC7B,YAAI;AAGuC,UAAzC,AAAQ,AAAO,OAAR,kBAAkB,MAAM,EAAE;;AAEZ,UAArB,AAAQ,AAAO,OAAR;;AAEsB,QAA/B,AAAQ,AAAO,OAAR,iBAAiB,MAAM;;AAEU,MAA1C,AAAa,yBAAM,AAAQ,OAAD,SAAS,MAAM;AAE9B,kBAAQ;AACf,uBAAa;AAKjB,aAAO,KAAK,YAAY,AAAW,UAAD,GAAsC,AAAE,eAArC,AAAa;AAC3B,6BAAmC,6BAAF,eAAhB,AAAM,KAAD;AAE9B,oBAA4B,eAApB,AAAe,cAAD;AAWlC,QAVD,AAAQ,OAAD,eACL,uBACA,AAAO,MAAD,MAAG,AAAe,cAAD,UACf,uCAAgB,KAAK,EAAE,KAAK,EAAE,KAAK,GAC3C,SAAiB,SAAgB;AAI9B,UAHD,AAAQ,OAAD,YACA,eAAL,KAAK,GACL,MAAM;;AAIa,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAEhB,UAAI;AACF,YAAI;AAC4C,UAA9C,AAAQ,AAAO,OAAR,kBAAkB,AAAO,MAAD,KAAK,AAAO,MAAD;AAC9B,4CAAQ;AAChB,2BAAsB;AACtB,wBAAS;;;AACqC,UAAlD,AAAQ,AAAO,OAAR,iBAAwB,AAAK,oBAAE,YAAM,KAAK;;AAE3B,QAAxB,AAAQ,AAAO,OAAR;;AAET,UAAI;AACF,iBAA+B,WAAoC,gBAAxB;AACV,UAA/B,AAAS,QAAD,OAAO,OAAO,EAAE,MAAM;;;AAGN,MAAtB,YAAM,OAAO,EAAE,MAAM;IAC7B;sBAKsC,UAAe;AACnD,YAAQ;AAC+B,MAAvC,iCAA2B;AAC3B,YAAO,AAAa,sCAAkB,QAAQ,EAAE,cAAc;IAChE;0BAK2C;AACzC,YAAQ;AAC+B,MAAvC,iCAA2B;AAC3B,YAAO,AAAa,0CAAsB,QAAQ,EAAO;IAC3D;yBAoBgB;UACI;UACD;AAEjB,YAAQ;AACR,YAAO,AAAe,cAAD;AACrB,YAAO,AAAc,aAAD;AACmB,MAAvC,iCAA2B;AAC3B,YAAO,AAAa,yCAClB,SAAS,mBACO,cAAc,iBACf,aAAa;IAEhC;yBAKyC;AACvC,YAAQ;AAC+B,MAAvC,iCAA2B;AAC3B,YAAO,AAAa,yCAAqB,MAAM;IACjD;oBAWuC;AACrC,YAAQ;AAC+B,MAAvC,iCAA2B;AAC3B,YAAO,AAAa,oCAAgB,QAAQ;IAC9C;uBAEwC;AAAa,YAAA,AAAa,oCAAgB,QAAQ;IAAC;4BAE3C;AAEjC,gCAAsB,AAAa;AACnC,2BAAiB,AAAK,CAAJ,MAAM,mBAAmB;AACxD,YAAO,gCAAyB,QAAQ,EAAE,cAAc;IAC1D;4BAEgD;AAEjC,gCAAsB,AAAa;AACnC,2BAAiB,AAAI,MAAE,mBAAmB;AACvD,YAAO,gCAAyB,QAAQ,EAAE,cAAc;IAC1D;+BAEmD,UAAiB;AACrD,wBAAc,AAAa,qCAAkB,QAAQ,EAAO;AAC5D,kCAAwB,AAAY,WAAD,WAAW,KAAK,cAAc;AAC9E,YAAO,AAAa,yCAAqB,qBAAqB;IAChE;;AAYE,YAAQ;AACR,YAAO,AAAa;IACtB;mCAO2D;;AACb,MAAtC,qCAA+B,MAAM;AACI,MAA/C,uBAAiB,AAAK;AAEtB,UAAkB,AAAE,eAAhB,4BAAoB,QAAgC,QAAS,AAAK,AAAW,IAAZ;AACnC,QAAhC,AAAO,MAAD,sBAAsB;AACI,QAAhC,AAAO,MAAD,sBAAsB;;AAE5B,YAAI,AAAuB;AACN,uBAAS;AACxB,uBAAS;AACe,2BAA8B;AAC1D,mBAA0C,OAAsB,gBAAd;AACnC,yBAA4B,KAApB,AAAK,IAAD,iBAAC,aAAkB,AAAK,IAAD;AAChD,qBAA2B,gBAAiB,AAAK,KAAD;AAC9B,kCAAgB,AAAc,aAAD;AAM5C,cALD,AAAW,UAAD,OACR,AAAc,aAAD,cACF,6BAAiB,AAAO,MAAD,GAAG,AAAc,aAAD,aACrC,AAAO,MAAD,GAAG,AAAc,aAAD;;AAIpB,YAAnB,AAAO,MAAD,OAAO,KAAK;AACI,YAAtB,SAAA,AAAO,MAAD,GAAI,AAAM,KAAD;;AAEmE,UAApF,+BAAyB,mCAAiB,AAAO,MAAD,0BAAyB,UAAU;;AAErC,QAAhD,AAAO,MAAD,mBAAyC,eAAtB;AACW,QAApC,AAAO,MAAD,iBAAiB;;IAE3B;0BASyC,MAA6B,QAAgC;;AACpG,YAAO,AAAuB,gCAAiB,AAAE,eAAhB;AACP,wBAA6B;AACzC,6BAAmB;AAC5B;AACE,oBAAU;AACb,kBAAQ;AACR,6BAAmB;AACnB,uBAAa;AACN,kBAAQ;AACqB,0BAAgB;AACe,MAAzC,8CAA9B,sCAAkC,iCAAmC,eAAd,yBAAzB;AAC9B,eAA0C,OAAqC,gBAA7B;AAC5B,wBAAY,gDAClB,KAAK,gBACH,AAAM,KAAD,GAAG,AAAK,AAAK,IAAN;AAEH,QAAzB,QAAA,AAAM,KAAD,GAAI,AAAK,AAAK,IAAN;AAEb,YAAI,AAAK,IAAD;AAGN,iBAAO,AAAS,AAAO,QAAR,YAAU,UAAU,IAC5B,AAAS,AAAsB,QAAvB,aAAW,UAAU,WAAW,oDAAiC,gBAAgB;AAC1E,4BAAY,AAAS,QAAD,aAAW,UAAU;AACxC,6BAAgC,6BAAF,eAAZ,AAAE,eAAP,KAAK;AACvC,kBAAO,AAAW,AAAc,UAAf,kBAAkB,AAAW,AAAO,UAAR,gBAAkB;AAE/D,gBAAI,AAAW,UAAD;AAMX,cALD,AAAU,SAAD,QAAa,qBACpB,AAAU,AAAK,SAAN,YACT,AAAU,AAAK,SAAN,WACT,AAAU,AAAK,AAAM,SAAZ,cAA8B,eAAhB,AAAW,UAAD,SACjC,AAAU,AAAK,AAAO,SAAb,eAA+B,eAAhB,AAAW,UAAD;AAEV,cAA1B,AAAY,WAAD,OAAK,SAAS;;AAEZ,YAAf,aAAA,AAAW,UAAD,GAAI;;AAEU,UAA1B,QAAQ,gBAAgB,eAAL,KAAK;AACH,UAArB,mBAAA,AAAiB,gBAAD,GAAI;;AAEA,iCAAmB,gBAAgB;AAChC,sBAAQ,0BAAqB,SAAS;AAC7D,cAAI,AAAM,KAAD;AACP;;AAEG,qBAAO,AAAM,AAAM,KAAP;AACuB,UAAxC,mBAAmB,AAAM,AAAM,KAAP;AACxB,mBAAsB,UAAW,AAAM,MAAD,QAAM;AACG,YAA7C,OAAO,AAAK,IAAD,iBAAiB,AAAQ,OAAD;AACC,YAApC,mBAAmB,AAAQ,OAAD;;AAS3B,UALD,OAAY,qBACL,sBAAI,KAAK,AAAK,IAAD,QACb,sBAAI,KAAK,AAAK,IAAD,OACb,sBAAI,AAAK,IAAD,QAAQ,AAAY,4BAC5B,sBAAI,AAAK,IAAD,SAAS,AAAY;AASnC,UALD,cAAmB,qBACjB,AAAK,AAAK,AAAgB,IAAtB,0BAAwB,KAC5B,AAAK,AAAI,AAAgB,IAArB,yBAAuB,KAC3B,AAAK,AAAM,AAAe,IAAtB,0BAAwB,KAC5B,AAAK,AAAO,AAAe,IAAvB,2BAAyB;AAEF,gFAAgB;AACzC,yBAAU,kCAAsB,KAAP,OAAO;AAChC,+BAAgB,gBAAgB;AAChC,iCAAkB,oCAAqC,MAApB,AAAK,IAAD,iBAAC,cAAkB,AAAK,IAAD,2BAAmB,AAAK,IAAD;;;AAChE,2BAAa,AAAK,IAAD;AAC1C,cAAI,UAAU;AACZ,gBAAe,4BAAX,UAAU;AACZ,kBAAI,AAAW,UAAD;AAC0B,gBAAtC,AAAc,aAAD,SAAS,AAAW,UAAD;AACL,gBAA3B,AAAc,aAAD,UAAU;;kBAEpB,KAAe,uCAAX,UAAU;AACnB,kBAAI,AAAW,UAAD;AACgC,gBAA5C,AAAc,aAAD,SAAS,AAAW,UAAD;AACL,gBAA3B,AAAc,aAAD,UAAU;;kBAEpB,KAAe,yCAAX,UAAU;AACnB,kBAAI,AAAW,UAAD;AACsC,gBAAlD,AAAc,aAAD,eAAe,AAAW,UAAD;;;AAGxC,mBAAO,yBAAoD,SAA/B,iBAAX,UAAU,KAAa;;;AAG5C,cAAI,AAAK,IAAD;AACK,4BAAoC,AAAE,eAA1B,AAAK,IAAD,gCAAgC,WAAW;AACJ,YAAlE,AAAc,aAAD,YAAY,AAAU,AAAQ,SAAT,aAAa,AAAY,WAAD;;AAEnC;;;;;;;;;;;;AACzB,yBAAkC,kDAA9B,OAAmB,kBAAnB,cAAiC;AACiC,YAApE,eAAmE,eAAvC,AAAE,eAAnB,kCAA2C,AAAE,AAAK,eAAxB;;AAErB,sBAAM;AAIrB,YAHD,eAAW,sCACJ,GAAG,gBACM,6BAAuB,GAAG;;AAKtB,iBAFtB;;AACI,qCAAmB,aAAa;AAChC,wBAAO,WAAW;;;AACiB,UAAvC,AAAa,aAAA,QAAa,eAAZ,AAAS,uBAAQ;AACN,UAAzB,AAAY,WAAD,OAAK;;;AAIpB,YAAO,AAAW,UAAD,KAAI,AAAS,QAAD;AAC7B,YAAO,AAAM,KAAD;AAEqB,MAAjC,0BAAoB,aAAa;AACwC,MAAzE,AAAK,IAAD,qBAAoB,MAAM,+BAA+B,WAAW;IAC1E;6BAEyC;AACvC,YAAO;AACe,mBAA8B,eAAN,AAAC,eAAlB,gCAAmB,GAAG;AACF,QAA/C,+BAAyB,YAAY,AAAK,IAAD;;IAE7C;;AAIwB,MAAhB;AACkB,MAAxB,0BAAoB;IACtB;;AAIE,YAAwB,kCACtB,AAAK,mCACG,eACsB;IAGlC;wBAGqD;AACd,MAA/B,0BAAoB,UAAU;AAC2B,MAA/D,AAAW,UAAD,KAAK,sCAAwB,aAAa;AACuB,MAA3E,AAAW,UAAD,KAAK,0CAA4B,iBAAiB;AAS3D,MARD,AAAW,UAAD,KACR,iCACE,oBACO,uBACC,kCACC,yDACC;AAGkD,MAAhE,AAAW,UAAD,KAAK,yCAA2B,YAAY;AAOrD,MAND,AAAW,UAAD,KACR,mCACE,mBACA,qCACc;AASjB,MAND,AAAW,UAAD,KACR,0CACE,UACA,4BACc;AAGoD,MAAtE,AAAW,UAAD,KAAK,gCAAY,YAAY,wBAAkB;IAC3D;;6CA9rC2B;QACf;QACa;QAClB;QACQ;QACN;QACF;QACG;QACI;QACG;QACQ;QACN;QACV;QACa;IAuCJ;IACoB;IA4DX;IAIP;gDAsEO;IAgXtB,uBAAiB;IACX;IAmBN,oCAA8B;IAsCN;IA+XS;IAwCH;UA9/BvB,AAAK,IAAD;SACJ,AAAK,IAAD;UACJ,AAAU,SAAD;UACT,AAAc,aAAD;UACb,AAAS,QAAD;UACR,AAAS,QAAD;UACR,AAAgB,eAAD;UACf,AAAS,AAAQ,QAAT,YAAqB,aAAT,QAAQ,IAAG;UAC/B,AAAe,cAAD;IACX,kBAAE,QAAQ;IACV,kBAAE,QAAQ;IACJ,wBAAE,cAAc;IACnB,qBAAE,wCACP,IAAI,aACC,SAAS,iBACL,aAAa,mBACX,eAAe,YACtB,QAAQ,YACR,AAAS,QAAD,KAAiB,2CAAwB,cACnD,MAAM,cACF,UAAU,kBACN,cAAc,sBACV,kBAAkB;AApC7C;AAsCkB,IAAhB,YAAO,QAAQ;AACe,IAA9B,+BAAyB,IAAI;AACH,IAArB,iBAAY,SAAS;EAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MASoB,gDAAqB;YAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0qCpB;IAAkB;;;AAC1B;;IAAkB;6BAAlB;;IAAkB;;AAEf,qBAAW;AACnC,UAAI,AAAmB,iCAAG,QAAQ;AAChC;;AAE2B,MAA7B,2BAAqB,QAAQ;AACZ,MAAjB;IACF;;;AAGE,UAAI,AAAoB,qCAAW,AAAkB;AACnD;;AAMQ,2BAAoC,AAAE,eAArB;AACjB,yBAAgC,AAAE,eAAnB;AACd,uBAAa,AAAe,cAAD,GAAG,YAAY;AACxC,8CAAoC,AAAU,sCAAsB,iCAAqB,cAAc;AACvG,4CAAkC,AAAe,cAAD,KAAI,YAAY,GACzE,iCAAiC,GACjC,AAAU,sCAAsB,iCAAqB,YAAY;AAC1D,wBAAc,AAAW,UAAD,MAAmB,AAAI,yBAAG,AAAU;AACzD,+EAA+B;AAA2B;;;AACxE,YAAO,2DACgB,iDACQ,wCAAe,4BAA4B,EAAE,iCAAiC,eAC7F,AAAU,AAAa,8DACvB,WAAW,GAA2B,0CAAgC,sCAA3D,uBAEN,iDACU,wCAAe,4BAA4B,EAAE,+BAA+B,eAC3F,AAAU,AAAa,8DACvB,WAAW,GAA2B,yCAA+B,uCAA1D,YAEE,AAAE,AAAO,eAA5B,sCAAgD,AAAE,eAAnB,kCACnB,sCACA,mDACR;IAEhB;2BAGsD;AACzB;;;;;;;;;;;;AACP,mCAAyB;AACzB,iCAAuB;AAC3C,cAAQ,AAAM,KAAD;;;;AAGsB,6BAAmB,sCAAN,KAAK;AACmE,YAApH,aAAS,2BAAqB,AAAW,UAAD,yBAAwB,AAAW,AAAK,UAAN,UAA4B;AACtG;;;;AAEgC,YAAhC,aAAS;AACT;;;;AAE2B,YAA3B,aAAS;AACT;;;;AAE+B,6BAAmB,sCAAN,KAAK;AACI,YAArD,aAAS,wBAAkB,AAAW,UAAD;AACrC;;;;AAEqC,4CAAkC,4CAAN,KAAK;AAKrE,YAJD,aAAS,uCACP,AAA0B,yBAAD,UACzB,AAA0B,yBAAD,QACzB,AAA0B,yBAAD;AAE3B;;;;AAEwC,+CAAqC,+CAAN,KAAK;AAK3E,YAJD,aAAS,0CACP,AAA6B,4BAAD,KAC5B,AAA6B,4BAAD,QAC5B,AAA6B,4BAAD;AAE9B;;;AAGJ,uBAAI,sBAAsB,EAAI,2CAC1B,oBAAoB,EAAI;AACL,QAArB;;AAEF,YAAO;IACT;;AAIE,UAAI,AAAoB,qCAAW,AAAkB;AACnD,cAAO;;AAEC,kBAAa,mBAAuB,AAAE,eAArB,mCAA8C,AAAE,eAAnB;AAC9C,gBAAW,mBAAuB,AAAE,eAArB,mCAA8C,AAAE,eAAnB;AACtD,YAAO,+CACM,AAAS,0BAAU,KAAK,EAAE,GAAG;IAE5C;;AAG4B,MAA1B,AAAU;AACgB,MAA1B;IACF;2BAE4C;UAA+B;AAChC,MAAzC,4BAAsB,cAAa,KAAK;AAC1B,sBAAY,AAAU,8BAAe;AACjC,MAAlB,AAAU,SAAD;AACI,0BAA4B,wCAAe,SAAS,EAAE,cAAc;AACjF,UAAI,AAAM;AACR,cAAsB,+CAAqB,aAAO,aAAa;;AAEpD,2BAAgC,0CAC3C,aACA,aAAa,cACF,AAAU;AAGJ,qBAAW,yBAAmB,AAAU,oCAAqB,cAAc;AACjD,MAA7C,4BAAsB,QAAQ,UAAS,KAAK;AAC5C,UAAI,AAAS,AAAO,QAAR,YAAW,AAAM;AAC3B,cAAuB;;AAEzB,UAAI,AAAS,AAAO,QAAR,YAAW,AAAM;AAC3B,cAAuB;;AAMzB,YAAsB,+CAAqB,aAAO,aAAa;IACjE;yBAE6C;AAE3C,UAAI,AAAS,AAAO,QAAR,UAAU,AAAM,kBACvB,AAAS,AAAO,QAAR,YAAW,AAAM,kBAAO,AAAS,AAAS,QAAV,cAA0B;AACrE,cAAO,kCAAqB,AAAM,0BAA4B;;AAEhE,UAAI,AAAS,AAAO,QAAR,UAAU,AAAM;AAC1B,cAAO,kCAAqB,AAAM;;AAEpC,YAAO,SAAQ;IACjB;4BAEyC;UAAyB;AAChE,UAAI,KAAK;AACqB,QAA5B,0BAAoB,QAAQ;;AAEE,QAA9B,4BAAsB,QAAQ;;IAElC;;AAG4B,MAA1B,4BAAsB;AACE,MAAxB,0BAAoB;AACpB,YAAuB;IACzB;;AAGyD,MAAvD,4BAAsB,iCAAqB,AAAM;AACmC,MAApF,0BAAoB,iCAAqB,AAAM,0BAA4B;AAC3E,YAAuB;IACzB;wBAEyC;AACpB,qBAAW,AAAU,oCAAqB,AAAU,6BAAc,cAAc;AACnG,UAAI,wCAAkC,QAAQ;AAC5C,cAAuB;;AAET,iBAAO,AAAU,+BAAgB,QAAQ;AACzD,WAAO,AAAK,IAAD;AAGX,YAAO,AAAK,AAAM,AAAe,IAAtB,UAAU,AAAM,oBAAS,AAAK,AAAI,IAAL,QAAQ,AAAM;AACpC;;;;;;;;;AACA;;;;;;;;;AAClB,UAAI,AAAS,AAAO,QAAR,WAAW,AAAK,IAAD;AAC0B,QAAnD,YAAQ,UAAM,iCAAqB,AAAS,QAAD;;AAEH,QAAxC,YAAQ,iCAAqB,AAAK,IAAD;AACoC,QAArE,UAAM,iCAAqB,AAAK,IAAD,gBAA6B;;AAEnC,MAA3B,4BAAsB;AACC,MAAvB,0BAAoB;AACpB,YAAuB;IACzB;0CAE2D,oBAAyB,UAAmC;AACvG,sBAAY,AAAU,8BAAe;AACnD,UAAI,AAAU,AAAS,SAAV,cAAa;AACxB,gBAAO,QAAQ;;;;AAGX,oBAAuB;;;;;AAGvB,oBAAuB;;;;AAGhB,2CAA6C,AAAyD,wCAA1C,SAAS,EAAE,kBAAO,kBAAkB,EAAE;AAC/G,YAAQ,AAA+B,8BAAD;AACnB;AACG;AACtB,cAAO,QAAQ;;;;AAGX,kBAAO,AAA0B,mCAAG;AACjB,+BAAe,QAAQ,GAAoB,eAAjB,2BAAwC,eAAnB,0BAAxB;AACI,6BAAa,8BACzD,YAAY,6CAC8B,8BAA8B,SACjE,AAAS,QAAD,KAA6B;AAElB,YAA5B,cAAc,AAAW,UAAD;AACC,YAAzB,SAAS,AAAW,UAAD;AACnB;;;;;AAKoE,YAFlD,kCAAlB,0BAAsB,AAAS,QAAD,KAA6B,6CACvD,iCAAqB,AAAM,qBAC3B,iCAAqB,AAAM,0BAA4B,6BAFzC;AAGuB,YAArB,oCAApB,4BAAwB,0BAAJ;AACD,+BAAe,QAAQ,GAAoB,eAAjB,2BAAwC,eAAnB,0BAAxB;AAC7B,mDAAmC,AAAU,sCAAsB,YAAY;AAC/E,uDAAuC,kBAClD,8BAA8B,EAE9B,AAAiC,AAAG,gCAAJ,MAAM,AAAU,AAAa,AAAoB,mDAAE;AAEH,YAAlF,cAAc,AAAU,oCAAqB,oCAAoC;AACrD,YAA5B,SAAyB;AACzB;;;AAEJ,UAAI,QAAQ;AACqB,QAA/B,0BAAoB,WAAW;;AAEE,QAAjC,4BAAsB,WAAW;;AAEnC,YAAO,OAAM;IACf;uCAEsD,SAAc,UAA0B;AAGtB,MAFpD,kCAAlB,0BAAsB,OAAO,GACvB,iCAAqB,AAAM,qBAC3B,iCAAqB,AAAM,0BAA4B,0BAFhC,GAAX;AAGuB,MAArB,oCAApB,4BAAwB,0BAAJ;AACD,yBAAe,QAAQ,GAAoB,eAAjB,2BAAwC,eAAnB,0BAAxB;AAC1C,UAAI,OAAO,IAAK,AAAa,AAAO,YAAR,YAAW,AAAM;AAC3C,cAAuB;;AAEzB,WAAK,OAAO,IAAK,AAAa,AAAO,YAAR,YAAW,AAAM;AAC5C,cAAuB;;AAEH;AACH;AACnB,cAAQ,WAAW;;;AAEF,uBAAO,AAAM,sBAAW;AACyC,YAA9E,cAAc,uBAAiB,wCAAkB,IAAI,GAAG,YAAY,EAAE,OAAO;AACjD,YAA5B,SAAyB;AACzB;;;;AAEa,uBAAO,AAAM,sBAAW;AAC+D,YAApG,cAAc,uBAAiB,AAAyB,yCAAN,IAAI,OAAI,mCAAa,QAAO,YAAY,EAAE,OAAO;AACvE,YAA5B,SAAyB;AACzB;;;;AAEsE,YAAtE,cAAc,uBAAiB,gCAAU,OAAO,YAAY,EAAE,OAAO;AACzC,YAA5B,SAAyB;AACzB;;;;AAEa,uBAAO,AAAM,sBAAW;AACwC,YAA7E,cAAc,uBAAiB,uCAAiB,IAAI,GAAG,YAAY,EAAE,OAAO;AAC5E,gBAAI,OAAO,IAAI,AAAY,AAAO,WAAR,YAAW,AAAM;AACZ,cAA7B,SAAyB;kBACpB,MAAK,OAAO,IAAI,AAAY,AAAO,WAAR,YAAW,AAAM;AAChB,cAAjC,SAAyB;;AAEG,cAA5B,SAAyB;;AAE3B;;;AAGJ,UAAI,QAAQ;AACqB,QAA/B,0BAAoB,WAAW;;AAEE,QAAjC,4BAAsB,WAAW;;AAEnC,YAAO,OAAM;IACf;uBAE2C,UAAuB,UAAe;AAC/E,UAAI,OAAO;AACT,cAAO,0BACa,AAAQ,AAAY,4CAAV,QAAQ,4BAA4B,QAAQ;;AAG5E,YAAO,0BACa,AAAS,AAAY,6CAAV,QAAQ,2BAA2B,QAAQ;IAE5E;8BAE6E;UAA2B;UAAwD;AACnI,kBAAQ,AAAU;AAChC,mBAAS,AAAU,iCAAkB,QAAQ,EAAO;AAC7D,wBAAc,AAAM,AAAO,KAAR,YAAU;AACjC,eAA0B,cAAe,MAAK;AAC5C,YAAI,AAAY,AAAS,WAAV,YAAY,AAAO,MAAD;AACK,UAApC,cAAc,AAAY,WAAD;AACzB;;;AAGe;AACnB,UAAI,KAAK,IAAI,AAAY,WAAD,KAAI,AAAM,AAAO,KAAR,YAAU;AACqC,QAA9E,cAAc,iCAAqB,AAAM,0BAA4B;YAChE,MAAK,KAAK,IAAI,AAAY,WAAD,KAAI;AACa,QAA/C,cAAc,iCAAqB,AAAM;;AAE/B,sBAAU,KAAK,GAAG,AAAY,WAAD,GAAG,IAAI,AAAY,WAAD,GAAG,CAAnC;AAGxB,QAFD,cAAc,yBACZ,AAAU,oCAAqB,kBAAO,wCAAwC,EAAE,AAAK,AAAU,KAAV,QAAC,OAAO;;AAG3E;AACtB,UAAI,AAAY,AAAO,WAAR,YAAW,AAAM;AACG,QAAjC,SAAyB;YACpB,KAAI,AAAY,AAAO,WAAR,YAAW,AAAM;AACR,QAA7B,SAAyB;;AAEG,QAA5B,SAAyB;;AAE3B,YAAO,AAA+B,MAAzB,KAAoB,kCAAQ,KAAK;AAC9C,YAAO,AAAmC,MAA7B,KAAoB,uCAAa,KAAK;AACnD,YAAO,qDAAwC,WAAW,EAAE,MAAM;IACpE;wCAMoD;AAClD,UAAI,AAAoB,qCAAW,AAAkB;AACnD,cAAO;;AAGS;;;;;;;;;AACA;;;;;;;;;AAClB,UAAI,AAAgE,qDAAvB,eAAnB,4BAAuC,eAAjB,4BAAsB;AACjC,QAAnC,mBAAkC,eAAnB;AACgB,QAA/B,iBAA8B,eAAjB;;AAEoB,QAAjC,mBAAgC,eAAjB;AACkB,QAAjC,iBAAgC,eAAnB;;AAEf,YAAO,AAA8C,AAAK,sDAA7B,sBAAc,QAAQ,KAAK,KAAK,AAA4C,qDAAtB,oBAAY,QAAQ,KAAK;IAC9G;iCAM8C,UAAuB;AACnE,UAAI,AAAS,AAAO,QAAR,UAAU,AAAc,aAAD;AACjC,cAAO;YACF,KAAI,AAAS,AAAO,QAAR,UAAU,AAAc,aAAD;AACxC,cAAO,EAAC;YACH,KAAI,AAAS,AAAS,QAAV,cAAa,AAAc,aAAD;AAC3C,cAAO;;AAEP,cAAO,AAAS,AAAS,SAAV,cAA0B,2BAAW,IAAI,CAAC;;IAE7D;;AAGE,YAAe,0CAAkB,AAAM,kBAAM,AAAM,iBAAK;IAC1D;mBAGqC;;AACnC,YAAO;;AAA2B,qBAAS,AAAU,8BAAe,QAAQ;;;IAC9E;qBAGiC,aAAwB;AACvD,WAAK,AAAU;AACb,cAAO,AAAY,AAAQ,WAAT,YAAY,AAAU,SAAD,6BAAU;AACjD;;AAEF,uBAAI,6BAAyB,WAAW;AACH,QAAnC,8BAAwB,WAAW;AACT,QAA1B,AAAU;;AAEZ,uBAAI,2BAAuB,SAAS;AACH,QAA/B,4BAAsB,SAAS;AACL,QAA1B,AAAU;;IAEd;;AAGE,UAAI,AAAY;AACM,oBAAQ,AAAU,oCACpC,gDAA0B,AAAM,gCAAqB,AAAM;AAE7D,YAAI,AAAM,KAAD;AACF,uBAAS,AAAM,AAAM,KAAP;AACnB,mBAAS,QAAQ,GAAG,AAAM,KAAD,GAAG,AAAM,KAAD,WAAS,QAAA,AAAM,KAAD,GAAI;AACK,YAAtD,SAAS,AAAO,MAAD,iBAAiB,AAAK,AAAQ,KAAR,QAAC,KAAK;;AAEzB,UAApB,oBAAc,MAAM;;AAEP,uBAAS,AAAU,sCAAsB,iCAAqB,AAAM;AACuB,UAAxG,oBAAmB,uBAAW,MAAM,EAAE,AAAO,MAAD,WAAW,KAAG,CAAE,AAAU,AAAa;;;AAGvF,YAAkB,gBAAX;IACT;;AAIoB,MAAlB,oBAAc;IAChB;;AAIE,YAAO,AAAM;IACf;UAE2B,SAAgB;;AACzC,UAAI,AAAoB,qCAAW,AAAkB;AACnD;;AAEF,UAAI,AAAU;AACQ,wBAAY,gDACC,AAAE,eAArB,iDACmB,AAAE,eAAnB;AAEJ,oDAAiB;AACzB,sBAAsB;AACtB,sBAAgC,eAAxB,AAAU;;;AACtB,iBAAmB,UAAW,AAAU,qCAAqB,SAAS;AAEjB,UADnD,AAAQ,AAAO,OAAR,iBACH,AAAQ,AAAS,OAAV,gBAAgB,MAAM,GAAG,cAAc;;;AAGxC,sBAAY;AAC1B,UAAI,uCAAiC,AAAM;AAQxC,QAPD,AAAQ,OAAD,WACL,iCAC6B,eAArB,sCACE,AAAO,MAAD,MAAe,wCAAe,SAAS,EAA2B,AAAE,eAA3B,AAAM,mDAE/D,SAAiB,SAAgB;gDAC1B;;AAGX,UAAI,qCAA+B,AAAM;AAQtC,QAPD,AAAQ,OAAD,WACL,iCAC2B,eAAnB,oCACE,AAAO,MAAD,MAAe,wCAAe,SAAS,EAAyB,AAAE,eAAzB,AAAM,iDAE/D,SAAiB,SAAgB;gDAC1B;;IAGb;oBAG2C;AACzB,iBAAO,AAAU,iCAAiB,QAAQ;AAChD,kBAAQ,AAAK,AAAM,IAAP,eAAa,AAAM,kBAAO,AAAM;AAC5C,gBAAM,AAAK,AAAI,IAAL,aAAW,AAAM,kBAAO,AAAM;AAClD,YAAO,iDAA0B,KAAK,gBAAgB,GAAG;IAC3D;yBAG+C;AAC7C,YAAO,0BAAmB,AAAU,sCAAsB,QAAQ;IACpE;yBAG+C;AAC7C,YAAO,0BAAmB,AAAU,sCAAsB,QAAQ;IACpE;oBAGuC;AAAa,YAAA,AAAU,gCAAgB,QAAQ;IAAC;;;QA9fvE;QACA;QACA;IASF;IACA;IAEH;IACA;qDAIY;IAqajB;IAxbU;IACA;IACA;UACJ,AAAM,AAA8B,KAA/B,aAAa,AAAM,KAAD,gBAAgB,AAAM,KAAD;AAJxD;AAK8C,IAA5C,2BAAqB;EACvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAvwCW,qBAAU;;;;;;;IC4BR;;;;;;IAGQ;;;;;;;;;YAGG;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAET,WAAI,AAAM,KAAD,uBAAgB;AACvB,cAAO;;AAET,YAAa,AAET,gCAFG,KAAK,KACL,AAAM,AAAM,KAAP,eAAU,eACf,AAAM,AAAU,KAAX,cAAc;IAC5B;;AAIE,cAAQ;;;AAEJ,kBAAmB,UAAV,cAAK;;;;AAEd,kBAAmB,UAAV,cAAK;;;;AAEd,kBAAe,UAAN;;;IAEf;;AAGoB,YAAO,kBAAK,YAAO;IAAU;;8CApCnB,OAAY;IAAZ;IAAY;UAC/B,AAAM,KAAD;;EAAS;;;;;;;;;;;;;;;;;;;;;;;;;AAkHvB,WAAK;AACH,cAAO;;AAEkB,2BAAiB,AAAU,AAAa;AAGnE,UAAe,cAAc,KAAE;AACb,QAAhB,iBAAW;;AAEb,YAAO;IACT;8BAI2D;AACzD,WAAO;AACP,YAAO,AAAW,UAAD,IAAI;AACiB,2BAAiB,AAAc,4BAAC,UAAU;AAChF,UAAI,cAAc;AAChB,cAAO,eAAc;;AAEvB,YAAO,AAAW,UAAD,KAAI;AAER,sBAAY,kBAAO,AAAe,0BAAI,AAAY,AAAa,2BAAZ,UAAU;AACvD,4BAAkB,AAAU,AAAa,qDAAqB,SAAS;AACrD,qBAAW,2CAA+B,SAAS,EAAE,eAAe;AACpE,MAArC,AAAc,4BAAC,UAAU,EAAI,QAAQ;AACrC,YAAO,SAAQ;IACjB;;AAIE,WAAO;AACP,YAAO;IACT;;AAIE,WAAO;AACP,UAAI,AAAa,AAAI,sBAAF,KAAK,AAAa;AACnC,cAAO;;AAE4B,qBAAW,8BAAwB,AAAa,sBAAE;AACtE,MAAjB,sBAAA,AAAa,sBAAG;AACa,MAA7B,wBAAiB,AAAS,QAAD;AACY,MAArC,8BAAuB,AAAS,QAAD;AAC/B,YAAO;IACT;;AAME,WAAO;AACP,UAAI,AAAa,uBAAG;AAClB,cAAO;;AAE4B,qBAAW,8BAAwB,AAAa,sBAAE;AACtE,MAAjB,sBAAA,AAAa,sBAAG;AACa,MAA7B,wBAAiB,AAAS,QAAD;AACY,MAArC,8BAAuB,AAAS,QAAD;AAC/B,YAAO;IACT;iBAQyB;AACV,0BAAgB;AAC7B,UAAI,AAAO,MAAD,IAAI;AACZ,eAAO,AAAe,AAAG,2BAAE,AAAc,AAAG,aAAJ,MAAM,MAAM;AAClD,eAAK;AACH;;;;AAIJ,eAAO,AAAe,AAAG,2BAAE,AAAc,AAAG,aAAJ,MAAM,MAAM;AAClD,eAAK;AACH;;;;AAIN,YAAqB,EAAd,aAAa,SAAI;IAC1B;;mDA7GO,WACA,cACA,sBACA,cACA;IAUF,iBAAW;IAqB+B,uBAAsD;IAnC9F;IACA;IACA;IACA;IACA;;EACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmaoB;;;;;;IAmBhB;;;;;;IAmFiB;;;;;;IAgiBX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA3xBoB;;AAC7B,WAAqB,6BAAjB,AAAM,KAAD;AAC4B,QAAnC,AAAM,KAAD,cAAc;;IAEvB;;;AAQoC,YAAlC;2BAAyB;AACK,MAA9B,gCAA0B;AACQ,aAAlC;4BAAyB;AACK,MAA9B,gCAA0B;AACC,MAA3B,AAAe,6BAAQ;AACoB,cAA3C;6BAAkC;AACD,cAAjC;6BAAwB;AACW,MAAnC,AAA0B;AACO,MAAjC,AAAwB;AACc,MAAtC,AAA6B;AACF,MAA3B,AAAkB;AACK,MAAvB,AAAc;AACQ,MAAtB,AAAa;AACE,MAAT;IACR;+BAEqD;;AACb,6BAAmB,AAAW,UAAD,WAC/D,mCACA,4DAAiE,uCAChE,kCACA,UAAU;AAGf,UAAI,AAAwB;AACO,qCAAyB,sDAAoC,gBAAgB;AAC5E,QAAlC,gBAAW,sBAAsB;AACe,QAAhD,gCAA0B,sBAAsB;;AAEG,cAAnD;6BAAyB,cAAU,gBAAgB;;AAEtB,MAA/B,2BAAqB,UAAU;IACjC;;;AAE2B;;IAAiB;6BAAjB;;IAAiB;gCACF;;AACD,MAAvC,2BAAqC;AAMnC,YALF,IAAI;oBAAJ,OAAM,kBAAc,QAAY;AAC9B,YAAS,oCAAL,IAAI;AACqB,UAA3B,AAAkB,+BAAI,IAAI;;AAE5B,cAAO;;IAEX;;AAQgD;IAAkB;0BAErB;AAC3C,UAAe,YAAX,UAAU,EAAI;AAChB;;AAEkC,MAApC,+BAAyB,UAAU;IACrC;qBAE2C;;AACH,6BAAmB,AAAW,UAAD,WAC/D,yBACA,4DAAiE,uCAAC,wBAAkB,UAAU;AAElG,UAAI,AAAwB;AACO,qCAAyB,sDAAoC,gBAAgB;AAC5E,QAAlC,gBAAW,sBAAsB;AACe,QAAhD,gCAA0B,sBAAsB;;AAEG,cAAnD;6BAAyB,cAAU,gBAAgB;;AAEhC,MAArB,iBAAW,UAAU;IACvB;;AAQsC;IAAQ;gBAEX;AACjC,UAAe,YAAX,UAAU,EAAI;AAChB;;AAEwB,MAA1B,qBAAe,UAAU;IAC3B;;;AAIkC;kCAAgB,kDAAuB,iKAAvC;IAAuD;;;AAMvB;YAAiC,eAAjC,yCAAqC;IAAkC;;AAGvI,YAAO,6DAC4B;;AAC/B,cAAI,2BAAsB;;;IAGhC;;;AAEwD;YAAuB,eAAvB,+BAA2B;IAAwB;;AAGzG,YAAO,6DAC4B;2DAC/B,oCACA;AACA,eAAK,2BAAsB;;;IAGjC;;AAOE,YACE,AAAwB,AAAwB,kCAArB,AAAY,6BACvC,AAAwB,kCAAG,AAAY,8CACvC,AAA0J,0BAA5I,iCAAuB,gBAAG,iCAAuB,sDAA0C,AAAY,6BAAS,gBAAI,AAAY,6BAAS;IAE3J;sBAQ0B;;AACxB,uBAAI,sBAAkB,SAAS;AACE,cAA/B;6BAAgB,IAAK,SAAS;;AAE0B,MAA1D,uBAAiB,AAAe,8BAAU,OAAO,SAAS;IAC5D;;AAgB8C,YAAA,AAAa;IAAkB;2BAClC;AACzC,UAAoC,YAAhC,AAAa,wCAAsB,KAAK;AAC1C;;AAEqC,MAAvC,AAAa,yCAAqB,KAAK;AAClB,MAArB;IACF;;AAGqC,YAAA,AAAa;IAAc;uBAC9B;AAChC,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAe,uCAAG,KAAK;AACtC;;AAEiC,MAAnC,AAAa,qCAAiB,KAAK;AACd,MAArB;IACF;;AAK+B;IAAiB;yBAEpB;AAC1B,UAAI,AAAiB,0BAAG,KAAK;AAC3B;;AAEuB,MAAzB,0BAAoB,KAAK;AACJ,MAArB;IACF;;AAKiC;IAAmB;2BAEtB;AAC5B,UAAI,AAAoB,8BAAG,KAAK;AAC9B;;AAEF,YAAO,AAAc,KAAT,aAAkB,AAAW,AAAO,8CAAxB,KAAK,eAAsB;AACxB,MAA3B,4BAAsB,KAAK;AACV,MAAjB;IACF;;AAGwB;IAAY;oBAEf;AACnB,UAAI,AAAa,uBAAG,KAAK;AACvB;;AAEkB,MAApB,qBAAe,KAAK;AACS,MAA7B,+BAAyB;AACC,MAA1B;IACF;;AAK8C,YAAA,AAAkB;IAAoB;6BACzC;AACK,MAA9C,AAAkB,+CAAuB,KAAK;IAChD;;AAK4C,YAAA,AAAkB;IAAmB;4BACxC;AACM,MAA7C,AAAkB,8CAAsB,KAAK;IAC/C;;AAmBsD;IAAyB;;AAa3B;IAAuB;gCAIxB,UAAiB;AACrD,wBAAc,AAAa,sCAAkB,QAAQ,EAAE;AACvD,kCAAwB,AAAY,WAAD,WAAW,KAAK,cAAc;AAC9E,YAAO,AAAa,0CAAqB,qBAAqB;IAChE;oBAM2C;AACd,MAA3B;AACgB,iBAAO,AAAa,oCAAgB,QAAQ;AAE5D,UAAI;AACF,cAAO,iDAA0B,iBAAiB,AAAU;;AAE9D,YAAO,iDAA0B,AAAK,IAAD,sBAAsB,AAAK,IAAD;IACjE;oBAIuC;AACrC,YAAO,AAAa,qCAAgB,QAAQ;IAC9C;yBAI+C;AAIhC,gCAAsB,AAAa;AACnC,2BAAiB,AAAK,CAAJ,MAAM,mBAAmB;AACxD,YAAO,iCAAyB,QAAQ,EAAE,cAAc;IAC1D;yBAI+C;AAIhC,gCAAsB,AAAa;AACnC,2BAAiB,AAAI,MAAE,mBAAmB;AACvD,YAAO,iCAAyB,QAAQ,EAAE,cAAc;IAC1D;wCAI8C;AAC5C,YAAO,AAAU;AACN,0BAAuB,AAAK,oBAAE;AAE5B,wBAAc,AAAa,sCACtC,iCAA8B,AAAE,eAAX,iCAAqC,AAAE,eAAX,4BACjD;AAWwC,MAF1C,AAA0B,wCAAQ,AAC/B,AACA,aAF4C,uBAEnC,AAAY,WAAD,MAAG,eAAe;AAE5B,sBAAa,AAAa,sCACrC,iCAA8B,AAAE,eAAX,+BAAmC,AAAE,eAAX,4BAC/C;AAIsC,MAFxC,AAAwB,sCAAQ,AAC7B,AACA,aAF0C,uBAEjC,AAAU,SAAD,MAAG,eAAe;IACzC;2BAE2C,UAAgC;AACR,MAAjE,AAAsB,sDAA2B,QAAQ,EAAE,KAAK;IAClE;oBAEiC,eAAqC;AACpE,UAAI,AAAc,aAAD;AASL,yBAAa,AAAsB,AAAiB,AAAK;AAIlE,QAHD,gBAAgB,AAAc,aAAD,uBACV,mBAAI,AAAc,aAAD,aAAa,UAAU,iBACtC,mBAAI,AAAc,aAAD,eAAe,UAAU;;AAMhE,MAHD,2BACE,AAAsB,AAAiB,iEAAoB,aAAa,IACxE,KAAK;IAET;;;AAIwB,MAAhB;AAEmC,YAAzC;2BAAyB;AACgB,aAAzC;4BAAyB;IAC3B;;AAQgC,MAA9B,gCAA0B;AACI,MAA9B,gCAA0B;AACT,MAAjB;IACF;;AAI8B,MAAtB;AACwB,MAA9B,AAAa;AACiB,MAA9B,gCAA0B;AACI,MAA9B,gCAA0B;IAC5B;;AAOwB,YAAA,AAAa;IAAS;;AAKtB,YAAA,AAAa;IAAI;aAIpB;AACnB,UAAsB,YAAlB,AAAa,0BAAQ,KAAK;AAC5B;;AAE0B,MAA5B,8BAAwB;AACC,MAAzB,AAAa,2BAAO,KAAK;AACI,MAA7B,+BAAyB;AACW,MAApC,uCAAgC;AACD,MAA/B,gCAAyB,KAAK;AACT,MAArB;AAC0B,MAA1B;IACF;;AAK2B,YAAA,AAAa;IAAS;kBACzB;AACtB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAU,kCAAG,KAAK;AACjC;;AAE4B,MAA9B,AAAa,gCAAY,KAAK;AACT,MAArB;IACF;;AAkBmC,YAA0B,gBAA1B,AAAa;IAAc;sBAC9B;AAC9B,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAc,sCAAG,KAAK;AACrC;;AAEgC,MAAlC,AAAa,oCAAgB,KAAK;AACb,MAArB;AAC0B,MAA1B;IACF;;AAYsB,YAAA,AAAa;IAAM;eACtB;AACjB,UAAwB,YAApB,AAAa,4BAAU,KAAK;AAC9B;;AAEyB,MAA3B,AAAa,6BAAS,KAAK;AACN,MAArB;IACF;;AAI8B,YAAA,AAAa;IAAU;mBAC1B;AACzB,UAA4B,YAAxB,AAAa,gCAAc,KAAK;AAClC;;AAE6B,MAA/B,AAAa,iCAAa,KAAK;AACV,MAArB;IACF;;AAG0B,YAAA,AAAc;IAAU;oBAC3B;AACW,MAAhC,AAAc,iCAAa,KAAK;IAClC;;AAMoC,YAAA,AAAc;IAAqB;8BACtC;AACY,MAA3C,AAAc,4CAAwB,KAAK;IAC7C;;AAGsC;IAAW;mBAEd;AACjC,YAAO,AAAM,KAAD;AACZ,UAAI,AAAY,4BAAG,KAAK;AACtB;;AAEF,UAAI;AACyC,QAA3C,AAAY,2CAAe;;AAEV,MAAnB,oBAAc,KAAK;AACnB,UAAI;AACe,QAAjB;AACwC,QAAxC,AAAY,wCAAY;;IAE5B;;AAG8C,MAA5C,AAAc,kCAAc,AAAW;IACzC;;AAGqB;IAAS;iBAEZ;AAChB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAU,oBAAG,KAAK;AACpB;;AAEe,MAAjB,kBAAY,KAAK;AACS,MAA1B;IACF;;AAGsB;IAAU;kBAEb;AACjB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAW,qBAAG,KAAK;AACrB;;AAEgB,MAAlB,mBAAa,KAAK;AACD,MAAjB;IACF;;AAGqB;IAAS;iBAEZ;AAChB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAU,oBAAG,KAAK;AACpB;;AAEe,MAAjB,kBAAY,KAAK;AACS,MAA1B;IACF;;AAYqB;IAAS;iBAGZ;AAChB,YAAO,AAAM,AAAQ,KAAT,YAAkB,aAAN,KAAK,IAAG;AAChC,UAAI,AAAS,iBAAG,KAAK;AACnB;;AAEe,MAAjB,kBAAY,KAAK;AAK4B,MAA7C,AAAa,+BAAW,AAAM,KAAD,KAAI,IAAI,IAAI;AACpB,MAArB;IACF;;AAGqB;IAAS;iBAGZ;AAChB,YAAO,AAAM,AAAQ,KAAT,YAAkB,aAAN,KAAK,IAAG;AAChC,UAAI,AAAS,iBAAG,KAAK;AACnB;;AAEe,MAAjB,kBAAY,KAAK;AACI,MAArB;IACF;;AAGoB;IAAQ;gBAEX;AACf,YAAO,AAAM,KAAD;AACZ,UAAI,AAAQ,iBAAG,KAAK;AAClB;;AAEc,MAAhB,iBAAW,KAAK;AACK,MAArB;IACF;;AAG6B,YAAA,AAAkB;IAAc;uBACnC;AACgB,MAAxC,AAAkB,yCAAiB,KAAK;IAC1C;;AAM8B,YAAA,AAAa;IAAe;wBAC/B;AACzB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAa,AAAgB,wCAAG,KAAK;AACvC;;AAEkC,MAApC,AAAa,sCAAkB,KAAK;AACf,MAArB;IACF;;AAQgC;IAAU;kBAEb;AAC3B,UAAe,YAAX,kBAAc,KAAK;AACrB;;AAEgB,MAAlB,mBAAa,KAAK;AACwB,MAA1C,AAAkB,2CAAmB,KAAK;AAC1B,MAAhB;AAC0B,MAA1B;IACF;;AAO6B;IAAO;eAEV;AACxB,YAAO,AAAM,KAAD;AACZ,UAAI,AAAQ,wBAAG,KAAK;AAClB;;AAEF,UAAI;AACoC,QAAtC,AAAQ,uCAAe;;AAEV,MAAf,gBAAU,KAAK;AACf,UAAI;AACiC,QAAnC,AAAQ,oCAAY;;AAEL,MAAjB;IACF;;AAG0B;IAAY;oBAEf;AACrB,UAAI,AAAa,uBAAG,KAAK;AACvB;;AAEkB,MAApB,qBAAe,KAAK;AACH,MAAjB;IACF;;;AAS2B;2BAAiB;IAAmB;qBAEtC;AACvB,UAAI,AAAc,uBAAG,KAAK;AACxB;;AAEmB,MAArB,sBAAgB,KAAK;AACJ,MAAjB;IACF;;AAQiC;IAAiB;6BAEpB;AAC5B,UAAI,AAAkB,4BAAG,KAAK;AAC5B;;AAEuB,MAAzB,0BAAoB,KAAK;AAEc,MAAvC,yCAAmC;AACN,MAA7B,+BAAyB;AAEmB,MAA5C,+BAAyB;AACD,MAAxB,qBAAe;IACjB;;AAU2B,YAAA,AAAc;IAAY;qBAC7B;AACY,MAAlC,AAAc,mCAAe,KAAK;IACpC;;AAK4B,YAAA,AAAc;IAAY;qBAC7B;AACW,MAAlC,AAAc,mCAAe,KAAK;IACpC;;AAMsC;IAAqB;6BAExB;AACjC,UAAI,AAAsB,uCAAG,KAAK;AAChC;;AAE2B,MAA7B,+BAAwB,KAAK;AACb,MAAhB;IACF;;AAMoC;IAAmB;2BAEtB;AAC/B,UAAI,AAAoB,qCAAG,KAAK;AAC9B;;AAEyB,MAA3B,6BAAsB,KAAK;AACX,MAAhB;IACF;;;AASkB;;IAA2B;sCAA3B;;IAA2B;;AAeL;IAA2B;mCAE9B;AACnC,UAAI,AAA4B,qCAAG,KAAK;AACtC;;AAEiC,MAAnC,oCAA8B,KAAK;AACd,MAArB;AAC0B,MAA1B;IACF;;;AAuBE,YAAO;4BAA+B;IACxC;;AAQ8B,YAAA,AAA6B;IAAc;wBAC9C;AAC6B,MAAtD,AAA6B,oDAAiB,QAAQ;IACxD;uBASmC;AACuB,MAAxD,AAA6B,sDAAmB,QAAQ;IAC1D;;AAO8B;IAAgB;;AAGnB,YAAW,KAAE;IAAW;;AAK1B;IAAa;qBAEhB;AACpB,YAAO,AAAM,KAAD;AACZ,UAAI,KAAK,KAAI;AACU,QAArB,sBAAgB,KAAK;AACL,QAAhB;AAC0B,QAA1B;;IAEJ;yBAe8C;AACf,MAA7B;AACA,YAAO,AAAa,AACA,AACA,0CAFqB,SAAS,iBAC1B,QAAS,WAAY,AAAQ,AAAS,OAAV,gBAAgB;IAEtE;mCAG2D;;AACb,MAAtC,qCAA+B,MAAM;AACkB,MAA7D,wBAAkC,AAAE,eAAnB,AAAa;AAK9B,UAAkB,AAAE,eAAhB,6BAAoB,QAAgC,QAAS,AAAK,AAAW,IAAZ,mEACjE,mCAAwC;AAC1C,cAAO,AAAS,kBAAI;AAKS,cAF7B,MAAM;QAAN;AACI,mCAAqB;AACrB,mCAAqB;;;AACzB;;AAEF,UAAI,AAAuB;AACzB,YAAI;AAC8E,UAAhF,+BAAyB,mCAAiB,AAAmB,gCAAE,AAAU;;AAEtD,uBAAS;AACxB,uBAAS;AACe,2BAA8B;AAC1D,mBAA0C,OAAsB,gBAAd;AACnC,yBAA4B,OAApB,AAAK,IAAD,iBAAC,eAAkB,AAAK,IAAD;AAChD,qBAA2B,gBAAiB,AAAK,KAAD;AAC9B,kCAAgB,AAAc,aAAD;AAK5C,cAJD,AAAW,UAAD,OACR,AAAc,aAAD,cACJ,6BAAiB,AAAO,MAAD,GAAG,AAAc,aAAD,aAAa,AAAO,MAAD,GAAG,AAAc,aAAD;;AAIpE,YAAnB,AAAO,MAAD,OAAO,KAAK;AACI,YAAtB,SAAA,AAAO,MAAD,GAAI,AAAM,KAAD;;AAEmE,UAApF,+BAAyB,mCAAiB,AAAO,MAAD,0BAAyB,UAAU;;;AAU9D,cAPzB,MAAM;MAAN;AACI,gCAAwC,eAAtB;AAClB,2BAAa;AACb,4BAAc;AACd,8BAAgB;AAChB,0BAAY;AACZ,4BAAc;AACd,2BAAa;;;AAEjB,UAAI,iBAAY;AAC6B,QAA3C,AAAO,MAAD,4BAAkB;;AAG1B,UAAI,kBAAa;AACkB,QAAjC,AAAO,MAAD,uBAAa;;AAGrB,UAAI,oCAAwC,iDAAnB,OAAW,gBAAX,gBAAsB;AACb,QAAhC,AAAO,MAAD,iBAAiB;AACvB,YAAI,AAAa,oCAAyB,AAAE,eAAX;AAG2C,kBAF1E,MAAM;UAAN;AACI,yDAA6B;AAC7B,8DAAkC;;;;AAExC,YAAI,AAAa,mCAAwB,AAAE,eAAX;AAG0C,kBAFxE,MAAM;UAAN;AACI,wDAA4B;AAC5B,6DAAiC;;;;;IAG3C;qBAE2B;AAOxB,MAND,AAAsB,sDACpB,2CACQ,IAAI,aACe,kDAAkB,AAAK,IAAD,aAE3B;IAE1B;0BAGyC,MAA6B,QAAgC;;AACpG,YAAO,AAAuB,iCAAiB,AAAE,eAAhB;AACP,wBAA6B;AACzC,6BAAmB;AAC5B;AACE,oBAAU;AACb,kBAAQ;AACR,6BAAmB;AACnB,uBAAa;AACN,kBAAQ;AACqB,0BAAgB;AACe,MAAzC,+CAA9B,uCAAkC,iCAAmC,eAAd,0BAAzB;AAC9B,eAA0C,OAAqC,gBAA7B;AAC5B,wBAAY,gDAClB,KAAK,gBACH,AAAM,KAAD,GAAG,AAAK,AAAK,IAAN;AAEH,QAAzB,QAAA,AAAM,KAAD,GAAI,AAAK,AAAK,IAAN;AAEb,YAAI,AAAK,IAAD;AAGN,iBAAO,AAAS,AAAO,QAAR,YAAU,UAAU,IAC5B,AAAS,AAAsB,QAAvB,aAAW,UAAU,WAAW,oDAAiC,gBAAgB;AAC1E,4BAAY,AAAS,QAAD,aAAW,UAAU;AACxC,6BAAgC,6BAAF,eAAZ,AAAE,eAAP,KAAK;AACvC,kBAAO,AAAW,AAAM,UAAP;AAMhB,YALD,AAAU,SAAD,QAAa,qBACpB,AAAU,AAAK,SAAN,YACT,AAAU,AAAK,SAAN,WACT,AAAU,AAAK,AAAM,SAAZ,cAA8B,eAAhB,AAAW,UAAD,SACjC,AAAU,AAAK,AAAO,SAAb,eAA+B,eAAhB,AAAW,UAAD;AAEV,YAA1B,AAAY,WAAD,OAAK,SAAS;AACV,YAAf,aAAA,AAAW,UAAD,GAAI;;AAEU,UAA1B,QAAQ,gBAAgB,eAAL,KAAK;AACH,UAArB,mBAAA,AAAiB,gBAAD,GAAI;;AAEA,iCAAmB,gBAAgB;AAChC,sBAAQ,AAAa,yCAAqB,SAAS;AAC1E,cAAI,AAAM,KAAD;AACP;;AAEG,qBAAO,AAAM,AAAM,KAAP;AACuB,UAAxC,mBAAmB,AAAM,AAAM,KAAP;AACxB,mBAAsB,UAAW,AAAM,MAAD,QAAM;AACG,YAA7C,OAAO,AAAK,IAAD,iBAAiB,AAAQ,OAAD;AACC,YAApC,mBAAmB,AAAQ,OAAD;;AAS3B,UALD,OAAY,qBACL,sBAAI,KAAK,AAAK,IAAD,QACb,sBAAI,KAAK,AAAK,IAAD,OACb,sBAAI,AAAK,IAAD,QAAQ,AAAY,4BAC5B,sBAAI,AAAK,IAAD,SAAS,AAAY;AASnC,UALD,cAAmB,qBACjB,AAAK,AAAK,AAAgB,IAAtB,0BAAwB,KAC5B,AAAK,AAAI,AAAgB,IAArB,yBAAuB,KAC3B,AAAK,AAAM,AAAe,IAAtB,0BAAwB,KAC5B,AAAK,AAAO,AAAe,IAAvB,2BAAyB;AAEF,iFAAgB;AACzC,0BAAU,kCAAsB,MAAP,OAAO;AAChC,gCAAgB,gBAAgB;AAChC,kCAAkB,oCAAqC,OAApB,AAAK,IAAD,iBAAC,eAAkB,AAAK,IAAD,4BAAmB,AAAK,IAAD;;;AAChE,2BAAa,AAAK,IAAD;AAC1C,cAAI,UAAU;AACZ,gBAAe,4BAAX,UAAU;AACZ,kBAAI,AAAW,UAAD;AAC0B,gBAAtC,AAAc,aAAD,SAAS,AAAW,UAAD;AACL,gBAA3B,AAAc,aAAD,UAAU;;kBAEpB,KAAe,uCAAX,UAAU;AACnB,kBAAI,AAAW,UAAD;AACgC,gBAA5C,AAAc,aAAD,SAAS,AAAW,UAAD;AACL,gBAA3B,AAAc,aAAD,UAAU;;kBAEpB,KAAe,yCAAX,UAAU;AACnB,kBAAI,AAAW,UAAD;AACsC,gBAAlD,AAAc,aAAD,eAAe,AAAW,UAAD;;;AAGxC,mBAAO,yBAAoD,SAA/B,iBAAX,UAAU,KAAa;;;AAG5C,cAAI,AAAK,IAAD;AACK,4BAAoC,AAAE,eAA1B,AAAK,IAAD,gCAAgC,WAAW;AACJ,YAAlE,AAAc,aAAD,YAAY,AAAU,AAAQ,SAAT,aAAa,AAAY,WAAD;;AAEnC;;;;;;;;;;;;AACzB,yBAAkC,sDAA9B,OAAmB,mBAAnB,eAAiC;AACiC,YAApE,eAAmE,eAAvC,AAAE,eAAnB,mCAA2C,AAAE,AAAK,eAAxB;;AAErB,sBAAM;AAIrB,YAHD,eAAW,sCACJ,GAAG,gBACM,8BAAuB,GAAG;;AAKtB,kBAFtB;;AACI,sCAAmB,aAAa;AAChC,yBAAO,WAAW;;;AACiB,UAAvC,AAAa,aAAA,QAAa,eAAZ,AAAS,uBAAQ;AACN,UAAzB,AAAY,WAAD,OAAK;;;AAGa,MAAjC,2BAAoB,aAAa;AACwC,MAAzE,AAAK,IAAD,qBAAoB,MAAM,+BAA+B,WAAW;IAC1E;8BAEyC;AACvC,YAAO;AACe,mBAA8B,eAAN,AAAC,eAAlB,iCAAmB,GAAG;AACF,QAA/C,+BAAyB,YAAY,AAAK,IAAD;;IAE7C;0BAMuC;AACmB,MAAxD,oBAAc,SAAS,EAAwB;IACjD;0CAE8C;AAC5C,YAAO,AAAU;AACN,yBAAe,AAAa,mCAAwB,AAAE,eAAX;AACtD,UAAI,AAAa,YAAD;AACd;;AAEQ,wBAAc,eAAe,GAAG,YAAY,GAAY,AAAE,eAAX;AAIxD,MAHD,oBACE,gDAA0B,UAAU,gBAAgB,YAAY,IAC1C;IAE1B;2CAE+C;AAC7C,YAAO,AAAU;AACN,yBAAe,AAAa,oCAAyB,AAAE,eAAX;AACvD,UAAI,AAAa,YAAD;AACd;;AAEQ,wBAAc,eAAe,GAAG,YAAY,GAAY,AAAE,eAAX;AAIxD,MAHD,oBACE,gDAA0B,UAAU,gBAAgB,YAAY,IAC1C;IAE1B;qCAEyC;AACvC,YAAO,AAAU;AACD,wBAAc,AAAa,oCAAyB,AAAE,eAAX;AAC1C,qBAAW,mBAAa,AAAY,WAAD;AACpD,UAAI,AAAS,QAAD;AACV;;AAEQ,uBAAa,eAAe,GAAY,AAAE,eAAX,6BAAwB,AAAS,QAAD,MAAnC;AAOrC,MAND,oBACE,gDACc,UAAU,gBACR,AAAS,QAAD,UAEF;IAE1B;sCAE0C;AACxC,YAAO,AAAU;AACD,wBAAc,AAAa,oCAAyB,AAAE,eAAX;AAC1C,yBAAe,uBAAiB,AAAY,AAAM,WAAP,SAAS;AACrE,UAAI,AAAa,YAAD;AACd;;AAEQ,uBAAa,eAAe,GAAa,AAAE,eAAX,6BAAwB,AAAa,YAAD,MAAxC;AAOrC,MAND,oBACE,gDACc,UAAU,gBACR,AAAa,YAAD,UAEN;IAE1B;mBAE4B;AAC1B,aAAO;AACW,oBAAQ,AAAa,oCAAgB,iCAAqB,MAAM;AAChF,YAAI,AAAM,KAAD,cAAa,AAAM,KAAD,YAAY,AAAM,KAAD;AAC1C,gBAAO;;AAET,aAAK,sBAAgB,KAAK;AACxB,gBAAO,MAAK;;AAEI,QAAlB,SAAS,AAAM,KAAD;;IAElB;uBAEgC;AAC9B,aAAO,AAAO,MAAD,IAAI;AACC,oBAAQ,AAAa,oCAAgB,iCAAqB,MAAM;AAChF,YAAI,AAAM,KAAD,cAAa,AAAM,KAAD,YAAY,AAAM,KAAD;AAC1C,gBAAO;;AAET,aAAK,sBAAgB,KAAK;AACxB,gBAAO,MAAK;;AAEU,QAAxB,SAAS,AAAM,AAAM,KAAP,SAAS;;AAEzB,YAAO;IACT;sBAQ+B;AAC7B,eAAS,IAAI,AAAM,KAAD,QAAQ,AAAE,CAAD,GAAG,AAAM,KAAD,MAAM,IAAA,AAAC,CAAA;AAC9B,uBAA8B,eAAf,AAAE,eAAN,sBAAiB,CAAC;AACvC,aAAuB,mDAAa,QAAQ;AAC1C,gBAAO;;;AAGX,YAAO;IACT;WAG0B;;;AACL,MAAb,aAAO,KAAK;AACoB,YAAtC;2BAAyB,WAAO,KAAK;AACC,aAAtC;4BAAyB,YAAO,KAAK;AAIf,MAFtB,sBAAO,8CAAiC,QAAjC;AACH,oCAAY;AACZ,gCAAQ;;;AAC6E,MAAzF,4BAAa,2DAAuC,QAAvC;AAA8C,sCAAc;;;AACtC,MAAnC,AAAQ,oCAAY;AACH,MAAjB;AACwC,MAAxC,AAAY,wCAAY;IAC1B;;;AAIgB,MAAd,AAAK;AACe,MAApB,AAAW;AAC2B,MAAtC,AAAQ,uCAAe;AACoB,MAA3C,AAAY,2CAAe;AACb,MAAR;AAC2B,YAAjC;2BAAyB;AACQ,aAAjC;4BAAyB;IAC3B;;AAIsB,4BAAkB;AAClB,4BAAkB;AACtC,UAAI,eAAe;AACY,QAA7B,kBAAa,eAAe;;AAE9B,UAAI,eAAe;AACY,QAA7B,kBAAa,eAAe;;AAEP,MAAjB;IACR;kBAGuC;AACjB,4BAAkB;AAClB,4BAAkB;AACtC,UAAI,eAAe;AACO,QAAxB,AAAO,OAAA,CAAC,eAAe;;AAEzB,UAAI,eAAe;AACO,QAAxB,AAAO,OAAA,CAAC,eAAe;;AAEG,MAAtB,oBAAc,OAAO;IAC7B;;AAEyB,YAAA,AAAS,mBAAG;IAAC;;AAEZ,kCAAoB,4BAAgB;IAAU;;AAGtE,cAAQ;;;AAEJ,kBAAO,mBAAO,CAAC,AAAO,oBAAQ;;;;AAE9B,kBAAO,mBAAO,KAAK,CAAC,AAAO;;;IAEjC;;AAGE,WAAO;AACP,cAAQ;;;AAEJ,kBAAO,AAAK;;;;AAEZ,kBAAO,AAAK;;;IAElB;0BAEgC;AAC9B,WAAO;AACP,cAAQ;;;AAEJ,kBAAY,uBAAI,KAAK,AAAY,AAAM,WAAP,SAAS,AAAK;;;;AAE9C,kBAAY,uBAAI,KAAK,AAAY,AAAO,WAAR,UAAU,AAAK;;;IAErD;;AAI+B,YAAA,AAAiB,AAAI,0BAAF,MAAK,2BAAuB;IAAI;6BAclB;AACjC,MAA7B;AAEa,wBAAc;AAEJ,kBAAQ,AAAU,SAAD,eACxB,8BAAK,AAAa,yCAAqB,SAAS,mBAAkB,0CAAqC;AACvH,UAAI,AAAM,KAAD;AAEM,0BAAc,AAAa,sCAAkB,AAAU,SAAD,SAAS;AAC/D,oBAAQ,AAAiC,AAAc,kBAAxC,KAAK,+BAAuB,WAAW,OAAG,WAAW;AACjF,cAA2B,qCAAC,oCAAmB,KAAK,EAAE;;AAEzC,oBAAQ,AAAuF,kBAAhF,kBAAY,AAAM,AAAM,KAAP,gBAAc,KAAG,AAAa,AAAK,iCAAQ,AAAM,AAAM,KAAP,sBAAiB,WAAW;AAC5G,kBAAM,AAAmF,kBAA5E,kBAAY,AAAM,AAAK,KAAN,aAAW,KAAG,AAAa,AAAK,iCAAQ,AAAM,AAAK,KAAN,qBAAgB,WAAW;AACnH,cAA2B,qCACzB,oCAAmB,KAAK,EAAE,AAAM,AAAM,KAAP,qBAC/B,oCAAmB,GAAG,EAAE,AAAM,AAAK,KAAN;;IAGnC;6BAUyC;;AACvC,WAAK,AAAM,KAAD,YAAY,AAAM,KAAD;AACzB,cAAO;;AAEoB,MAA7B;AAEuB,kBAAQ,AAAa,yCAC1C,gDAA0B,AAAM,KAAD,sBAAsB,AAAM,KAAD,yBAC1C,0CACD;AAGjB,YAAO,AAAM,KAAD,mBACV,MACA,SAAO,OAAe;;AAAa,2BAAK,gBAAL,OAAO,oBAAgB,AAAS,QAAD;cAA/B,gBAA6C,AAAS,QAAD;;2BAF7E,OAGV,UAAM;IACX;wBAUwC;AACT,MAA7B;AAC+B,MAA/B,iBAAA,AAAe,cAAD,MAAI,AAAC;AACnB,YAAO,AAAa,0CAAqB,mBAAc,cAAc;IACvE;yBAauC;AACR,MAA7B;AACa,wBAAc,AAAa,sCAAkB,aAAa,EAAE;AAE9D,iBAAY,AAA8C,qBAArC,KAAK,KAAK,kBAAa,yBAAoB,AAAY,AAAe,WAAhB,MAAG,yBAAe;AAExG,YAAO,AAAK,KAAD,OAAO,2BAAqB,AAAK,IAAD;IAC7C;6BAGuC;AACxB,MAAb;AACA,YAAO,AAAa;IACtB;6BAGuC;AACxB,MAAb;AACA,YAAO,AAAa,AAAkB,yCAAE;IAC1C;;AAIkC,YAAA,AAAa;IAAmB;2BAKlC;AACnB,wBAAc;AACzB,UAAI,WAAW;AACb,cAAO,YAAW;;AAEhB,kBAAQ;AACZ,eAAS,QAAQ,GAAG,AAAM,KAAD,GAAG,AAAK,IAAD,SAAS,QAAA,AAAM,KAAD,GAAI;AAChD,gBAAQ,AAAK,IAAD,cAAY,KAAK;;;;;;;;AAOf,cAAV,QAAA,AAAM,KAAD,GAAI;;;;AAGf,YAAO,+BAAwB,KAAK;IACtC;uBAE+B;;AAClB,qBAAgB;AAChB,sBAAyB,qBAAT,cAAY,QAAQ;AAClC,sBAAY,AAAoB,yCAAY,OAAT,QAAQ,EAAR,eAAY;AAE5D,UAAI,AAAS,QAAD;AACG;AACb,YAAI,AAAM,KAAD;AACsE,UAA7E,kBAAkB,AAAoB,4BAAG,AAAgC,2BAAX,kBAAa;;AAE/C,UAA5B,8BAAsB,KAAK;AACU,UAArC,kBAAkB,AAAa;;AAEjC,cAAY,uBAAI,eAAe,EAAE,SAAS;;AAOlB,+BAA0B;AACzC,uCAA6B,AAAS,AAI7C,QAJ4C,KAAI,KACzB,oCAApB,OAAM,iBAAW,eACjB,wCAAsB,iBAAyB,oCAC/C,kBAAkB,cAChB,AAAmB,kBAAD,8BAA8B,AAAmB,kBAAD;AAK3E,UAAI,AAAS,QAAD,KAAI,MAAM,0BAA0B;AAI9C,cAAO,AAAa,AAAS,iCAAG;AACJ,QAA5B,8BAAsB,KAAK;AAC3B,cAAO,AAAa;;AAEtB,UAAI,AAAS,QAAD,IAAI,QAAQ;AACtB,cAAO,UAAS;;AAEU,MAA5B,8BAAsB,KAAK;AACd,sBAAY,AAAoB,wCAAE,QAAQ;AACvD,YAAO,mBAAY,AAAa,4BAAQ,SAAS,EAAE,SAAS;IAC9D;8BAGwC;AACtC,YAAO,wBAAiB,KAAK;IAC/B;8BAGwC;AACtC,YAAO,wBAAiB,KAAK;IAC/B;oCAGoD;AACrB,MAA7B;AACA,YAAO,AAAa,qDAAgC,QAAQ;IAC9D;gBAGwB;AAAa;IAAI;oBAIH;;UAA0B;AAEzD,oBAAU;AAEG,qBAAW,AAAa;AAC1C,UAAI,QAAQ;AACG,gCAAoB,AAAS,QAAD,MAAG;AACzB,2BAAe,AAAa,yCAAqB,iBAAiB;AACvE,mBAAO,AAAS,QAAD,oBAAoB,YAAY;AAC7D,YAAS,0BAAL,IAAI;AACwB,UAA9B,AAAO,MAAD,KAAK,0CAAa,IAAI;AACd,UAAd,UAAU;;;AAIH,kBAAQ;AACf,uBAAa;AACjB,aAAO,KAAK,YAAY,AAAW,UAAD,GAAsC,AAAE,eAArC,AAAa;AAC3B,6BAAmC,6BAAF,eAAhB,AAAM,KAAD;AAC7B,+BAAoB,yCAChC,AAAe,AAAO,cAAR,YACd,AAAe,AAAO,cAAR,YACd,MAHgC;AAI/B,oBACD,AAAe,cAAD,QACd,AAAe,cAAD,QACd,AAAe,cAAD;;;AAEL,oBAAQ,AAAO,MAAD,mCACZ,SAAS,YACV,QAAQ,WACT,SAAkB,QAAe;AACxC,iBAAO,AAIN;AAHc,mCAAkB,AAAS,AAAyB,QAA1B,MAAG,AAAe,cAAD,cAA+B,eAApB,AAAe,cAAD;AACjF,oBAA4C,AAAM,AAChD,EADM,AAAY,AAAG,WAAJ,MAAM,AAAe,cAAD,wBACG,AAAM,CAA1C,AAAY,AAAG,WAAJ,MAAM,AAAe,cAAD;;AAEvC,kBAAY,AAAE,gBAAP,KAAK,UAAU,MAAM,aAAY,WAAW;;AAGvD,YAAI,KAAK;AACP,gBAAO;;AAEgB,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAEhB,YAAO,QAAO;IAChB;eAE0B;;IAAI;;;AAAJ;;IAAI;qBACE;;IAAU;;;AAAV;;IAAU;gBAGZ,OAAuB;;AACnD,WAAO,sBAAiB,KAAK,EAAE,KAAK;AACpC,UAAU,2BAAN,KAAK;AACP,cAAQ;AAER,aAAK;AAEmB,UAAtB,AAAK,sBAAW,KAAK;AACO,UAA5B,AAAW,4BAAW,KAAK;;;IAGjC;;AAS4C;IAA6B;2BAM9B;AACI,MAA7C,6BAAuB,AAAQ,OAAD;AACwB,MAAtD,sCAAgC,AAAQ,OAAD;IACzC;kBAQkC;AACa,MAA7C,6BAAuB,AAAQ,OAAD;IAChC;qBACmC;AACjC,YAAQ;AACc,MAAtB,mBAAc,OAAO;IACvB;;AASkD,MAAhD,4BAA4C;IAC9C;;AAEE,YAAQ;AACG,MAAX;IACF;;AASoD,MAAlD,wBAAwC;IAC1C;;AASoD,MAAlD,wBAAwC;IAC1C;;AAEE,YAAQ;AACS,MAAjB;IACF;;UAYqD;AACQ,MAA3D,6BAA2C,eAApB,oCAA8B,KAAK;IAC5D;;;UAMwC;UAAc;UAAmC;AACvF,YAAO,AAAM,KAAD;AACZ,YAAO,AAAK,IAAD;AACgE,MAA3E,8BAAsB,AAAY,qCAAoB,AAAY;AAC/C,yBAAe,AAAa,yCAAqB,mBAAc,AAAK,IAAD,MAAG;AACrE,uBAAa,AAAG,EAAD,WAC/B,OACA,AAAa,yCAAqB,mBAAc,AAAG,EAAD,MAAG;AAE/C,uBAAa,AAAa,YAAD;AACzB,0BAAkC,cAAnB,UAAU,gBAAV,OAAY,aAAZ,eAAsB,AAAa,YAAD;AAEvC,yBAAe,gDACrB,UAAU,gBACR,YAAY,YAChB,AAAa,YAAD;AAGU,MAAlC,oBAAc,YAAY,EAAE,KAAK;IACnC;;UAKiD;AACc,MAA7D,+BAA6C,eAApB,oCAA8B,KAAK;IAC9D;;UAU0C;UAAc;UAAmC;AACzF,YAAO,AAAM,KAAD;AACZ,YAAO,AAAK,IAAD;AACkB,MAA7B;AACmB,yBAAe,AAAa,yCAAqB,mBAAc,AAAK,IAAD,MAAG;AACrE,qBAAW,uBAAiB,YAAY;AACzC,uBAAa,AAAG,EAAD,WAAW,YAAY,GAAG,AAAa,yCAAqB,mBAAc,AAAG,EAAD,MAAG;AAC7F,mBAAS,AAAW,UAAD,SAAI,YAAY,IAAG,QAAQ,GAAG,uBAAiB,UAAU;AACrF,mCAAyB,AAAS,AAAM,QAAP,SAAS,AAAO,MAAD;AAS1D,MAPD,oBACE,gDACc,sBAAsB,GAAG,AAAS,AAAK,QAAN,eAAe,AAAS,AAAO,QAAR,cAAlC,gBACpB,sBAAsB,GAAG,AAAO,AAAO,MAAR,iBAAiB,AAAO,AAAK,MAAN,YAAhC,YAC1B,AAAS,QAAD,aAEpB,KAAK;IAET;;UAKqD;AACnD,YAAO,AAAM,KAAD;AACiB,MAA7B;AACA,YAAO,AAAqB;AACT,qBAAW,AAAa,yCAAqB,mBAAkC,AAAE,eAAtB,iCAAwB;AACtF,iBAAO,AAAa,oCAAgB,QAAQ;AACzC;;;;;;;;;AACnB,UAAI,AAAS,AAAO,QAAR,WAAW,AAAK,IAAD;AACiC,QAA1D,mBAA6B,kDAAkB,AAAK,IAAD;;AAEsC,QAAzF,mBAA6B,kDAAkB,AAAK,IAAD,gBAA6B;;AAEhD,MAAlC,oBAAc,sBAAc,KAAK;IACnC;uBAE4C;AACf,MAA3B;AAEA,UAAI,AAAS,AAAO,QAAR,WAAW,AAAU;AAC/B,cAAqB,6CACnB,iCAAqB,AAAU,iCAA+B;;AAIlE,UAAI;AACF,cAAO,iDAA0B,iBAAiB,AAAU;;AAE9C,iBAAO,AAAa,oCAAgB,QAAQ;AAClD;AACV,cAAQ,AAAS,QAAD;;;AAGyB,YAArC,kBAAkB,AAAS,AAAO,QAAR,UAAU;AACpC;;;;AAEiC,YAAjC,kBAAkB,AAAS,QAAD;AAC1B;;;AAUJ,UAAsB,mDAAa,AAAU,4BAAW,eAAe,MAChE,AAAgB,eAAD,GAAG;AACvB,cAAO,AAAsB;AACZ,2BAAe,uBAAiB,AAAK,IAAD;AACrD,gBAAQ;;;AAEJ,kBAAI,AAAa,YAAD;AACG,+BAAW,mBAAa,AAAK,IAAD;AAC7C,oBAAI,AAAS,QAAD;AACV,wBAAqB,mDAAkB,AAAS,QAAD;;AAEjD,sBAAO,iDACO,AAAS,QAAD,uBACN,AAAS,QAAD;;AAG1B,oBAAO,iDACO,AAAa,YAAD,sBACV,AAAS,QAAD;;;;AAGxB,kBAAI;AACF,oBAAI,AAAa,YAAD;AACd,wBAAO,iDACO,AAAS,QAAD,uBACN,AAAS,AAAO,QAAR,UAAU;;AAGpC,sBAAO,iDACO,AAAa,YAAD,sBACV,AAAS,QAAD;;AAG1B;;;;;;;AAKA;;;;AAIN,YAAO,iDAA0B,AAAK,IAAD,sBAAsB,AAAK,IAAD;IACjE;uBAa2D;UAAmB;AAC5E,UAAI,AAAW,oBAAG;AACgD,QAAhE,AAAa,6CAAgD;AAC7D,cAA8B;;AAErB,kBAAQ;AACe,kCAAwB,uCAAmC,iBAAkC;AAC3H,uBAAa;AAGF,2BAAiB,sCAAyB,AAAY,WAAD;AAInB,MAAjD,iBAAiB,AAAe,cAAD,MAAG;AAClC,aAAO,KAAK;AACF;AACG;AACX,aAAK,GAAG;AAIL,UAHD,AAAM,KAAD,QACH,cAAc,mBACE;AAEI,UAAtB,YAAY,AAAM,KAAD;AACjB,kBAAQ,AAAiB,AAAa,gCAAZ,UAAU;;;AAI/B,gBAFD,iBAAiB,AAAM,KAAD,uBACkB,eAAtC,AAAiB,AAAa,gCAAZ,UAAU;AAE9B;;;;;;;;AAMqB,gBAArB,iBAAiB;AACjB;;;;AAGJ,gBAAO,AAAiB,AAAa,AAAU,gCAAtB,UAAU,gBAAuC;AAC5B,UAA9C,YAAY,AAAM,KAAD,cAAc,cAAc;;AAO9C,QALD,AAAqB,qBAAA,QAAC,UAAU,EAAI,kDAC5B,SAAS,aACJ,AAAiB,AAAa,gCAAZ,UAAU,uBAC7B,AAAiB,AAAa,gCAAZ,UAAU,4BACtB,cAAc;AAEP,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAEhB,YAAO,sBAAqB;IAC9B;;AAGa,kBAAQ;AACf,uBAAa;AACjB,aAAO,KAAK,YAAY,AAAW,UAAD,GAAsC,AAAE,eAArC,AAAa;AAC3B,6BAAmC,6BAAF,eAAhB,AAAM,KAAD;AAI1C,QAHD,AAAe,cAAD,UAAU,kBACa,AAAC,AAAa,eAAjD,AAAa,mDAAwB,UAAU,QACZ,AAAC,AAAa,eAAjD,AAAa,mDAAwB,UAAU;AAEuB,QAAxE,AAAe,cAAD,SAA6C,AAAC,eAArC,AAAa,oDAAyB,UAAU;AAC9C,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;IAElB;;UAE0B;UAAuB;AAC/C,YAAO,AAAiB,QAAT,aAAY,QAAQ;AACtB,8BAAyB,sBAAI,KAAK,AAAS,QAAD,GAAG;AAC7C,8BAAyB,sBAAI,QAAQ,EAAE,iBAAiB;AACxD,yBAAe,qBAAe,iBAAiB;AAC/C,yBAAe,iBAAY,iBAAiB,GAAG,iBAAiB;AAI5E,MAHD,AAAa,sCACC,YAAY,YACZ,YAAY;AAEQ,MAAlC,gCAA0B,QAAQ;AACA,MAAlC,gCAA0B,QAAQ;IACpC;;AAsBE,YAAO,AAAY;AACwD,MAA3E,8BAAsB,AAAY,qCAAoB,AAAY;IACpE;0BAEU;;IAAe;;;AAAf;;IAAe;;AAcvB,YAAO,AAAsB;AAC7B,cAAQ;;;;AAGoE,YAAxE,wBAAuB,qBAAS,KAAK,KAAK,kBAAa,AAAa,oBAAE;AACtE;;;;;;;AAKgH,YAAhH,wBAAuB,qBAAS,QAA0B,kBAAa,AAAa,oBAAE,AAAI;AAC1F;;;IAEN;2BAImC;AACpB,yBAAe,mBAAc,YAAY;AACzC,0BAAgB,AAAI,MAAE;AACnC,YAAO,mBACL,AAAa,AAAG,YAAJ,iBAC0B,AAAQ,AAAgB,CAAzD,AAAa,AAAG,YAAJ,MAAM,aAAa,cAAY,aAAa,GAAG,AAAa,YAAD,MACxE,KACJ,AAAa,AAAG,YAAJ,iBAC0B,AAAQ,AAAgB,CAAzD,AAAa,AAAG,YAAJ,MAAM,aAAa,cAAY,aAAa,GAAG,AAAa,YAAD,MACxE;IAER;;AAME,eAA2B,OAAQ;AACjC,gBAAQ,AAAK,IAAD;;;;;AAIR,oBAAO;;;;;;AAIP;;;;AAGN,YAAO;IACT;qBAGqC;AACnC,WAAK;AACH,aAAO,0CACG;AAEV,cAAY;;AAEgE,MAA9E,AAAa,6CAAyB,uBAAgB,WAAW,QAAO;AACG,MAA3E,8BAAsB,AAAY,WAAD,qBAAqB,AAAY,WAAD;AACpD,kBAAQ,iBAAY,AAAY,WAAD,YAAY,AACnD,WAD8D,gBAC/C,AAAa,AAAK,AAAM,iCAAE;AAC9C,YAAO,iBAAK,KAAK,EAAE,AAAY,WAAD,iBAAiB,uBAAiB,AAAY,WAAD;IAC7E;;;AAIuB,wBAAmB;AACa,MAArD,gCAAyB,uBAAgB,WAAW;AACS,MAA7D,AAAa,6CAAyB;AACT,MAA7B;AACgB,MAAhB;AACwB,MAAxB;AASW,4BAAkB,AAAa;AAC7B,kBAAQ,iBAAY,AAAY,WAAD,YAAY,AACnD,WAD8D,gBAC/C,AAAa,AAAK,AAAM,iCAAE;AACjC,4BAAkB,uBAAiB,AAAY,WAAD;AACK,MAAhE,YAAO,gBAAK,KAAK,EAAE,AAAY,WAAD,iBAAiB,eAAe;AACnD,wBAAc,gBAAK,AAAgB,AAAM,eAAP,SAAS,oBAAc,AAAgB,eAAD;AAE9D,+BAAoC,6BAAM,WAAW;AAEvB,YAAnD;2BAAyB,WAAO,kBAAkB;AACC,aAAnD;4BAAyB,YAAO,kBAAkB;AAEC,MAAnD,yBAAmB,0BAAoB,WAAW;AACJ,MAA9C,AAAO,mCAAuB;AACsB,MAApD,AAAO,mCAAuB,KAAK;IACrC;yCAcmD;AAC1C,0BAAuB;AACjB,qBAAW,CAAC,AAA0B;AACtC,wBAAc,AAAa,AAAO,AAAsB,6BAApB,2BAAsB,AAA0B;AACpF,sBAAY,CAAC,AAA0B;AACvC,uBAAa,AAAa,AAAM,4BAAE,AAA0B;AAEzE,UAAI;AACgD,QAAlD,gBAAgB,AAAgB,eAAD,MAAkB,eAAf;;AAKpC,UAAI,4BAAsB,AAAc,AAAG,aAAJ,MAAM;AACiC,QAA5E,wBAAkB,kBAAO,AAAgB,AAAG,eAAJ,MAAM,SAAS,EAAE,AAAgB;AAC/C,QAA1B,2BAAqB;YAChB,KAAI,6BAAuB,AAAc,AAAG,aAAJ,MAAM;AAC0B,QAA7E,wBAAkB,kBAAO,AAAgB,AAAG,eAAJ,MAAM,UAAU,EAAE,AAAgB;AAC/C,QAA3B,4BAAsB;;AAExB,UAAI,2BAAqB,AAAc,AAAG,aAAJ,MAAM;AACiC,QAA3E,wBAAkB,kBAAO,AAAgB,0BAAI,AAAgB,AAAG,eAAJ,MAAM,QAAQ;AACjD,QAAzB,0BAAoB;YACf,KAAI,8BAAwB,AAAc,AAAG,aAAJ,MAAM;AAC0B,QAA9E,wBAAkB,kBAAO,AAAgB,0BAAI,AAAgB,AAAG,eAAJ,MAAM,WAAW;AACjD,QAA5B,6BAAuB;;AAGZ,qBAAW,AAAgB,AAAG,eAAJ,MAAM,AAAgB;AAChD,qBAAW,AAAgB,AAAG,eAAJ,MAAM,AAAgB;AAChD,sBAAiB,sBAAS,sBAAI,QAAQ,EAAE,SAAS,GAAG,UAAU;AAC9D,sBAAiB,sBAAS,sBAAI,QAAQ,EAAE,QAAQ,GAAG,WAAW;AAC9D,2BAAiB,kBAAO,SAAS,EAAE,SAAS;AAEzD,UAAI,AAAS,QAAD,GAAG,SAAS,IAAI,AAAc,AAAG,aAAJ,MAAM;AACpB,QAAzB,2BAAqB;YAChB,KAAI,AAAS,QAAD,GAAG,UAAU,IAAI,AAAc,AAAG,aAAJ,MAAM;AAC3B,QAA1B,4BAAsB;;AAExB,UAAI,AAAS,QAAD,GAAG,QAAQ,IAAI,AAAc,AAAG,aAAJ,MAAM;AACpB,QAAxB,0BAAoB;YACf,KAAI,AAAS,QAAD,GAAG,WAAW,IAAI,AAAc,AAAG,aAAJ,MAAM;AAC3B,QAA3B,6BAAuB;;AAGQ,MAAjC,wBAAkB,eAAe;AAEjC,YAAO,eAAc;IACvB;sBAI+C,OAAc,eAA4B;UAA4B;AACnH,YAAO,AAAM,KAAD;AACZ,YAAO,AAAc,aAAD;AACpB,YAAO,AAAiB,gBAAD;AACvB,UAAI,AAAM,KAAD,KAA4B;AACN,QAA7B,wBAAyB;AACH,QAAtB,wBAAkB;AACU,QAA5B,6BAAuB;AACE,QAAzB,0BAAoB;AACO,QAA3B,4BAAsB;AACM,QAA5B,6BAAuB;;AAE+B,MAAxD,0BAAoB,AAAM,KAAD,KAA4B;AACF,MAAnD,2CAAqC,cAAc;AACnD,UAAI;AAC4C,QAA9C,oCAA8B,gBAAgB;AAChC,6BAAiB;AACd,6BAAiB,AAAe,cAAD,WACiC,eAAlE,4BAAK,sCAAwC,6BAAM,cAAc,KAC5E;AAC+F,QAAnG,AAAc,yCAAqB,AAAe,AAA6B,cAA9B,aAAa,6BAAuB,aAAa;;AAE3D,QAAvC,AAAc,yCAAqB;;AAEsC,MAA3E,AAAc,uCAAmB,AAAmC;IACtE;qBAEkD,eAAoC;AAGvE,mBAAS,AAAa,sCAAkB,aAAa,EAAO;AACzE,eAA0B,cAAe,QAAO;AAC9C,YAAI,AAAY,AAAS,WAAV,YAAY,AAAO,MAAD;AAC/B,gBAAO,mCAAsB,AAAY,WAAD,aAAa,kBAAO,AAAO,MAAD,KAAK,AAAY,WAAD;;;AAGtF,YAAO,AAAc,AAAO,aAAR,YAAW,sBAAG,AAA4C,0CAAd,aAAa;AAC7E,YAAO,mCACA,mBAAI,GAAG,AAAQ,AAAO,OAAR,YAAU,IAC7B,kBAAO,AAAO,MAAD,KAAK,AAAQ,OAAD,gBAAc,AAAQ,AAAK,AAAS,OAAf,mBAAiB,AAAQ,AAAK,OAAN,kBAAgB;IAE1F;+BAgBiE;AACpC,oBAAU,AAAa;AACtB,wBAAc,qBAAe,aAAa,EAAE,OAAO;AAC/E,YAAgC,0CAC9B,MACA,OAAO,EACP,aAAa,EACb,AAAY,WAAD,MACX,AAAY,WAAD;IAEf;qBAEoC,SAAgB;AACvB,MAA3B;AACa,4BAAkB,AAAO,MAAD,MAAG;AAExC,UAAI,2BAAsB;AAC0B,QAAlD,wCAAkC,eAAe;;AAGlC,4BAAkB;AAClB,4BAAkB;AAInC,UAAI,eAAe;AAC0B,QAA3C,AAAQ,OAAD,YAAY,eAAe,EAAE,MAAM;;AAGO,MAAnD,AAAa,0BAAM,AAAQ,OAAD,SAAS,eAAe;AAEvC,kBAAQ;AACf,uBAAa;AAKjB,aAAO,KAAK,YAAY,AAAW,UAAD,GAAsC,AAAE,eAArC,AAAa;AAC3B,6BAAmC,6BAAF,eAAhB,AAAM,KAAD;AAE9B,oBAA4B,eAApB,AAAe,cAAD;AAWlC,QAVD,AAAQ,OAAD,eACL,uBACA,AAAgB,eAAD,MAAG,AAAe,cAAD,UACxB,uCAAgB,KAAK,EAAE,KAAK,EAAE,KAAK,GAC3C,SAAiB,SAAgB;AAI9B,UAHD,AAAQ,OAAD,YACA,eAAL,KAAK,GACL,MAAM;;AAIa,QAAzB,QAAQ,gBAAW,KAAK;AACT,QAAf,aAAA,AAAW,UAAD,GAAI;;AAGhB,UAAI,eAAe;AAC0B,QAA3C,AAAQ,OAAD,YAAY,eAAe,EAAE,MAAM;;IAE9C;yBAEwC,SAAkC,WAAkB;AACnF,uBAAa,AAAS,AAAI,SAAJ,QAAC;AAI7B,MAHD,aAAa,kBACX,kBAAY,AAAW,UAAD,KAAK,KAAK,AAAK,kBACrC,kBAAY,AAAW,UAAD,KAAK,KAAK,AAAK;AAMtC,MAJD,AAAQ,OAAD,WACL,iCAAkB,mCAA8B,AAAW,UAAD,MAAG,MAAM,KAC7D,uCACC;AAET,UAAI,AAAU,AAAO,SAAR,cAAW;AACf,uBAAW,AAAS,AAAI,SAAJ,QAAC;AAI3B,QAHD,WAAW,kBACT,kBAAY,AAAS,QAAD,KAAK,KAAK,AAAK,kBACnC,kBAAY,AAAS,QAAD,KAAK,KAAK,AAAK;AAMpC,QAJD,AAAQ,OAAD,WACL,iCAAkB,iCAA4B,AAAS,QAAD,MAAG,MAAM,KACzD,uCACC;;IAGb;UAG2B,SAAgB;AACZ,MAA7B;AACA,UAAI,4BAAsB,sBAAqB;AAQ5C,QAPD,AAAe,6BAAQ,AAAQ,OAAD,cAC5B,uBACA,MAAM,EACC,AAAK,oBAAE,sBACd,sCACc,6BACJ,AAAe;;AAGA,QAA3B,AAAe,6BAAQ;AACQ,QAA/B,qBAAe,OAAO,EAAE,MAAM;;AAEX,sBAAiB;AACtC,UAAI,SAAS,YAAY,AAAU,SAAD;AACwC,QAAxE,yBAAmB,OAAO,EAAE,8BAAyB,SAAS,GAAG,MAAM;;IAE3E;iCAKgD;;AAC9C,cAAQ;;;AAEJ,kBAAO;;;;;;AAIP,kBAAO,4BAA4B,AAAK,oBAAE,aAAO;;;IAEvD;wBAGqD;AACd,MAA/B,0BAAoB,UAAU;AACqB,MAAzD,AAAW,UAAD,KAAK,6BAAc,eAAe;AACsC,MAAlF,AAAW,UAAD,KAAK,uDAAyC,cAAc;AACrB,MAAjD,AAAW,UAAD,KAAK,gCAAY,YAAY;AACU,MAAjD,AAAW,UAAD,KAAK,gCAAY,YAAY;AAC2C,MAAlF,AAAW,UAAD,KAAK,wCAA0B,WAAW,6BAAuB;AACZ,MAA/D,AAAW,UAAD,KAAK,6BAAc,kBAAkB;AACmB,MAAlE,AAAW,UAAD,KAAK,mCAAe,mBAAmB;AACgC,MAAjF,AAAW,UAAD,KAAK,0CAA4B,UAAU,4BAAsB;AACD,MAA1E,AAAW,UAAD,KAAK,iDAAmC,aAAa;AACM,MAArE,AAAW,UAAD,KAAK,kDAAoC,UAAU;IAC/D;;AAIE,YAAwB;;AACtB,YAAI,mBACI,SAAF,eAAJ,oCACQ,eACsB;;;IAGpC;;;;QA/4Ec;QACW;QACb;QACH;QACA;QACc;QACf;QACa;QACA;QACd;QACA;QACA;QACO;QACL;QACA;QACQ;QACS;QACnB;QACA;QACA;QACA;QACe;QACL;QACR;QACF;QACG;QACD;QACC;QACA;QACH;QACE;QACA;QACW;QACD;QACX;QACD;QACM;QACJ;QACF;QACS;QACS;QACA;QACN;IA4FS;IACA;+CAsCD;IAkBJ;IA8BA;2CAUW;IAGN,0BAAoB;IACpB,qCAA+B;IAG1B;IAUA;IAWzB;IACA;IAWF;IAwHoB,kCAA4B,kCAAoB;IAahD,gCAA0B,kCAAoB;IAkJtD;IACoB;IA2HjC,kBAAY;IAYZ,mBAAa;IAYb,kBAAY;IA4HV,qBAAe;IAsGjB,0BAAoB;yDACP;IA8EX,yBAAmB;IAQrB,sBAAqB;IAYY;IAMH;IAghB9B;kCA2IqB;wCACM;IAgBxB;IACA;IAkPqB;6CAiHnB;IAkHH,wBAAyB;IACxB;IACH,2BAAqB;IACrB,4BAAsB;IACtB,0BAAoB;IACpB,6BAAuB;IACpB;IA4NyB,uBAAiB;IAx1E3C;IACA;IAiBA;IAIS;UAIJ,AAAU,SAAD;UACT,AAAc,aAAD,8BAAU;UACvB,AAAS,AAAQ,QAAT,YAAqB,aAAT,QAAQ,IAAG;UAC/B,AAAS,AAAQ,QAAT,YAAqB,aAAT,QAAQ,IAAG;UAC/B,AAAqB,oBAAD;UACpB,AAAmB,kBAAD;UAEtB,AAAS,AAA+B,QAAhC,YAAc,AAAS,QAAD,YAAuB,aAAT,QAAQ,kBAAI,QAAQ,sBACjE;UAEK,AAAQ,OAAD;UAEH,CAAR,OAAO,IAAK,AAAS,QAAD,YAAY,AAAS,QAAD,6BACzC;UAEK,AAAgB,eAAD;UACf,AAAO,MAAD;UACN,AAAc,aAAD;UACb,AAAe,cAAD;UACd,AAAqB,oBAAD;UACpB,AAA2B,kBAAT,aAA+B,AAAW,AAAO,8CAArC,kBAAkB,eAAsB;UACtE,AAAY,WAAD;UACX,AAAsB,qBAAD;UACrB,AAAoB,WAAT,aAAY,AAAY,WAAD,IAAI;UACtC,AAAa,AAAQ,YAAT,YAAyB,aAAb,YAAY,KAAI;UACxC,AAAS,QAAD;UACR,AAAU,SAAD;UACT,AAAiB,gBAAD;UAChB,AAAqB,oBAAD;UACpB,AAAoB,mBAAD;UACnB,AAAa,YAAD;IACN,sBAAE,wCACP,IAAI,aACC,SAAS,iBACL,aAAa,mBACX,eAAe,UACxB,MAAM,YACJ,AAAS,QAAD,KAAI,IAAI,IAAI,kBAClB,UAAU,sBACF,kBAAkB,kBACtB,cAAc;IAEpB,qBAAa,MAAX,UAAU,EAAV,cAAc,kCAAoB;IACtC,kBAAE,QAAQ;IACV,kBAAE,QAAQ;IACX,iBAAE,OAAO;IACP,mBAAE,SAAS;IACd,gBAAE,MAAM;IACH,qBAAE,WAAW;IACZ,sBAAE,YAAY;IACV,0BAAE,oBAAoB;IACZ,oCAAE,0BAA0B;IACtC,0BAAE,gBAAgB;IACd,+BAAE,oBAAoB;IACxB,6BAAE,kBAAkB;IACpB,4BAAE,kBAAkB;IAC3B,qBAAE,WAAW;IAChB,kBAAE,QAAQ;IACT,mBAAE,SAAS;IACR,sBAAE,YAAY;IAClB,mBAAW,OAAT,QAAQ,EAAR,eAAY;AAxG7B;AAyGE,UAAO,AAAY;AACnB,UAA0B,CAAlB,AAAY,2BAAS,WAAW;AAES,IAAjD,AAAkB,yCAAiB,cAAc;AACH,IAA9C,AAAkB,2CAAmB,SAAS;AACe,IAA7D,AAAkB,+CAAuB,oBAAoB;AACF,IAA3D,AAAkB,8CAAsB,mBAAmB;AAEE,IAA7D,AAA6B,oDAAiB,eAAe;AACE,IAA/D,AAA6B,sDAAmB,eAAe;AAEzB,IAAtC,AAAc,iCAAa,WAAW;AACG,IAAzC,AAAc,mCAAe,YAAY;AACA,IAAzC,AAAc,mCAAe,YAAY;AACkB,IAA3D,AAAc,4CAAwB,qBAAqB;AAEhB,IAA3C,+BAAyB,iBAAiB;AACnB,IAAvB,qBAAe,OAAO;AACN,IAAhB,YAAO,QAAQ;AACe,IAA9B,gCAAyB,IAAI;EAC/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6xE8B,YAAa,wBAAP;IAAyB;;AAG/B;IAAI;;AAGR;IAAI;;AAEQ;IAAQ;gBAEX;;AACjC,UAAa,YAAT,QAAQ,EAAI;AACd;;AAG2B,uBAAa;AACvB,MAAnB,iBAAW,QAAQ;AAEnB,qBAAwC,cAApC,QAAQ,gBAAR,OAAU,kBAAc,UAAU,IAAlC,eAAuC;AACzB,QAAhB;;AAGF,UAAI;AACwC,gBAA1C,UAAU;wBAAV,OAAY,+BAAe;AACU,gBAArC,QAAQ;wBAAR,OAAU,4BAAY;;IAE1B;UAG2B,SAAgB;AACnB,mBAAc;AACpC,YAAO,AAAO,MAAD;AACgB,oBAAe;AAC5C,UAAI,OAAO,YAAY,MAAM;AACS,QAApC,AAAO,MAAD;AACqC,QAA3C,AAAQ,OAAD,OAAO,AAAQ,OAAD,SAAS,WAAM,MAAM;;IAE9C;WAG0B;;;AACL,MAAb,aAAO,KAAK;AACmB,YAArC;2BAAU,0BAAY;IACxB;;;AAI0C,YAAxC;2BAAU,6BAAe;AACX,MAAR;IACR;qBAGqC;AAAgB,YAAA,AAAY,YAAD;IAAQ;;;QAzD/C;IACX,iBAAE,OAAO;AAClB;;EAAO;;;;;;;;;;;;;;;;;;;;;EA2Gd;;;;;;;;;;;;;;;AAW+B;IAAe;uBAElB;AACxB,UAAa,YAAT,QAAQ,EAAI;AACd;;AAEwB,MAA1B,wBAAkB,QAAQ;AACT,MAAjB;IACF;;AAEmC;IAAiB;yBAEpB;AAC9B,UAAa,YAAT,QAAQ,EAAI;AACd;;AAE0B,MAA5B,0BAAoB,QAAQ;AACX,MAAjB;IACF;;AAK8C;IAAqB;6BAExB;AACzC,YAAO,AAAM,KAAD;AACZ,UAAI,AAAsB,gCAAG,KAAK;AAChC;;AAE2B,MAA7B,8BAAwB,KAAK;AACZ,MAAjB;IACF;;AAK4C;IAAoB;4BAEvB;AACvC,YAAO,AAAM,KAAD;AACZ,UAAI,AAAqB,+BAAG,KAAK;AAC/B;;AAE0B,MAA5B,6BAAuB,KAAK;AACX,MAAjB;IACF;UAGkB,QAAa,MAAqB;AACjC,kBAAQ;AACZ,kBAAQ;AACrB,UAAI,AAAM,KAAD,YAAY,AAAM,KAAD,YAAY,AAAM,KAAD;AACzC;;AAG0B,MAA5B,AAAe,4BAAQ,KAAK;AACV,wBAAc,AAAe,cAAD;AAC1B,kBAAQ,AAAY,WAAD,sBACrC,gDAA0B,AAAM,KAAD,sBAAsB,AAAM,KAAD,yBAC1C,0CACD;AAGjB,eAAmB,MAAO,MAAK;AAK5B,QAJD,AAAO,MAAD,UACJ,AAAI,AAAS,AACV,GADA,gBAAgB,AAAe,cAAD,0BACf,qBAAS,KAAG,KAAG,AAAY,WAAD,QAAQ,AAAY,WAAD,WAC/D;;IAGN;kBAG0C;AACxC,UAAI,AAAU,WAAW,KAAE;AACzB,cAAO;;AAET,UAAI,AAAY,WAAD;AACb,cAAO,AAAuB,gCAAG;;AAEnC,YAII,EAJe,kCAAZ,WAAW,kBACX,AAAY,WAAD,iBAAmB,qCAC9B,AAAY,WAAD,mBAAqB,0BAChC,AAAY,WAAD,0BAAyB,6BACpC,AAAY,WAAD,yBAAwB;IAC5C;;;QA7Fe;QACJ;IAIC,sBAAiB;IA0BX,8BAA0C;IAc3C,6BAAwC;IA3ClC,0BAAE,gBAAgB;IACpB,wBAAE,cAAc;AAJrC;;EAIqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGb;IAAY;oBAEf;AACnB,UAAI,AAAY,qBAAG,KAAK;AACtB;;AAEkB,MAApB,qBAAe,KAAK;AACH,MAAjB;IACF;;;AAOiB;kCAAsB,oLAAtB;IAA6B;;AAErB;IAAW;mBAEd;;AACpB,UAAsB,sCAAlB,OAAY,sBAAS,KAAK,iBAAL,OAAO;AAC9B;;AAGiB,MAAnB,oBAAc,KAAK;AACF,MAAjB;IACF;;AAE4B;IAAa;qBAEhB;AACvB,UAAkB,YAAd,qBAAiB,KAAK;AACxB;;AAEmB,MAArB,sBAAgB,KAAK;AACJ,MAAjB;IACF;;AAE2B;IAAa;qBAEhB;AACtB,UAAI,AAAc,4BAAG,KAAK;AACxB;;AAEmB,MAArB,sBAAgB,KAAK;AACJ,MAAjB;IACF;;AAEoC;IAAsB;8BAEzB;;AAC/B,UAAiC,iDAA7B,OAAuB,sBAAS,KAAK,iBAAL,OAAO;AACzC;;AAG4B,MAA9B,+BAAyB,KAAK;AAC9B,UAAI;AACe,QAAjB;;IAEJ;;AAEgC;IAAmB;2BAEtB;AAC3B,UAAwB,YAApB,2BAAuB,KAAK;AAC9B;;AAEyB,MAA3B,4BAAsB,KAAK;AACV,MAAjB;IACF;uBAE+B,QAAuB,gBAAsB,YAAyB;;AACxF,2BAAiB,AAAe,cAAD;AAC7B,wBAAc,AAAe,AAAa,cAAd,kCAAgC,YAAY,EAAE,cAAc;AAChG,sBAAY,AAAe,cAAD,OAAO,AAAY,WAAD,MAAG;AAEtC,wBAAc,AAAe,AAAa,cAAd,sCAAoC,YAAY,EAAE,cAAc;AAC1G,UAAI,WAAW;AACb,gBAAQ;;;;AAGS,+BAAyB,aAAZ,WAAW,IAAG,AAAU,SAAD;AAOhD,cALD,YAAiB,qBACf,AAAU,SAAD,OACT,AAAU,AAAI,SAAL,OAAO,AAAW,UAAD,GAAG,GAC7B,AAAU,SAAD,QACT,AAAU,SAAD;AAEX;;;;;;;AAaC,cALD,YAAiB,qBACf,AAAU,SAAD,OACT,AAAU,AAAI,SAAL,UACT,AAAU,SAAD,QACT,WAAW;AAEb;;;;AAIkD,MAAxD,YAAY,AAAU,SAAD,OAAO,AAAe,cAAD;AAC/B,yBAAe,AAAU,SAAD,OAAO,AAAe,cAAD,uBAAsB,AAAU,SAAD;AAEvF,UAAI;AACY,qBAAS;AACM,QAA7B,AAAW,wBAAQ,UAAU;AAC7B,YAAI,AAAO,MAAD;AACiC,UAAzC,AAAO,MAAD,UAAU,YAAY,EAAE;;AAElB,2BAAmB,+BAAkB,YAAY,EAAE,MAAM;AAC7B,UAAxC,AAAO,MAAD,WAAW,UAAU,EAAE;;;AAGD,YAAb,YAAY;MAA/B,AAAkB;IACpB;UAGkB,QAAa,MAAqB;;AAGlD,YAAO,AAAe,cAAD;AACA,sBAAY,AAAe,cAAD;AAI/C,UAAI,AAAU,SAAD,aAAa,AAAU,SAAD;AACjC;;AAGU,+BAA0B;AAEzB,uBAAa,AAAmB,kBAAD,WACnC,kBACL,wBAAmB,6BAAwB;AAC5B,8BAAoB,AAAmB,kBAAD,WACrD,AAAU,SAAD,UACT,AAAe,cAAD;AAElB,UAAI,UAAU;AAC6D,QAAzE,wBAAmB,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE,iBAAiB;;AAG7D,sEAA2B,OAAY,gBAAY;AAEhE,UAAI,AAAmB,kBAAD,YAAY,AAAoB,mBAAD,aAAa;AAChE;;AAMD,MAHD,AAAO,MAAD,WACE,+BAAkB,AAAmB,kBAAD,OAAO,AAAe,cAAD,iBAAgB,mEAC/E;AAAqB,qBAAQ,mBAAmB;;;IAEpD;kBAG0C;AACxC,UAAI,AAAU,SAAM,WAAW;AAC7B,cAAO;;AAGT,UAAI,AAAY,WAAD;AACb,cAAO;;AAET,YAOI,EAPe,mCAAZ,WAAW,KACX,AAAY,WAAD,iBAAgB,oBAC3B,AAAY,WAAD,sBAAqB,sCAChC,AAAY,WAAD,aAAe,iCAC1B,AAAY,WAAD,eAAiB,uBAC5B,AAAY,WAAD,sBAAiB,mCAC5B,AAAY,WAAD,wBAA0B,4CACrC,AAAY,WAAD,qBAAuB;IAC3C;;kDApL4B;IAGvB,qBAAe;IAWf,wBAAmB;IAEZ,kBAAa;yDACR;IAGV;IAWC;IAUD,sBAAuB;IAUvB;IAaD;IAhEsB;AAA5B;;EAA+C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBA6LjB;AAC5B,eAAiC,UAAW;AACb,QAA7B,AAAQ,OAAD,aAAa,QAAQ;;IAEhC;mBAGiC;AAC/B,eAAiC,UAAW;AACV,QAAhC,AAAQ,OAAD,gBAAgB,QAAQ;;IAEnC;UAGkB,QAAa,MAAqB;AAClD,eAAiC,UAAW;AACC,QAA3C,AAAQ,OAAD,OAAO,MAAM,EAAE,IAAI,EAAE,cAAc;;IAE9C;kBAG0C;AACxC,UAAI,AAAU,WAAW,KAAE;AACzB,cAAO;;AAET,WAAgB,4CAAZ,WAAW,KAAwC,AAAY,AAAS,WAAV,uBAAoB,AAAS;AAC7F,cAAO;;AAG6B,wBAAc,AAAY,AAAS,WAAV;AACzB,wBAAc,AAAS;AAC7D,aAAO,AAAY,WAAD,eAAe,AAAY,WAAD;AAC1C,YAAI,AAAY,AAAQ,WAAT,uBAAuB,AAAY,WAAD;AAC/C,gBAAO;;;AAIX,YAAO;IACT;;;QA3CgD;;AAAhD;;EAA2D;;;;;;;;;;;;;;;;MAriGhD,mBAAU;;;MACV,4BAAmB;;;MAIf,oCAA2B;;;MAG/B,8BAAqB","file":"../../../../../../../packages/flutter/src/rendering/paragraph.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__paragraph: paragraph$,
    src__rendering__editable: editable
  };
}));

//# sourceMappingURL=paragraph.dart.lib.js.map
