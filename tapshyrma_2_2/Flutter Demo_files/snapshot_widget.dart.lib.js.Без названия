// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/widgets/snapshot_widget.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/widgets/title.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/proxy_box.dart'], (function load__packages__flutter__src__widgets__snapshot_widget_dart(dart_sdk, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__widgets__title$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__proxy_box$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const widget_inspector = packages__flutter__src__widgets__title$46dart.src__widgets__widget_inspector;
  const debug = packages__flutter__src__widgets__title$46dart.src__widgets__debug;
  const media_query = packages__flutter__src__widgets__title$46dart.src__widgets__media_query;
  const framework = packages__flutter__src__widgets__title$46dart.src__widgets__framework;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  var snapshot_widget = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $runtimeType = dartx.runtimeType;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: snapshot_widget.SnapshotMode.prototype,
        [_Enum__name]: "permissive",
        [_Enum_index]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: snapshot_widget.SnapshotMode.prototype,
        [_Enum__name]: "normal",
        [_Enum_index]: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: snapshot_widget.SnapshotMode.prototype,
        [_Enum__name]: "forced",
        [_Enum_index]: 2
      });
    },
    get C0() {
      return C[0] = dart.constList([C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], snapshot_widget.SnapshotMode);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: snapshot_widget._DefaultSnapshotPainter.prototype
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_name]: "SnapshotWidget",
        [_Location_column]: 9,
        [_Location_line]: 109,
        [_Location_file]: "file:///C:/src/flutter/packages/flutter/lib/src/widgets/snapshot_widget.dart"
      });
    },
    get C6() {
      return C[6] = dart.const(new _js_helper.PrivateSymbol.new('_removeAt', _removeAt));
    },
    get C7() {
      return C[7] = dart.const(new _js_helper.PrivateSymbol.new('_count', _count));
    },
    get C8() {
      return C[8] = dart.const(new _js_helper.PrivateSymbol.new('_listeners', _listeners));
    },
    get C9() {
      return C[9] = dart.const(new _js_helper.PrivateSymbol.new('_reentrantlyRemovedListeners', _reentrantlyRemovedListeners));
    },
    get C10() {
      return C[10] = dart.const(new _js_helper.PrivateSymbol.new('_notificationCallStackDepth', _notificationCallStackDepth));
    },
    get C11() {
      return C[11] = dart.const(new _js_helper.PrivateSymbol.new('_debugDisposed', _debugDisposed));
    },
    get C12() {
      return C[12] = dart.const(new _js_helper.PrivateSymbol.new('_creationDispatched', _creationDispatched));
    },
    get C13() {
      return C[13] = dart.const(new _js_helper.PrivateSymbol.new('_count=', _count_));
    },
    get C14() {
      return C[14] = dart.const(new _js_helper.PrivateSymbol.new('_listeners=', _listeners_));
    },
    get C15() {
      return C[15] = dart.const(new _js_helper.PrivateSymbol.new('_reentrantlyRemovedListeners=', _reentrantlyRemovedListeners_));
    },
    get C16() {
      return C[16] = dart.const(new _js_helper.PrivateSymbol.new('_notificationCallStackDepth=', _notificationCallStackDepth_));
    },
    get C17() {
      return C[17] = dart.const(new _js_helper.PrivateSymbol.new('_debugDisposed=', _debugDisposed_));
    },
    get C18() {
      return C[18] = dart.const(new _js_helper.PrivateSymbol.new('_creationDispatched=', _creationDispatched_));
    }
  }, false);
  var C = Array(19).fill(void 0);
  var I = ["package:flutter/src/widgets/snapshot_widget.dart"];
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  snapshot_widget.SnapshotMode = class SnapshotMode extends core._Enum {
    [_enumToString]() {
      return "SnapshotMode." + this[_name];
    }
  };
  (snapshot_widget.SnapshotMode.new = function(index, name) {
    snapshot_widget.SnapshotMode.__proto__.new.call(this, index, name);
    ;
  }).prototype = snapshot_widget.SnapshotMode.prototype;
  dart.addTypeTests(snapshot_widget.SnapshotMode);
  dart.addTypeCaches(snapshot_widget.SnapshotMode);
  dart.setMethodSignature(snapshot_widget.SnapshotMode, () => ({
    __proto__: dart.getMethods(snapshot_widget.SnapshotMode.__proto__),
    [_enumToString]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(snapshot_widget.SnapshotMode, I[0]);
  dart.setStaticFieldSignature(snapshot_widget.SnapshotMode, () => ['values', 'permissive', 'normal', 'forced']);
  dart.defineLazy(snapshot_widget.SnapshotMode, {
    /*snapshot_widget.SnapshotMode.values*/get values() {
      return C[0] || CT.C0;
    },
    /*snapshot_widget.SnapshotMode.permissive*/get permissive() {
      return C[1] || CT.C1;
    },
    /*snapshot_widget.SnapshotMode.normal*/get normal() {
      return C[2] || CT.C2;
    },
    /*snapshot_widget.SnapshotMode.forced*/get forced() {
      return C[3] || CT.C3;
    }
  }, false);
  var _allowSnapshotting = dart.privateName(snapshot_widget, "_allowSnapshotting");
  snapshot_widget.SnapshotController = class SnapshotController extends change_notifier.ChangeNotifier {
    static ['_#new#tearOff'](opts) {
      let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : false;
      return new snapshot_widget.SnapshotController.new({allowSnapshotting: allowSnapshotting});
    }
    clear() {
      this.notifyListeners();
    }
    get allowSnapshotting() {
      return this[_allowSnapshotting];
    }
    set allowSnapshotting(value) {
      if (value === this.allowSnapshotting) {
        return;
      }
      this[_allowSnapshotting] = value;
      this.notifyListeners();
    }
  };
  (snapshot_widget.SnapshotController.new = function(opts) {
    let allowSnapshotting = opts && 'allowSnapshotting' in opts ? opts.allowSnapshotting : false;
    this[_allowSnapshotting] = allowSnapshotting;
    snapshot_widget.SnapshotController.__proto__.new.call(this);
    ;
  }).prototype = snapshot_widget.SnapshotController.prototype;
  dart.addTypeTests(snapshot_widget.SnapshotController);
  dart.addTypeCaches(snapshot_widget.SnapshotController);
  dart.setMethodSignature(snapshot_widget.SnapshotController, () => ({
    __proto__: dart.getMethods(snapshot_widget.SnapshotController.__proto__),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(snapshot_widget.SnapshotController, () => ({
    __proto__: dart.getGetters(snapshot_widget.SnapshotController.__proto__),
    allowSnapshotting: core.bool
  }));
  dart.setSetterSignature(snapshot_widget.SnapshotController, () => ({
    __proto__: dart.getSetters(snapshot_widget.SnapshotController.__proto__),
    allowSnapshotting: core.bool
  }));
  dart.setLibraryUri(snapshot_widget.SnapshotController, I[0]);
  dart.setFieldSignature(snapshot_widget.SnapshotController, () => ({
    __proto__: dart.getFields(snapshot_widget.SnapshotController.__proto__),
    [_allowSnapshotting]: dart.fieldType(core.bool)
  }));
  var controller$ = dart.privateName(snapshot_widget, "SnapshotWidget.controller");
  var mode$ = dart.privateName(snapshot_widget, "SnapshotWidget.mode");
  var autoresize$ = dart.privateName(snapshot_widget, "SnapshotWidget.autoresize");
  var painter$ = dart.privateName(snapshot_widget, "SnapshotWidget.painter");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  snapshot_widget.SnapshotWidget = class SnapshotWidget extends framework.SingleChildRenderObjectWidget {
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    get autoresize() {
      return this[autoresize$];
    }
    set autoresize(value) {
      super.autoresize = value;
    }
    get painter() {
      return this[painter$];
    }
    set painter(value) {
      super.painter = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let mode = opts && 'mode' in opts ? opts.mode : C[2] || CT.C2;
      let painter = opts && 'painter' in opts ? opts.painter : C[4] || CT.C4;
      let autoresize = opts && 'autoresize' in opts ? opts.autoresize : false;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let child = opts && 'child' in opts ? opts.child : null;
      return new snapshot_widget.SnapshotWidget.new({key: key, mode: mode, painter: painter, autoresize: autoresize, controller: controller, child: child, $creationLocationd_0dea112b090073317d4: C[5] || CT.C5});
    }
    createRenderObject(context) {
      debug.debugCheckHasMediaQuery(context);
      return new snapshot_widget._RenderSnapshotWidget.new({controller: this.controller, mode: this.mode, devicePixelRatio: media_query.MediaQuery.of(context).devicePixelRatio, painter: this.painter, autoresize: this.autoresize});
    }
    updateRenderObject(context, renderObject) {
      let t2;
      object.RenderObject.as(renderObject);
      debug.debugCheckHasMediaQuery(context);
      t2 = snapshot_widget._RenderSnapshotWidget.as(renderObject);
      (() => {
        t2.controller = this.controller;
        t2.mode = this.mode;
        t2.devicePixelRatio = media_query.MediaQuery.of(context).devicePixelRatio;
        t2.painter = this.painter;
        t2.autoresize = this.autoresize;
        return t2;
      })();
    }
  };
  (snapshot_widget.SnapshotWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let mode = opts && 'mode' in opts ? opts.mode : C[2] || CT.C2;
    let painter = opts && 'painter' in opts ? opts.painter : C[4] || CT.C4;
    let autoresize = opts && 'autoresize' in opts ? opts.autoresize : false;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[mode$] = mode;
    this[painter$] = painter;
    this[autoresize$] = autoresize;
    this[controller$] = controller;
    snapshot_widget.SnapshotWidget.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = snapshot_widget.SnapshotWidget.prototype;
  dart.addTypeTests(snapshot_widget.SnapshotWidget);
  dart.addTypeCaches(snapshot_widget.SnapshotWidget);
  dart.setMethodSignature(snapshot_widget.SnapshotWidget, () => ({
    __proto__: dart.getMethods(snapshot_widget.SnapshotWidget.__proto__),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(snapshot_widget.SnapshotWidget, I[0]);
  dart.setFieldSignature(snapshot_widget.SnapshotWidget, () => ({
    __proto__: dart.getFields(snapshot_widget.SnapshotWidget.__proto__),
    controller: dart.finalFieldType(snapshot_widget.SnapshotController),
    mode: dart.finalFieldType(snapshot_widget.SnapshotMode),
    autoresize: dart.finalFieldType(core.bool),
    painter: dart.finalFieldType(snapshot_widget.SnapshotPainter)
  }));
  var _childRaster = dart.privateName(snapshot_widget, "_childRaster");
  var _childRasterSize = dart.privateName(snapshot_widget, "_childRasterSize");
  var _disableSnapshotAttempt = dart.privateName(snapshot_widget, "_disableSnapshotAttempt");
  var _lastCachedSize = dart.privateName(snapshot_widget, "_lastCachedSize");
  var _devicePixelRatio = dart.privateName(snapshot_widget, "_devicePixelRatio");
  var _controller = dart.privateName(snapshot_widget, "_controller");
  var _mode = dart.privateName(snapshot_widget, "_mode");
  var _painter = dart.privateName(snapshot_widget, "_painter");
  var _autoresize = dart.privateName(snapshot_widget, "_autoresize");
  var _onRasterValueChanged = dart.privateName(snapshot_widget, "_onRasterValueChanged");
  var _paintAndDetachToImage = dart.privateName(snapshot_widget, "_paintAndDetachToImage");
  snapshot_widget._RenderSnapshotWidget = class _RenderSnapshotWidget extends proxy_box.RenderProxyBox {
    static ['_#new#tearOff'](opts) {
      let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let mode = opts && 'mode' in opts ? opts.mode : null;
      let painter = opts && 'painter' in opts ? opts.painter : null;
      let autoresize = opts && 'autoresize' in opts ? opts.autoresize : null;
      return new snapshot_widget._RenderSnapshotWidget.new({devicePixelRatio: devicePixelRatio, controller: controller, mode: mode, painter: painter, autoresize: autoresize});
    }
    get devicePixelRatio() {
      return this[_devicePixelRatio];
    }
    set devicePixelRatio(value) {
      let t2;
      if (value === this.devicePixelRatio) {
        return;
      }
      this[_devicePixelRatio] = value;
      if (this[_childRaster] == null) {
        return;
      } else {
        t2 = this[_childRaster];
        t2 == null ? null : t2.dispose();
        this[_childRaster] = null;
        this.markNeedsPaint();
      }
    }
    get painter() {
      return this[_painter];
    }
    set painter(value) {
      if (value[$_equals](this.painter)) {
        return;
      }
      let oldPainter = this.painter;
      oldPainter.removeListener(dart.bind(this, 'markNeedsPaint'));
      this[_painter] = value;
      if (!oldPainter[$runtimeType]._equals(this.painter[$runtimeType]) || this.painter.shouldRepaint(oldPainter)) {
        this.markNeedsPaint();
      }
      if (this.attached) {
        this.painter.addListener(dart.bind(this, 'markNeedsPaint'));
      }
    }
    get controller() {
      return this[_controller];
    }
    set controller(value) {
      if (value[$_equals](this.controller)) {
        return;
      }
      this.controller.removeListener(dart.bind(this, _onRasterValueChanged));
      let oldValue = this.controller.allowSnapshotting;
      this[_controller] = value;
      if (this.attached) {
        this.controller.addListener(dart.bind(this, _onRasterValueChanged));
        if (oldValue !== this.controller.allowSnapshotting) {
          this[_onRasterValueChanged]();
        }
      }
    }
    get mode() {
      return this[_mode];
    }
    set mode(value) {
      if (value === this[_mode]) {
        return;
      }
      this[_mode] = value;
      this.markNeedsPaint();
    }
    get autoresize() {
      return this[_autoresize];
    }
    set autoresize(value) {
      if (value === this.autoresize) {
        return;
      }
      this[_autoresize] = value;
      this.markNeedsPaint();
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      this.controller.addListener(dart.bind(this, _onRasterValueChanged));
      this.painter.addListener(dart.bind(this, 'markNeedsPaint'));
      super.attach(owner);
    }
    detach() {
      let t2;
      this[_disableSnapshotAttempt] = false;
      this.controller.removeListener(dart.bind(this, _onRasterValueChanged));
      this.painter.removeListener(dart.bind(this, 'markNeedsPaint'));
      t2 = this[_childRaster];
      t2 == null ? null : t2.dispose();
      this[_childRaster] = null;
      this[_childRasterSize] = null;
      super.detach();
    }
    dispose() {
      let t2;
      this.controller.removeListener(dart.bind(this, _onRasterValueChanged));
      this.painter.removeListener(dart.bind(this, 'markNeedsPaint'));
      t2 = this[_childRaster];
      t2 == null ? null : t2.dispose();
      this[_childRaster] = null;
      this[_childRasterSize] = null;
      super.dispose();
    }
    [_onRasterValueChanged]() {
      let t2;
      this[_disableSnapshotAttempt] = false;
      t2 = this[_childRaster];
      t2 == null ? null : t2.dispose();
      this[_childRaster] = null;
      this[_childRasterSize] = null;
      this.markNeedsPaint();
    }
    [_paintAndDetachToImage]() {
      let offsetLayer = new layer.OffsetLayer.new();
      let context = new object.PaintingContext.new(offsetLayer, ui.Offset.zero['&'](this.size));
      super.paint(context, ui.Offset.zero);
      context.stopRecordingIfNeeded();
      if (this.mode !== snapshot_widget.SnapshotMode.forced && !offsetLayer.supportsRasterization()) {
        if (this.mode === snapshot_widget.SnapshotMode.normal) {
          dart.throw(assertions.FlutterError.new("SnapshotWidget used with a child that contains a PlatformView."));
        }
        this[_disableSnapshotAttempt] = true;
        return null;
      }
      let image = offsetLayer.toImageSync(ui.Offset.zero['&'](this.size), {pixelRatio: this.devicePixelRatio});
      offsetLayer.dispose();
      this[_lastCachedSize] = this.size;
      return image;
    }
    paint(context, offset) {
      let t2, t2$, t2$0;
      if (this.size.isEmpty) {
        t2 = this[_childRaster];
        t2 == null ? null : t2.dispose();
        this[_childRaster] = null;
        this[_childRasterSize] = null;
        return;
      }
      if (!this.controller.allowSnapshotting || this[_disableSnapshotAttempt]) {
        t2$ = this[_childRaster];
        t2$ == null ? null : t2$.dispose();
        this[_childRaster] = null;
        this[_childRasterSize] = null;
        this.painter.paint(context, offset, this.size, dart.bind(this, 'paint', super.paint));
        return;
      }
      if (this.autoresize && !this.size._equals(this[_lastCachedSize]) && this[_lastCachedSize] != null) {
        t2$0 = this[_childRaster];
        t2$0 == null ? null : t2$0.dispose();
        this[_childRaster] = null;
      }
      if (this[_childRaster] == null) {
        this[_childRaster] = this[_paintAndDetachToImage]();
        this[_childRasterSize] = this.size['*'](this.devicePixelRatio);
      }
      if (this[_childRaster] == null) {
        this.painter.paint(context, offset, this.size, dart.bind(this, 'paint', super.paint));
      } else {
        this.painter.paintSnapshot(context, offset, this.size, dart.nullCheck(this[_childRaster]), dart.nullCheck(this[_childRasterSize]), this.devicePixelRatio);
      }
    }
  };
  (snapshot_widget._RenderSnapshotWidget.new = function(opts) {
    let devicePixelRatio = opts && 'devicePixelRatio' in opts ? opts.devicePixelRatio : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let mode = opts && 'mode' in opts ? opts.mode : null;
    let painter = opts && 'painter' in opts ? opts.painter : null;
    let autoresize = opts && 'autoresize' in opts ? opts.autoresize : null;
    this[_childRaster] = null;
    this[_childRasterSize] = null;
    this[_disableSnapshotAttempt] = false;
    this[_lastCachedSize] = null;
    this[_devicePixelRatio] = devicePixelRatio;
    this[_controller] = controller;
    this[_mode] = mode;
    this[_painter] = painter;
    this[_autoresize] = autoresize;
    snapshot_widget._RenderSnapshotWidget.__proto__.new.call(this);
    ;
  }).prototype = snapshot_widget._RenderSnapshotWidget.prototype;
  dart.addTypeTests(snapshot_widget._RenderSnapshotWidget);
  dart.addTypeCaches(snapshot_widget._RenderSnapshotWidget);
  dart.setMethodSignature(snapshot_widget._RenderSnapshotWidget, () => ({
    __proto__: dart.getMethods(snapshot_widget._RenderSnapshotWidget.__proto__),
    [_onRasterValueChanged]: dart.fnType(dart.void, []),
    [_paintAndDetachToImage]: dart.fnType(dart.nullable(ui.Image), [])
  }));
  dart.setGetterSignature(snapshot_widget._RenderSnapshotWidget, () => ({
    __proto__: dart.getGetters(snapshot_widget._RenderSnapshotWidget.__proto__),
    devicePixelRatio: core.double,
    painter: snapshot_widget.SnapshotPainter,
    controller: snapshot_widget.SnapshotController,
    mode: snapshot_widget.SnapshotMode,
    autoresize: core.bool
  }));
  dart.setSetterSignature(snapshot_widget._RenderSnapshotWidget, () => ({
    __proto__: dart.getSetters(snapshot_widget._RenderSnapshotWidget.__proto__),
    devicePixelRatio: core.double,
    painter: snapshot_widget.SnapshotPainter,
    controller: snapshot_widget.SnapshotController,
    mode: snapshot_widget.SnapshotMode,
    autoresize: core.bool
  }));
  dart.setLibraryUri(snapshot_widget._RenderSnapshotWidget, I[0]);
  dart.setFieldSignature(snapshot_widget._RenderSnapshotWidget, () => ({
    __proto__: dart.getFields(snapshot_widget._RenderSnapshotWidget.__proto__),
    [_devicePixelRatio]: dart.fieldType(core.double),
    [_painter]: dart.fieldType(snapshot_widget.SnapshotPainter),
    [_controller]: dart.fieldType(snapshot_widget.SnapshotController),
    [_mode]: dart.fieldType(snapshot_widget.SnapshotMode),
    [_autoresize]: dart.fieldType(core.bool),
    [_childRaster]: dart.fieldType(dart.nullable(ui.Image)),
    [_childRasterSize]: dart.fieldType(dart.nullable(ui.Size)),
    [_disableSnapshotAttempt]: dart.fieldType(core.bool),
    [_lastCachedSize]: dart.fieldType(dart.nullable(ui.Size))
  }));
  snapshot_widget.SnapshotPainter = class SnapshotPainter extends change_notifier.ChangeNotifier {};
  (snapshot_widget.SnapshotPainter.new = function() {
    snapshot_widget.SnapshotPainter.__proto__.new.call(this);
    ;
  }).prototype = snapshot_widget.SnapshotPainter.prototype;
  dart.addTypeTests(snapshot_widget.SnapshotPainter);
  dart.addTypeCaches(snapshot_widget.SnapshotPainter);
  dart.setLibraryUri(snapshot_widget.SnapshotPainter, I[0]);
  var _removeAt = dart.privateName(snapshot_widget, "_removeAt");
  var _removeAt$ = dart.privateName(change_notifier, "_removeAt");
  var _count = dart.privateName(snapshot_widget, "_count");
  var _count$ = dart.privateName(change_notifier, "_count");
  var _listeners = dart.privateName(snapshot_widget, "_listeners");
  var _listeners$ = dart.privateName(change_notifier, "_listeners");
  var _reentrantlyRemovedListeners = dart.privateName(snapshot_widget, "_reentrantlyRemovedListeners");
  var _reentrantlyRemovedListeners$ = dart.privateName(change_notifier, "_reentrantlyRemovedListeners");
  var _notificationCallStackDepth = dart.privateName(snapshot_widget, "_notificationCallStackDepth");
  var _notificationCallStackDepth$ = dart.privateName(change_notifier, "_notificationCallStackDepth");
  var _debugDisposed = dart.privateName(snapshot_widget, "_debugDisposed");
  var _debugDisposed$ = dart.privateName(change_notifier, "_debugDisposed");
  var _creationDispatched = dart.privateName(snapshot_widget, "_creationDispatched");
  var _creationDispatched$ = dart.privateName(change_notifier, "_creationDispatched");
  var _count_ = dart.privateName(snapshot_widget, "_count=");
  var _listeners_ = dart.privateName(snapshot_widget, "_listeners=");
  var _reentrantlyRemovedListeners_ = dart.privateName(snapshot_widget, "_reentrantlyRemovedListeners=");
  var _notificationCallStackDepth_ = dart.privateName(snapshot_widget, "_notificationCallStackDepth=");
  var _debugDisposed_ = dart.privateName(snapshot_widget, "_debugDisposed=");
  var _creationDispatched_ = dart.privateName(snapshot_widget, "_creationDispatched=");
  snapshot_widget._DefaultSnapshotPainter = class _DefaultSnapshotPainter extends core.Object {
    static ['_#new#tearOff']() {
      return new snapshot_widget._DefaultSnapshotPainter.new();
    }
    addListener(listener) {
    }
    dispose() {
    }
    get hasListeners() {
      return false;
    }
    notifyListeners() {
    }
    paint(context, offset, size, painter) {
      painter(context, offset);
    }
    paintSnapshot(context, offset, size, image, sourceSize, pixelRatio) {
      let t2;
      let src = new ui.Rect.fromLTWH(0.0, 0.0, sourceSize.width, sourceSize.height);
      let dst = new ui.Rect.fromLTWH(offset.dx, offset.dy, size.width, size.height);
      let paint = (t2 = ui.Paint.new(), (() => {
        t2.filterQuality = ui.FilterQuality.low;
        return t2;
      })());
      context.canvas.drawImageRect(image, src, dst, paint);
    }
    removeListener(listener) {
    }
    shouldRepaint(oldPainter) {
      snapshot_widget._DefaultSnapshotPainter.as(oldPainter);
      return false;
    }
    [_removeAt$](index) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[6] || CT.C6, null, [index])));
    }
    get [_count$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[7] || CT.C7)));
    }
    get [_listeners$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[8] || CT.C8)));
    }
    get [_reentrantlyRemovedListeners$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[9] || CT.C9)));
    }
    get [_notificationCallStackDepth$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[10] || CT.C10)));
    }
    get [_debugDisposed$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[11] || CT.C11)));
    }
    get [_creationDispatched$]() {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.getter(C[12] || CT.C12)));
    }
    set [_count$](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[13] || CT.C13, value)));
    }
    set [_listeners$](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[14] || CT.C14, value)));
    }
    set [_reentrantlyRemovedListeners$](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[15] || CT.C15, value)));
    }
    set [_notificationCallStackDepth$](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[16] || CT.C16, value)));
    }
    set [_debugDisposed$](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[17] || CT.C17, value)));
    }
    set [_creationDispatched$](value) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.setter(C[18] || CT.C18, value)));
    }
  };
  (snapshot_widget._DefaultSnapshotPainter.new = function() {
    ;
  }).prototype = snapshot_widget._DefaultSnapshotPainter.prototype;
  dart.addTypeTests(snapshot_widget._DefaultSnapshotPainter);
  dart.addTypeCaches(snapshot_widget._DefaultSnapshotPainter);
  snapshot_widget._DefaultSnapshotPainter[dart.implements] = () => [snapshot_widget.SnapshotPainter];
  dart.setMethodSignature(snapshot_widget._DefaultSnapshotPainter, () => ({
    __proto__: dart.getMethods(snapshot_widget._DefaultSnapshotPainter.__proto__),
    addListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    dispose: dart.fnType(dart.void, []),
    notifyListeners: dart.fnType(dart.void, []),
    paint: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, ui.Size, dart.fnType(dart.void, [object.PaintingContext, ui.Offset])]),
    paintSnapshot: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, ui.Size, ui.Image, ui.Size, core.double]),
    removeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    shouldRepaint: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [_removeAt$]: dart.fnType(dart.void, [core.int])
  }));
  dart.setGetterSignature(snapshot_widget._DefaultSnapshotPainter, () => ({
    __proto__: dart.getGetters(snapshot_widget._DefaultSnapshotPainter.__proto__),
    hasListeners: core.bool,
    [_count$]: core.int,
    [_listeners$]: core.List$(dart.nullable(dart.fnType(dart.void, []))),
    [_reentrantlyRemovedListeners$]: core.int,
    [_notificationCallStackDepth$]: core.int,
    [_debugDisposed$]: core.bool,
    [_creationDispatched$]: core.bool
  }));
  dart.setSetterSignature(snapshot_widget._DefaultSnapshotPainter, () => ({
    __proto__: dart.getSetters(snapshot_widget._DefaultSnapshotPainter.__proto__),
    [_count$]: core.int,
    [_listeners$]: core.List$(dart.nullable(dart.fnType(dart.void, []))),
    [_reentrantlyRemovedListeners$]: core.int,
    [_notificationCallStackDepth$]: core.int,
    [_debugDisposed$]: core.bool,
    [_creationDispatched$]: core.bool
  }));
  dart.setLibraryUri(snapshot_widget._DefaultSnapshotPainter, I[0]);
  dart.trackLibraries("packages/flutter/src/widgets/snapshot_widget.dart", {
    "package:flutter/src/widgets/snapshot_widget.dart": snapshot_widget
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["snapshot_widget.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/widgets/snapshot_widget.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__snapshot_widget: snapshot_widget
  };
}));

//# sourceMappingURL=snapshot_widget.dart.lib.js.map
