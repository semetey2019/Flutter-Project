// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/services/spell_check.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/foundation/collections.dart', 'packages/flutter/src/services/text_editing_delta.dart'], (function load__packages__flutter__src__services__spell_check_dart(dart_sdk, packages__flutter__src__foundation__collections$46dart, packages__flutter__src__services__text_editing_delta$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  const system_channels = packages__flutter__src__services__text_editing_delta$46dart.src__services__system_channels;
  const platform_channel = packages__flutter__src__services__text_editing_delta$46dart.src__services__platform_channel;
  var spell_check = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $sublist = dartx.sublist;
  var $addAll = dartx.addAll;
  var $cast = dartx.cast;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    JSArrayOfSuggestionSpan: () => (T.JSArrayOfSuggestionSpan = dart.constFn(_interceptors.JSArray$(spell_check.SuggestionSpan)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    LinkedHashMapOfString$dynamic: () => (T.LinkedHashMapOfString$dynamic = dart.constFn(collection.LinkedHashMap$(core.String, dart.dynamic)))(),
    ListOfSuggestionSpan: () => (T.ListOfSuggestionSpan = dart.constFn(core.List$(spell_check.SuggestionSpan)))(),
    ListNOfSuggestionSpan: () => (T.ListNOfSuggestionSpan = dart.constFn(dart.nullable(T.ListOfSuggestionSpan())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/services/spell_check.dart",
    "package:flutter/src/services/spell_check.dart"
  ];
  var range$ = dart.privateName(spell_check, "SuggestionSpan.range");
  var suggestions$ = dart.privateName(spell_check, "SuggestionSpan.suggestions");
  spell_check.SuggestionSpan = class SuggestionSpan extends core.Object {
    get range() {
      return this[range$];
    }
    set range(value) {
      super.range = value;
    }
    get suggestions() {
      return this[suggestions$];
    }
    set suggestions(value) {
      super.suggestions = value;
    }
    static ['_#new#tearOff'](range, suggestions) {
      return new spell_check.SuggestionSpan.new(range, suggestions);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return spell_check.SuggestionSpan.is(other) && other.range.start === this.range.start && other.range.end === this.range.end && collections.listEquals(core.String, other.suggestions, this.suggestions);
    }
    get hashCode() {
      return core.Object.hash(this.range.start, this.range.end, core.Object.hashAll(this.suggestions));
    }
  };
  (spell_check.SuggestionSpan.new = function(range, suggestions) {
    this[range$] = range;
    this[suggestions$] = suggestions;
    if (!(range !== null)) dart.assertFailed(null, I[0], 31, 16, "range != null");
    if (!(suggestions !== null)) dart.assertFailed(null, I[0], 32, 16, "suggestions != null");
    ;
  }).prototype = spell_check.SuggestionSpan.prototype;
  dart.addTypeTests(spell_check.SuggestionSpan);
  dart.addTypeCaches(spell_check.SuggestionSpan);
  dart.setLibraryUri(spell_check.SuggestionSpan, I[1]);
  dart.setFieldSignature(spell_check.SuggestionSpan, () => ({
    __proto__: dart.getFields(spell_check.SuggestionSpan.__proto__),
    range: dart.finalFieldType(ui.TextRange),
    suggestions: dart.finalFieldType(core.List$(core.String))
  }));
  dart.defineExtensionMethods(spell_check.SuggestionSpan, ['_equals']);
  dart.defineExtensionAccessors(spell_check.SuggestionSpan, ['hashCode']);
  var spellCheckedText$ = dart.privateName(spell_check, "SpellCheckResults.spellCheckedText");
  var suggestionSpans$ = dart.privateName(spell_check, "SpellCheckResults.suggestionSpans");
  spell_check.SpellCheckResults = class SpellCheckResults extends core.Object {
    get spellCheckedText() {
      return this[spellCheckedText$];
    }
    set spellCheckedText(value) {
      super.spellCheckedText = value;
    }
    get suggestionSpans() {
      return this[suggestionSpans$];
    }
    set suggestionSpans(value) {
      super.suggestionSpans = value;
    }
    static ['_#new#tearOff'](spellCheckedText, suggestionSpans) {
      return new spell_check.SpellCheckResults.new(spellCheckedText, suggestionSpans);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return spell_check.SpellCheckResults.is(other) && other.spellCheckedText === this.spellCheckedText && collections.listEquals(spell_check.SuggestionSpan, other.suggestionSpans, this.suggestionSpans);
    }
    get hashCode() {
      return core.Object.hash(this.spellCheckedText, core.Object.hashAll(this.suggestionSpans));
    }
  };
  (spell_check.SpellCheckResults.new = function(spellCheckedText, suggestionSpans) {
    this[spellCheckedText$] = spellCheckedText;
    this[suggestionSpans$] = suggestionSpans;
    if (!(spellCheckedText !== null)) dart.assertFailed(null, I[0], 62, 16, "spellCheckedText != null");
    if (!(suggestionSpans !== null)) dart.assertFailed(null, I[0], 63, 16, "suggestionSpans != null");
    ;
  }).prototype = spell_check.SpellCheckResults.prototype;
  dart.addTypeTests(spell_check.SpellCheckResults);
  dart.addTypeCaches(spell_check.SpellCheckResults);
  dart.setLibraryUri(spell_check.SpellCheckResults, I[1]);
  dart.setFieldSignature(spell_check.SpellCheckResults, () => ({
    __proto__: dart.getFields(spell_check.SpellCheckResults.__proto__),
    spellCheckedText: dart.finalFieldType(core.String),
    suggestionSpans: dart.finalFieldType(core.List$(spell_check.SuggestionSpan))
  }));
  dart.defineExtensionMethods(spell_check.SpellCheckResults, ['_equals']);
  dart.defineExtensionAccessors(spell_check.SpellCheckResults, ['hashCode']);
  spell_check.SpellCheckService = class SpellCheckService extends core.Object {};
  (spell_check.SpellCheckService.new = function() {
    ;
  }).prototype = spell_check.SpellCheckService.prototype;
  dart.addTypeTests(spell_check.SpellCheckService);
  dart.addTypeCaches(spell_check.SpellCheckService);
  dart.setLibraryUri(spell_check.SpellCheckService, I[1]);
  var lastSavedResults = dart.privateName(spell_check, "DefaultSpellCheckService.lastSavedResults");
  var __DefaultSpellCheckService_spellCheckChannel = dart.privateName(spell_check, "_#DefaultSpellCheckService#spellCheckChannel");
  spell_check.DefaultSpellCheckService = class DefaultSpellCheckService extends core.Object {
    get lastSavedResults() {
      return this[lastSavedResults];
    }
    set lastSavedResults(value) {
      this[lastSavedResults] = value;
    }
    static ['_#new#tearOff']() {
      return new spell_check.DefaultSpellCheckService.new();
    }
    get spellCheckChannel() {
      let t0;
      t0 = this[__DefaultSpellCheckService_spellCheckChannel];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("spellCheckChannel")) : t0;
    }
    set spellCheckChannel(spellCheckChannel$35param) {
      this[__DefaultSpellCheckService_spellCheckChannel] = spellCheckChannel$35param;
    }
    static mergeResults(oldResults, newResults) {
      let mergedResults = T.JSArrayOfSuggestionSpan().of([]);
      let oldSpan = null;
      let newSpan = null;
      let oldSpanPointer = 0;
      let newSpanPointer = 0;
      while (oldSpanPointer < oldResults[$length] && newSpanPointer < newResults[$length]) {
        oldSpan = oldResults[$_get](oldSpanPointer);
        newSpan = newResults[$_get](newSpanPointer);
        if (oldSpan.range.start === newSpan.range.start) {
          mergedResults[$add](oldSpan);
          oldSpanPointer = oldSpanPointer + 1;
          newSpanPointer = newSpanPointer + 1;
        } else {
          if (oldSpan.range.start < newSpan.range.start) {
            mergedResults[$add](oldSpan);
            oldSpanPointer = oldSpanPointer + 1;
          } else {
            mergedResults[$add](newSpan);
            newSpanPointer = newSpanPointer + 1;
          }
        }
      }
      mergedResults[$addAll](oldResults[$sublist](oldSpanPointer));
      mergedResults[$addAll](newResults[$sublist](newSpanPointer));
      return mergedResults;
    }
    fetchSpellCheckSuggestions(locale, text) {
      return async.async(T.ListNOfSuggestionSpan(), (function* fetchSpellCheckSuggestions() {
        if (!(locale !== null)) dart.assertFailed(null, I[0], 173, 12, "locale != null");
        if (!(text !== null)) dart.assertFailed(null, I[0], 174, 12, "text != null");
        let rawResults = null;
        let languageTag = locale.toLanguageTag();
        try {
          rawResults = core.List.as(yield this.spellCheckChannel.invokeMethod(dart.dynamic, "SpellCheck.initiateSpellCheck", T.JSArrayOfString().of([languageTag, text])));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            return null;
          } else
            throw e$;
        }
        let suggestionSpans = T.JSArrayOfSuggestionSpan().of([]);
        for (let result of rawResults) {
          let resultMap = T.LinkedHashMapOfString$dynamic().from(core.Map.as(result));
          suggestionSpans[$add](new spell_check.SuggestionSpan.new(new ui.TextRange.new({start: core.int.as(resultMap[$_get]("startIndex")), end: core.int.as(resultMap[$_get]("endIndex"))}), core.List.as(resultMap[$_get]("suggestions"))[$cast](core.String)));
        }
        if (this.lastSavedResults != null) {
          let textHasNotChanged = dart.nullCheck(this.lastSavedResults).spellCheckedText === text;
          let spansHaveChanged = collections.listEquals(spell_check.SuggestionSpan, dart.nullCheck(this.lastSavedResults).suggestionSpans, suggestionSpans);
          if (textHasNotChanged && spansHaveChanged) {
            suggestionSpans = spell_check.DefaultSpellCheckService.mergeResults(dart.nullCheck(this.lastSavedResults).suggestionSpans, suggestionSpans);
          }
        }
        this.lastSavedResults = new spell_check.SpellCheckResults.new(text, suggestionSpans);
        return suggestionSpans;
      }).bind(this));
    }
  };
  (spell_check.DefaultSpellCheckService.new = function() {
    this[lastSavedResults] = null;
    this[__DefaultSpellCheckService_spellCheckChannel] = null;
    this.spellCheckChannel = system_channels.SystemChannels.spellCheck;
  }).prototype = spell_check.DefaultSpellCheckService.prototype;
  dart.addTypeTests(spell_check.DefaultSpellCheckService);
  dart.addTypeCaches(spell_check.DefaultSpellCheckService);
  spell_check.DefaultSpellCheckService[dart.implements] = () => [spell_check.SpellCheckService];
  dart.setMethodSignature(spell_check.DefaultSpellCheckService, () => ({
    __proto__: dart.getMethods(spell_check.DefaultSpellCheckService.__proto__),
    fetchSpellCheckSuggestions: dart.fnType(async.Future$(dart.nullable(core.List$(spell_check.SuggestionSpan))), [ui.Locale, core.String])
  }));
  dart.setStaticMethodSignature(spell_check.DefaultSpellCheckService, () => ['mergeResults']);
  dart.setGetterSignature(spell_check.DefaultSpellCheckService, () => ({
    __proto__: dart.getGetters(spell_check.DefaultSpellCheckService.__proto__),
    spellCheckChannel: platform_channel.MethodChannel
  }));
  dart.setSetterSignature(spell_check.DefaultSpellCheckService, () => ({
    __proto__: dart.getSetters(spell_check.DefaultSpellCheckService.__proto__),
    spellCheckChannel: platform_channel.MethodChannel
  }));
  dart.setLibraryUri(spell_check.DefaultSpellCheckService, I[1]);
  dart.setFieldSignature(spell_check.DefaultSpellCheckService, () => ({
    __proto__: dart.getFields(spell_check.DefaultSpellCheckService.__proto__),
    lastSavedResults: dart.fieldType(dart.nullable(spell_check.SpellCheckResults)),
    [__DefaultSpellCheckService_spellCheckChannel]: dart.fieldType(dart.nullable(platform_channel.MethodChannel))
  }));
  dart.trackLibraries("packages/flutter/src/services/spell_check.dart", {
    "package:flutter/src/services/spell_check.dart": spell_check
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["spell_check.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCkB;;;;;;IAGG;;;;;;;;;YAGK;;AACtB,UAAI,AAAU,SAAM,KAAK;AACvB,cAAO;;AAGT,YAAa,AAEoB,+BAF1B,KAAK,KACR,AAAM,AAAM,AAAM,KAAb,iBAAgB,AAAM,oBAC3B,AAAM,AAAM,AAAI,KAAX,eAAc,AAAM,kBACzB,oCAAmB,AAAM,KAAD,cAAc;IAC5C;;AAGoB,YAAO,kBAAK,AAAM,kBAAO,AAAM,gBAAY,oBAAQ;IAAa;;6CAvB1D,OAAY;IAAZ;IAAY;UACzB,AAAM,KAAD;UACL,AAAY,WAAD;;EAAS;;;;;;;;;;;;;;IAkCpB;;;;;;IAQc;;;;;;;;;YAGH;;AACtB,UAAI,AAAU,SAAM,KAAK;AACrB,cAAO;;AAGX,YAAa,AACkC,kCADxC,KAAK,KACR,AAAM,AAAiB,KAAlB,sBAAqB,yBAC1B,mDAA2B,AAAM,KAAD,kBAAkB;IACxD;;AAGoB,YAAO,kBAAK,uBAAyB,oBAAQ;IAAiB;;gDA3BrD,kBAAuB;IAAvB;IAAuB;UACvC,AAAiB,gBAAD;UAChB,AAAgB,eAAD;;EAAS;;;;;;;;;;;;;;EAqCvC;;;;;;;IAqBqB;;;;;;;;;;;AAIA;;IAAiB;0BAAjB;;IAAiB;wBAWX,YAAiC;AAC7B,0BAAgC;AAE5C;AACA;AACX,2BAAiB;AACjB,2BAAiB;AAErB,aAAO,AAAe,cAAD,GAAG,AAAW,UAAD,aAC9B,AAAe,cAAD,GAAG,AAAW,UAAD;AACO,QAApC,UAAU,AAAU,UAAA,QAAC,cAAc;AACC,QAApC,UAAU,AAAU,UAAA,QAAC,cAAc;AAEnC,YAAI,AAAQ,AAAM,AAAM,OAAb,iBAAgB,AAAQ,AAAM,OAAP;AACN,UAA1B,AAAc,aAAD,OAAK,OAAO;AACT,UAAhB,iBAAA,AAAc,cAAA;AACE,UAAhB,iBAAA,AAAc,cAAA;;AAEd,cAAI,AAAQ,AAAM,AAAM,OAAb,eAAe,AAAQ,AAAM,OAAP;AACL,YAA1B,AAAc,aAAD,OAAK,OAAO;AACT,YAAhB,iBAAA,AAAc,cAAA;;AAEY,YAA1B,AAAc,aAAD,OAAK,OAAO;AACT,YAAhB,iBAAA,AAAc,cAAA;;;;AAKoC,MAAxD,AAAc,aAAD,UAAQ,AAAW,UAAD,WAAS,cAAc;AACE,MAAxD,AAAc,aAAD,UAAQ,AAAW,UAAD,WAAS,cAAc;AAEtD,YAAO,cAAa;IACtB;+BAIW,QAAe;AAD8B;AAEtD,cAAO,AAAO,MAAD;AACb,cAAO,AAAK,IAAD;AAES;AACP,0BAAc,AAAO,MAAD;AAEjC;AAIoB,UAHlB,aAGE,aAHW,MAAM,AAAkB,kDACnC,iCACQ,wBAAC,WAAW,EAAE,IAAI;;cAErB;AAAP;AAEA,kBAAO;;;;AAGY,8BAAkC;AAEvD,iBAAmB,SAAU,WAAU;AACV,0BACzB,uCAAgC,YAAP,MAAM;AAQhC,UAPD,AAAgB,eAAD,OACb,mCACE,6BACiC,YAAxB,AAAS,SAAA,QAAC,qBACU,YAAtB,AAAS,SAAA,QAAC,gBACS,AAAkB,aAA3C,AAAS,SAAA,QAAC;;AAKjB,YAAI;AAGS,kCAAoC,AAAE,AAAiB,eAAnC,4CAAsC,IAAI;AAC9D,iCACP,mDAA2B,AAAE,eAAlB,wCAAmC,eAAe;AAEjE,cAAI,iBAAiB,IAAI,gBAAgB;AAC2C,YAAlF,kBAAkB,kDAA6B,AAAE,eAAlB,wCAAmC,eAAe;;;AAG1B,QAA3D,wBAAmB,sCAAkB,IAAI,EAAE,eAAe;AAE1D,cAAO,gBAAe;MACxB;;;;IAjGmB;yDAIA;AAR4B,IAA7C,yBAAmC;EACrC","file":"../../../../../../../packages/flutter/src/services/spell_check.dart.lib.js"}');
  // Exports:
  return {
    src__services__spell_check: spell_check
  };
}));

//# sourceMappingURL=spell_check.dart.lib.js.map
