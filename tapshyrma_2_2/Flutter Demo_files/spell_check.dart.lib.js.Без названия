// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/widgets/spell_check.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/services/spell_check.dart'], (function load__packages__flutter__src__widgets__spell_check_dart(dart_sdk, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__services__spell_check$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const text_style = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_style;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const spell_check = packages__flutter__src__services__spell_check$46dart.src__services__spell_check;
  var spell_check$ = Object.create(dart.library);
  var $trim = dartx.trim;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $substring = dartx.substring;
  var $add = dartx.add;
  var $indexOf = dartx.indexOf;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    JSArrayOfSuggestionSpan: () => (T.JSArrayOfSuggestionSpan = dart.constFn(_interceptors.JSArray$(spell_check.SuggestionSpan)))(),
    JSArrayOfTextSpan: () => (T.JSArrayOfTextSpan = dart.constFn(_interceptors.JSArray$(text_span.TextSpan)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: spell_check$.SpellCheckConfiguration.prototype,
        [_spellCheckEnabled]: false,
        [misspelledTextStyle$]: null,
        [spellCheckService$]: null
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [TextDecoration__mask]: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_overflow]: null,
        [TextStyle_fontVariations]: null,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: C[2] || CT.C2,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_leadingDistribution]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = ["package:flutter/src/widgets/spell_check.dart"];
  var spellCheckService$ = dart.privateName(spell_check$, "SpellCheckConfiguration.spellCheckService");
  var misspelledTextStyle$ = dart.privateName(spell_check$, "SpellCheckConfiguration.misspelledTextStyle");
  var _spellCheckEnabled = dart.privateName(spell_check$, "SpellCheckConfiguration._spellCheckEnabled");
  var _spellCheckEnabled$ = dart.privateName(spell_check$, "_spellCheckEnabled");
  spell_check$.SpellCheckConfiguration = class SpellCheckConfiguration extends core.Object {
    get spellCheckService() {
      return this[spellCheckService$];
    }
    set spellCheckService(value) {
      super.spellCheckService = value;
    }
    get misspelledTextStyle() {
      return this[misspelledTextStyle$];
    }
    set misspelledTextStyle(value) {
      super.misspelledTextStyle = value;
    }
    get [_spellCheckEnabled$]() {
      return this[_spellCheckEnabled];
    }
    set [_spellCheckEnabled$](value) {
      super[_spellCheckEnabled$] = value;
    }
    static ['_#new#tearOff'](opts) {
      let spellCheckService = opts && 'spellCheckService' in opts ? opts.spellCheckService : null;
      let misspelledTextStyle = opts && 'misspelledTextStyle' in opts ? opts.misspelledTextStyle : null;
      return new spell_check$.SpellCheckConfiguration.new({spellCheckService: spellCheckService, misspelledTextStyle: misspelledTextStyle});
    }
    static ['_#disabled#tearOff']() {
      return new spell_check$.SpellCheckConfiguration.disabled();
    }
    get spellCheckEnabled() {
      return this[_spellCheckEnabled$];
    }
    copyWith(opts) {
      let t0, t0$;
      let spellCheckService = opts && 'spellCheckService' in opts ? opts.spellCheckService : null;
      let misspelledTextStyle = opts && 'misspelledTextStyle' in opts ? opts.misspelledTextStyle : null;
      if (!this[_spellCheckEnabled$]) {
        return C[0] || CT.C0;
      }
      return new spell_check$.SpellCheckConfiguration.new({spellCheckService: (t0 = spellCheckService, t0 == null ? this.spellCheckService : t0), misspelledTextStyle: (t0$ = misspelledTextStyle, t0$ == null ? this.misspelledTextStyle : t0$)});
    }
    toString() {
      return ("  spell check enabled   : " + dart.str(this[_spellCheckEnabled$]) + "\n  spell check service   : " + dart.str(this.spellCheckService) + "\n  misspelled text style : " + dart.str(this.misspelledTextStyle) + "\n")[$trim]();
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      return spell_check$.SpellCheckConfiguration.is(other) && dart.equals(other.spellCheckService, this.spellCheckService) && dart.equals(other.misspelledTextStyle, this.misspelledTextStyle) && other[_spellCheckEnabled$] === this[_spellCheckEnabled$];
    }
    get hashCode() {
      return core.Object.hash(this.spellCheckService, this.misspelledTextStyle, this[_spellCheckEnabled$]);
    }
  };
  (spell_check$.SpellCheckConfiguration.new = function(opts) {
    let spellCheckService = opts && 'spellCheckService' in opts ? opts.spellCheckService : null;
    let misspelledTextStyle = opts && 'misspelledTextStyle' in opts ? opts.misspelledTextStyle : null;
    this[spellCheckService$] = spellCheckService;
    this[misspelledTextStyle$] = misspelledTextStyle;
    this[_spellCheckEnabled] = true;
    ;
  }).prototype = spell_check$.SpellCheckConfiguration.prototype;
  (spell_check$.SpellCheckConfiguration.disabled = function() {
    this[_spellCheckEnabled] = false;
    this[spellCheckService$] = null;
    this[misspelledTextStyle$] = null;
    ;
  }).prototype = spell_check$.SpellCheckConfiguration.prototype;
  dart.addTypeTests(spell_check$.SpellCheckConfiguration);
  dart.addTypeCaches(spell_check$.SpellCheckConfiguration);
  dart.setMethodSignature(spell_check$.SpellCheckConfiguration, () => ({
    __proto__: dart.getMethods(spell_check$.SpellCheckConfiguration.__proto__),
    copyWith: dart.fnType(spell_check$.SpellCheckConfiguration, [], {misspelledTextStyle: dart.nullable(text_style.TextStyle), spellCheckService: dart.nullable(spell_check.SpellCheckService)}, {})
  }));
  dart.setGetterSignature(spell_check$.SpellCheckConfiguration, () => ({
    __proto__: dart.getGetters(spell_check$.SpellCheckConfiguration.__proto__),
    spellCheckEnabled: core.bool
  }));
  dart.setLibraryUri(spell_check$.SpellCheckConfiguration, I[0]);
  dart.setFieldSignature(spell_check$.SpellCheckConfiguration, () => ({
    __proto__: dart.getFields(spell_check$.SpellCheckConfiguration.__proto__),
    spellCheckService: dart.finalFieldType(dart.nullable(spell_check.SpellCheckService)),
    misspelledTextStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    [_spellCheckEnabled$]: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(spell_check$.SpellCheckConfiguration, ['toString', '_equals']);
  dart.defineExtensionAccessors(spell_check$.SpellCheckConfiguration, ['hashCode']);
  var TextStyle_overflow = dart.privateName(text_style, "TextStyle.overflow");
  var TextStyle_fontVariations = dart.privateName(text_style, "TextStyle.fontVariations");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextDecoration__mask = dart.privateName(ui, "TextDecoration._mask");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_leadingDistribution = dart.privateName(text_style, "TextStyle.leadingDistribution");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  spell_check$._correctSpellCheckResults = function _correctSpellCheckResults(newText, resultsText, results) {
    let correctedSpellCheckResults = T.JSArrayOfSuggestionSpan().of([]);
    let spanPointer = 0;
    let offset = 0;
    let foundIndex = null;
    let spanLength = null;
    let currentSpan = null;
    let adjustedSpan = null;
    let currentSpanText = null;
    let newSpanText = "";
    let currentSpanValid = false;
    let regex = null;
    let searchStart = 0;
    while (spanPointer < results[$length]) {
      currentSpan = results[$_get](spanPointer);
      currentSpanText = resultsText[$substring](currentSpan.range.start, currentSpan.range.end);
      try {
        newSpanText = newText[$substring](currentSpan.range.start + offset, currentSpan.range.end + offset);
        currentSpanValid = true;
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          currentSpanValid = false;
        } else
          throw e$;
      }
      if (currentSpanValid && newSpanText === currentSpanText) {
        searchStart = currentSpan.range.end + offset;
        adjustedSpan = new spell_check.SuggestionSpan.new(new ui.TextRange.new({start: currentSpan.range.start + offset, end: searchStart}), currentSpan.suggestions);
        correctedSpellCheckResults[$add](adjustedSpan);
      } else {
        regex = core.RegExp.new("\\b" + currentSpanText + "\\b");
        foundIndex = newText[$substring](searchStart)[$indexOf](regex);
        if (foundIndex >= 0) {
          foundIndex = foundIndex + searchStart;
          spanLength = currentSpan.range.end - currentSpan.range.start;
          searchStart = foundIndex + spanLength;
          adjustedSpan = new spell_check.SuggestionSpan.new(new ui.TextRange.new({start: foundIndex, end: searchStart}), currentSpan.suggestions);
          offset = foundIndex - currentSpan.range.start;
          correctedSpellCheckResults[$add](adjustedSpan);
        }
      }
      spanPointer = spanPointer + 1;
    }
    return correctedSpellCheckResults;
  };
  spell_check$.buildTextSpanWithSpellCheckSuggestions = function buildTextSpanWithSpellCheckSuggestions(value, composingWithinCurrentTextRange, style, misspelledTextStyle, spellCheckResults) {
    let spellCheckResultsSpans = spellCheckResults.suggestionSpans;
    let spellCheckResultsText = spellCheckResults.spellCheckedText;
    if (spellCheckResultsText !== value.text) {
      spellCheckResultsSpans = spell_check$._correctSpellCheckResults(value.text, spellCheckResultsText, spellCheckResultsSpans);
    }
    return new text_span.TextSpan.new({style: style, children: spell_check$._buildSubtreesWithMisspelledWordsIndicated(spellCheckResultsSpans, value, style, misspelledTextStyle, composingWithinCurrentTextRange)});
  };
  spell_check$._buildSubtreesWithMisspelledWordsIndicated = function _buildSubtreesWithMisspelledWordsIndicated(spellCheckSuggestions, value, style, misspelledStyle, composingWithinCurrentTextRange) {
    let t1, t1$, t1$0, t1$1;
    let tsTreeChildren = T.JSArrayOfTextSpan().of([]);
    let textPointer = 0;
    let currSpanPointer = 0;
    let endIndex = null;
    let currSpan = null;
    let text = value.text;
    let composingRegion = value.composing;
    let composingTextStyle = (t1$ = (t1 = style, t1 == null ? null : t1.merge(C[1] || CT.C1)), t1$ == null ? C[1] || CT.C1 : t1$);
    let misspelledJointStyle = (t1$1 = (t1$0 = style, t1$0 == null ? null : t1$0.merge(misspelledStyle)), t1$1 == null ? misspelledStyle : t1$1);
    let textPointerWithinComposingRegion = false;
    let currSpanIsComposingRegion = false;
    if (spellCheckSuggestions != null) {
      while (textPointer < text.length && currSpanPointer < spellCheckSuggestions[$length]) {
        currSpan = spellCheckSuggestions[$_get](currSpanPointer);
        if (currSpan.range.start > textPointer) {
          endIndex = currSpan.range.start < text.length ? currSpan.range.start : text.length;
          textPointerWithinComposingRegion = composingRegion.start >= textPointer && composingRegion.end <= endIndex && !composingWithinCurrentTextRange;
          if (textPointerWithinComposingRegion) {
            spell_check$._addComposingRegionTextSpans(tsTreeChildren, text, textPointer, composingRegion, style, composingTextStyle);
            tsTreeChildren[$add](new text_span.TextSpan.new({style: style, text: text[$substring](composingRegion.end, endIndex)}));
          } else {
            tsTreeChildren[$add](new text_span.TextSpan.new({style: style, text: text[$substring](textPointer, endIndex)}));
          }
          textPointer = endIndex;
        } else {
          endIndex = currSpan.range.end < text.length ? currSpan.range.end : text.length;
          currSpanIsComposingRegion = textPointer >= composingRegion.start && endIndex <= composingRegion.end && !composingWithinCurrentTextRange;
          tsTreeChildren[$add](new text_span.TextSpan.new({style: currSpanIsComposingRegion ? composingTextStyle : misspelledJointStyle, text: text[$substring](currSpan.range.start, endIndex)}));
          textPointer = endIndex;
          currSpanPointer = currSpanPointer + 1;
        }
      }
    }
    if (textPointer < text.length) {
      if (textPointer < composingRegion.start && !composingWithinCurrentTextRange) {
        spell_check$._addComposingRegionTextSpans(tsTreeChildren, text, textPointer, composingRegion, style, composingTextStyle);
        if (composingRegion.end !== text.length) {
          tsTreeChildren[$add](new text_span.TextSpan.new({style: style, text: text[$substring](composingRegion.end, text.length)}));
        }
      } else {
        tsTreeChildren[$add](new text_span.TextSpan.new({style: style, text: text[$substring](textPointer, text.length)}));
      }
    }
    return tsTreeChildren;
  };
  spell_check$._addComposingRegionTextSpans = function _addComposingRegionTextSpans(treeChildren, text, start, composingRegion, style, composingTextStyle) {
    treeChildren[$add](new text_span.TextSpan.new({style: style, text: text[$substring](start, composingRegion.start)}));
    treeChildren[$add](new text_span.TextSpan.new({style: composingTextStyle, text: text[$substring](composingRegion.start, composingRegion.end)}));
  };
  dart.trackLibraries("packages/flutter/src/widgets/spell_check.dart", {
    "package:flutter/src/widgets/spell_check.dart": spell_check$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["spell_check.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/widgets/spell_check.dart.lib.js"}');
  // Exports:
  return {
    src__widgets__spell_check: spell_check$
  };
}));

//# sourceMappingURL=spell_check.dart.lib.js.map
