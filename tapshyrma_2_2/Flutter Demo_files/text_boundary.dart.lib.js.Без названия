// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "windows_x64"
// Module: packages/flutter/src/services/text_boundary.dart
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/characters/src/characters_impl.dart', 'packages/flutter/src/services/text_layout_metrics.dart'], (function load__packages__flutter__src__services__text_boundary_dart(dart_sdk, packages__characters__src__characters_impl$46dart, packages__flutter__src__services__text_layout_metrics$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const characters_impl = packages__characters__src__characters_impl$46dart.src__characters_impl;
  const text_layout_metrics = packages__flutter__src__services__text_layout_metrics$46dart.src__services__text_layout_metrics;
  var text_boundary = Object.create(dart.library);
  var $codeUnitAt = dartx.codeUnitAt;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_Enum__name]: "downstream",
        [_Enum_index]: 1
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.TextPosition.prototype,
        [TextPosition_affinity]: C[1] || CT.C1,
        [TextPosition_offset]: 0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_Enum__name]: "upstream",
        [_Enum_index]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: text_boundary.PushTextPosition.prototype,
        [_forward$]: true
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: text_boundary.PushTextPosition.prototype,
        [_forward$]: false
      });
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = ["package:flutter/src/services/text_boundary.dart"];
  text_boundary.TextBoundary = class TextBoundary extends core.Object {
    getTextBoundaryAt(position) {
      return new ui.TextRange.new({start: this.getLeadingTextBoundaryAt(position).offset, end: this.getTrailingTextBoundaryAt(position).offset});
    }
    ['+'](other) {
      return new text_boundary._ExpandedTextBoundary.new({inner: other, outer: this});
    }
  };
  (text_boundary.TextBoundary.new = function() {
    ;
  }).prototype = text_boundary.TextBoundary.prototype;
  dart.addTypeTests(text_boundary.TextBoundary);
  dart.addTypeCaches(text_boundary.TextBoundary);
  dart.setMethodSignature(text_boundary.TextBoundary, () => ({
    __proto__: dart.getMethods(text_boundary.TextBoundary.__proto__),
    getTextBoundaryAt: dart.fnType(ui.TextRange, [ui.TextPosition]),
    '+': dart.fnType(text_boundary.TextBoundary, [text_boundary.TextBoundary])
  }));
  dart.setLibraryUri(text_boundary.TextBoundary, I[0]);
  var _text$ = dart.privateName(text_boundary, "CharacterBoundary._text");
  var _text = dart.privateName(text_boundary, "_text");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  var TextPosition_affinity = dart.privateName(ui, "TextPosition.affinity");
  var TextPosition_offset = dart.privateName(ui, "TextPosition.offset");
  text_boundary.CharacterBoundary = class CharacterBoundary extends text_boundary.TextBoundary {
    get [_text]() {
      return this[_text$];
    }
    set [_text](value) {
      super[_text] = value;
    }
    static ['_#new#tearOff'](_text) {
      return new text_boundary.CharacterBoundary.new(_text);
    }
    getLeadingTextBoundaryAt(position) {
      if (position.offset <= 0) {
        return C[0] || CT.C0;
      }
      if (position.offset > this[_text].length || position.offset === this[_text].length && position.affinity === ui.TextAffinity.downstream) {
        return new ui.TextPosition.new({offset: this[_text].length, affinity: ui.TextAffinity.upstream});
      }
      let endOffset = null;
      let startOffset = null;
      switch (position.affinity) {
        case C[2] || CT.C2:
          {
            startOffset = math.min(core.int, position.offset - 1, this[_text].length);
            endOffset = math.min(core.int, position.offset, this[_text].length);
            break;
          }
        case C[1] || CT.C1:
          {
            startOffset = math.min(core.int, position.offset, this[_text].length);
            endOffset = math.min(core.int, position.offset + 1, this[_text].length);
            break;
          }
      }
      return new ui.TextPosition.new({offset: characters_impl.StringCharacterRange.at(this[_text], startOffset, endOffset).stringBeforeLength});
    }
    getTrailingTextBoundaryAt(position) {
      if (position.offset < 0 || position.offset === 0 && position.affinity === ui.TextAffinity.upstream) {
        return C[0] || CT.C0;
      }
      if (position.offset >= this[_text].length) {
        return new ui.TextPosition.new({offset: this[_text].length, affinity: ui.TextAffinity.upstream});
      }
      let endOffset = null;
      let startOffset = null;
      switch (position.affinity) {
        case C[2] || CT.C2:
          {
            startOffset = math.min(core.int, position.offset - 1, this[_text].length);
            endOffset = math.min(core.int, position.offset, this[_text].length);
            break;
          }
        case C[1] || CT.C1:
          {
            startOffset = math.min(core.int, position.offset, this[_text].length);
            endOffset = math.min(core.int, position.offset + 1, this[_text].length);
            break;
          }
      }
      let range = characters_impl.StringCharacterRange.at(this[_text], startOffset, endOffset);
      return new ui.TextPosition.new({offset: this[_text].length - range.stringAfterLength, affinity: ui.TextAffinity.upstream});
    }
  };
  (text_boundary.CharacterBoundary.new = function(_text) {
    this[_text$] = _text;
    text_boundary.CharacterBoundary.__proto__.new.call(this);
    ;
  }).prototype = text_boundary.CharacterBoundary.prototype;
  dart.addTypeTests(text_boundary.CharacterBoundary);
  dart.addTypeCaches(text_boundary.CharacterBoundary);
  dart.setMethodSignature(text_boundary.CharacterBoundary, () => ({
    __proto__: dart.getMethods(text_boundary.CharacterBoundary.__proto__),
    getLeadingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTrailingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition])
  }));
  dart.setLibraryUri(text_boundary.CharacterBoundary, I[0]);
  dart.setFieldSignature(text_boundary.CharacterBoundary, () => ({
    __proto__: dart.getFields(text_boundary.CharacterBoundary.__proto__),
    [_text]: dart.finalFieldType(core.String)
  }));
  var _textLayout$ = dart.privateName(text_boundary, "WordBoundary._textLayout");
  var _textLayout = dart.privateName(text_boundary, "_textLayout");
  text_boundary.WordBoundary = class WordBoundary extends text_boundary.TextBoundary {
    get [_textLayout]() {
      return this[_textLayout$];
    }
    set [_textLayout](value) {
      super[_textLayout] = value;
    }
    static ['_#new#tearOff'](_textLayout) {
      return new text_boundary.WordBoundary.new(_textLayout);
    }
    getLeadingTextBoundaryAt(position) {
      return new ui.TextPosition.new({offset: this[_textLayout].getWordBoundary(position).start, affinity: ui.TextAffinity.downstream});
    }
    getTrailingTextBoundaryAt(position) {
      return new ui.TextPosition.new({offset: this[_textLayout].getWordBoundary(position).end, affinity: ui.TextAffinity.upstream});
    }
    getTextBoundaryAt(position) {
      return this[_textLayout].getWordBoundary(position);
    }
  };
  (text_boundary.WordBoundary.new = function(_textLayout) {
    this[_textLayout$] = _textLayout;
    text_boundary.WordBoundary.__proto__.new.call(this);
    ;
  }).prototype = text_boundary.WordBoundary.prototype;
  dart.addTypeTests(text_boundary.WordBoundary);
  dart.addTypeCaches(text_boundary.WordBoundary);
  dart.setMethodSignature(text_boundary.WordBoundary, () => ({
    __proto__: dart.getMethods(text_boundary.WordBoundary.__proto__),
    getLeadingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTrailingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition])
  }));
  dart.setLibraryUri(text_boundary.WordBoundary, I[0]);
  dart.setFieldSignature(text_boundary.WordBoundary, () => ({
    __proto__: dart.getFields(text_boundary.WordBoundary.__proto__),
    [_textLayout]: dart.finalFieldType(text_layout_metrics.TextLayoutMetrics)
  }));
  var _textLayout$0 = dart.privateName(text_boundary, "LineBreak._textLayout");
  text_boundary.LineBreak = class LineBreak extends text_boundary.TextBoundary {
    get [_textLayout]() {
      return this[_textLayout$0];
    }
    set [_textLayout](value) {
      super[_textLayout] = value;
    }
    static ['_#new#tearOff'](_textLayout) {
      return new text_boundary.LineBreak.new(_textLayout);
    }
    getLeadingTextBoundaryAt(position) {
      return new ui.TextPosition.new({offset: this[_textLayout].getLineAtOffset(position).start});
    }
    getTrailingTextBoundaryAt(position) {
      return new ui.TextPosition.new({offset: this[_textLayout].getLineAtOffset(position).end, affinity: ui.TextAffinity.upstream});
    }
    getTextBoundaryAt(position) {
      return this[_textLayout].getLineAtOffset(position);
    }
  };
  (text_boundary.LineBreak.new = function(_textLayout) {
    this[_textLayout$0] = _textLayout;
    text_boundary.LineBreak.__proto__.new.call(this);
    ;
  }).prototype = text_boundary.LineBreak.prototype;
  dart.addTypeTests(text_boundary.LineBreak);
  dart.addTypeCaches(text_boundary.LineBreak);
  dart.setMethodSignature(text_boundary.LineBreak, () => ({
    __proto__: dart.getMethods(text_boundary.LineBreak.__proto__),
    getLeadingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTrailingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition])
  }));
  dart.setLibraryUri(text_boundary.LineBreak, I[0]);
  dart.setFieldSignature(text_boundary.LineBreak, () => ({
    __proto__: dart.getFields(text_boundary.LineBreak.__proto__),
    [_textLayout]: dart.finalFieldType(text_layout_metrics.TextLayoutMetrics)
  }));
  var _text$0 = dart.privateName(text_boundary, "DocumentBoundary._text");
  text_boundary.DocumentBoundary = class DocumentBoundary extends text_boundary.TextBoundary {
    get [_text]() {
      return this[_text$0];
    }
    set [_text](value) {
      super[_text] = value;
    }
    static ['_#new#tearOff'](_text) {
      return new text_boundary.DocumentBoundary.new(_text);
    }
    getLeadingTextBoundaryAt(position) {
      return C[0] || CT.C0;
    }
    getTrailingTextBoundaryAt(position) {
      return new ui.TextPosition.new({offset: this[_text].length, affinity: ui.TextAffinity.upstream});
    }
  };
  (text_boundary.DocumentBoundary.new = function(_text) {
    this[_text$0] = _text;
    text_boundary.DocumentBoundary.__proto__.new.call(this);
    ;
  }).prototype = text_boundary.DocumentBoundary.prototype;
  dart.addTypeTests(text_boundary.DocumentBoundary);
  dart.addTypeCaches(text_boundary.DocumentBoundary);
  dart.setMethodSignature(text_boundary.DocumentBoundary, () => ({
    __proto__: dart.getMethods(text_boundary.DocumentBoundary.__proto__),
    getLeadingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTrailingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition])
  }));
  dart.setLibraryUri(text_boundary.DocumentBoundary, I[0]);
  dart.setFieldSignature(text_boundary.DocumentBoundary, () => ({
    __proto__: dart.getFields(text_boundary.DocumentBoundary.__proto__),
    [_text]: dart.finalFieldType(core.String)
  }));
  var _text$1 = dart.privateName(text_boundary, "WhitespaceBoundary._text");
  text_boundary.WhitespaceBoundary = class WhitespaceBoundary extends text_boundary.TextBoundary {
    get [_text]() {
      return this[_text$1];
    }
    set [_text](value) {
      super[_text] = value;
    }
    static ['_#new#tearOff'](_text) {
      return new text_boundary.WhitespaceBoundary.new(_text);
    }
    getLeadingTextBoundaryAt(position) {
      if (position.offset > this[_text].length || position.offset === this[_text].length && position.affinity === ui.TextAffinity.downstream) {
        position = new ui.TextPosition.new({offset: this[_text].length, affinity: ui.TextAffinity.upstream});
      }
      if (position.offset <= 0) {
        return C[0] || CT.C0;
      }
      let index = position.offset;
      if (position.affinity === ui.TextAffinity.downstream && !text_layout_metrics.TextLayoutMetrics.isWhitespace(this[_text][$codeUnitAt](index))) {
        return position;
      }
      while ((index = index - 1) >= 0) {
        if (!text_layout_metrics.TextLayoutMetrics.isWhitespace(this[_text][$codeUnitAt](index))) {
          return new ui.TextPosition.new({offset: index + 1, affinity: ui.TextAffinity.upstream});
        }
      }
      return C[0] || CT.C0;
    }
    getTrailingTextBoundaryAt(position) {
      if (position.offset >= this[_text].length) {
        return new ui.TextPosition.new({offset: this[_text].length, affinity: ui.TextAffinity.upstream});
      }
      if (position.offset < 0 || position.offset === 0 && position.affinity === ui.TextAffinity.upstream) {
        position = C[0] || CT.C0;
      }
      let index = position.offset;
      if (position.affinity === ui.TextAffinity.upstream && !text_layout_metrics.TextLayoutMetrics.isWhitespace(this[_text][$codeUnitAt](index - 1))) {
        return position;
      }
      for (; index < this[_text].length; index = index + 1) {
        if (!text_layout_metrics.TextLayoutMetrics.isWhitespace(this[_text][$codeUnitAt](index))) {
          return new ui.TextPosition.new({offset: index});
        }
      }
      return new ui.TextPosition.new({offset: this[_text].length, affinity: ui.TextAffinity.upstream});
    }
  };
  (text_boundary.WhitespaceBoundary.new = function(_text) {
    this[_text$1] = _text;
    text_boundary.WhitespaceBoundary.__proto__.new.call(this);
    ;
  }).prototype = text_boundary.WhitespaceBoundary.prototype;
  dart.addTypeTests(text_boundary.WhitespaceBoundary);
  dart.addTypeCaches(text_boundary.WhitespaceBoundary);
  dart.setMethodSignature(text_boundary.WhitespaceBoundary, () => ({
    __proto__: dart.getMethods(text_boundary.WhitespaceBoundary.__proto__),
    getLeadingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTrailingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition])
  }));
  dart.setLibraryUri(text_boundary.WhitespaceBoundary, I[0]);
  dart.setFieldSignature(text_boundary.WhitespaceBoundary, () => ({
    __proto__: dart.getFields(text_boundary.WhitespaceBoundary.__proto__),
    [_text]: dart.finalFieldType(core.String)
  }));
  var inner$ = dart.privateName(text_boundary, "_ExpandedTextBoundary.inner");
  var outer$ = dart.privateName(text_boundary, "_ExpandedTextBoundary.outer");
  text_boundary._ExpandedTextBoundary = class _ExpandedTextBoundary extends text_boundary.TextBoundary {
    get inner() {
      return this[inner$];
    }
    set inner(value) {
      super.inner = value;
    }
    get outer() {
      return this[outer$];
    }
    set outer(value) {
      super.outer = value;
    }
    static ['_#new#tearOff'](opts) {
      let inner = opts && 'inner' in opts ? opts.inner : null;
      let outer = opts && 'outer' in opts ? opts.outer : null;
      return new text_boundary._ExpandedTextBoundary.new({inner: inner, outer: outer});
    }
    getLeadingTextBoundaryAt(position) {
      return this.inner.getLeadingTextBoundaryAt(this.outer.getLeadingTextBoundaryAt(position));
    }
    getTrailingTextBoundaryAt(position) {
      return this.inner.getTrailingTextBoundaryAt(this.outer.getTrailingTextBoundaryAt(position));
    }
  };
  (text_boundary._ExpandedTextBoundary.new = function(opts) {
    let inner = opts && 'inner' in opts ? opts.inner : null;
    let outer = opts && 'outer' in opts ? opts.outer : null;
    this[inner$] = inner;
    this[outer$] = outer;
    text_boundary._ExpandedTextBoundary.__proto__.new.call(this);
    ;
  }).prototype = text_boundary._ExpandedTextBoundary.prototype;
  dart.addTypeTests(text_boundary._ExpandedTextBoundary);
  dart.addTypeCaches(text_boundary._ExpandedTextBoundary);
  dart.setMethodSignature(text_boundary._ExpandedTextBoundary, () => ({
    __proto__: dart.getMethods(text_boundary._ExpandedTextBoundary.__proto__),
    getLeadingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTrailingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition])
  }));
  dart.setLibraryUri(text_boundary._ExpandedTextBoundary, I[0]);
  dart.setFieldSignature(text_boundary._ExpandedTextBoundary, () => ({
    __proto__: dart.getFields(text_boundary._ExpandedTextBoundary.__proto__),
    inner: dart.finalFieldType(text_boundary.TextBoundary),
    outer: dart.finalFieldType(text_boundary.TextBoundary)
  }));
  var _forward$ = dart.privateName(text_boundary, "PushTextPosition._forward");
  var _forward = dart.privateName(text_boundary, "_forward");
  var _calculateTargetPosition = dart.privateName(text_boundary, "_calculateTargetPosition");
  text_boundary.PushTextPosition = class PushTextPosition extends text_boundary.TextBoundary {
    get [_forward]() {
      return this[_forward$];
    }
    set [_forward](value) {
      super[_forward] = value;
    }
    static ['_#_#tearOff'](_forward) {
      return new text_boundary.PushTextPosition.__(_forward);
    }
    [_calculateTargetPosition](position) {
      if (this[_forward]) {
        switch (position.affinity) {
          case C[2] || CT.C2:
            {
              return new ui.TextPosition.new({offset: position.offset});
            }
          case C[1] || CT.C1:
            {
              return position = new ui.TextPosition.new({offset: position.offset + 1, affinity: ui.TextAffinity.upstream});
            }
        }
      } else {
        switch (position.affinity) {
          case C[2] || CT.C2:
            {
              return position = new ui.TextPosition.new({offset: position.offset - 1});
            }
          case C[1] || CT.C1:
            {
              return new ui.TextPosition.new({offset: position.offset, affinity: ui.TextAffinity.upstream});
            }
        }
      }
    }
    getLeadingTextBoundaryAt(position) {
      return this[_calculateTargetPosition](position);
    }
    getTrailingTextBoundaryAt(position) {
      return this[_calculateTargetPosition](position);
    }
  };
  (text_boundary.PushTextPosition.__ = function(_forward) {
    this[_forward$] = _forward;
    text_boundary.PushTextPosition.__proto__.new.call(this);
    ;
  }).prototype = text_boundary.PushTextPosition.prototype;
  dart.addTypeTests(text_boundary.PushTextPosition);
  dart.addTypeCaches(text_boundary.PushTextPosition);
  dart.setMethodSignature(text_boundary.PushTextPosition, () => ({
    __proto__: dart.getMethods(text_boundary.PushTextPosition.__proto__),
    [_calculateTargetPosition]: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getLeadingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition]),
    getTrailingTextBoundaryAt: dart.fnType(ui.TextPosition, [ui.TextPosition])
  }));
  dart.setLibraryUri(text_boundary.PushTextPosition, I[0]);
  dart.setFieldSignature(text_boundary.PushTextPosition, () => ({
    __proto__: dart.getFields(text_boundary.PushTextPosition.__proto__),
    [_forward]: dart.finalFieldType(core.bool)
  }));
  dart.setStaticFieldSignature(text_boundary.PushTextPosition, () => ['forward', 'backward']);
  dart.defineLazy(text_boundary.PushTextPosition, {
    /*text_boundary.PushTextPosition.forward*/get forward() {
      return C[3] || CT.C3;
    },
    /*text_boundary.PushTextPosition.backward*/get backward() {
      return C[4] || CT.C4;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/services/text_boundary.dart", {
    "package:flutter/src/services/text_boundary.dart": text_boundary
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["text_boundary.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/services/text_boundary.dart.lib.js"}');
  // Exports:
  return {
    src__services__text_boundary: text_boundary
  };
}));

//# sourceMappingURL=text_boundary.dart.lib.js.map
